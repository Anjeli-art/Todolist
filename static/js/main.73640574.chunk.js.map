{"version":3,"sources":["API/todolistAPI.ts","reportWebVitals.ts","Redux/tasks-reducer.ts","Component/EditableSpan.tsx","Component/Task.tsx","Component/AddItemForm.tsx","Component/Todolist.tsx","Redux/todolist-reducer.ts","AppWithRedux.tsx","Redux/store.tsx","index.tsx"],"names":["TasksStatuses","PriorytiesTask","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","instance","axios","create","baseURL","withCredentials","headers","todolistApi","get","title","post","todolistId","delete","params","put","taskApi","taskid","model","initialState","changedTaskTitleAC","newTitle","type","EditableSpan","React","memo","onChange","useState","editmode","seteditmode","titleString","setTitleString","Input","value","e","currentTarget","onBlur","autoFocus","onDoubleClick","Task","task","todoId","dispatch","useDispatch","deletedTask","useCallback","id","res","removeTaskAC","onChangeHandler","taskId","status","checked","Completed","New","getState","currentTask","tasks","find","t","description","priority","startDate","deadline","changedTaskStatusAC","onChangeStatusHendler","Newvalue","style","listStyleType","className","Checkbox","color","inputProps","IconButton","onClick","AddItemForm","callback","setTitle","error","setError","addTask","trim","TextField","variant","onKeyPress","charCode","label","helperText","Button","backgroundColor","fontSize","padding","Todolist","props","useEffect","todolistid","tasksArray","setTaskAC","data","items","useSelector","state","onButtonFilterClick1","TodoChanged","onButtonFilterClick2","onButtonFilterClick3","onChangeTitleTodo","titleTodoStatus","taskfortodolist","filter","el","Box","boxShadow","border","borderRadius","removeTodo","item","addTasksTC","map","AppWithRedux","todos","todolists","addTodo","todolist","addTodoTÐ¡","AppBar","position","Toolbar","edge","Typography","margin","Container","marginTop","Grid","container","spacing","rootReducer","combineReducers","action","todo","copyState","forEach","todoListId","stateCopy","store","createStore","applyMiddleware","thunk","window","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.73640574.chunk.js","sourcesContent":["import axios, {AxiosResponse} from \"axios\";\r\n\r\n\r\nconst instance = axios.create({\r\n    baseURL: \"https://social-network.samuraijs.com/api/1.1\",\r\n    withCredentials: true,\r\n    headers: {\r\n        \"API-KEY\": \"7ccc0386-8558-4e56-b3f7-82cd09cd2d3e\"\r\n    }\r\n})\r\n\r\n\r\nexport type TodolistsType = {\r\n    id: string\r\n    addedDate: string\r\n    order: number\r\n    title: string\r\n}\r\n\r\ntype CommonResponseType<T = {}> = {\r\n    resultCode: number\r\n    messages: string[]\r\n    fieldsErrors: string[]\r\n    data: T\r\n}\r\n\r\nexport enum TasksStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n\r\n}\r\n\r\nexport enum PriorytiesTask{\r\n    Low=0,\r\n    Middle=1,\r\n    Hi=2,\r\n    Urgently=3,\r\n    later=4\r\n\r\n}\r\n\r\n\r\nexport type TasksType = {\r\n    description: string\r\n    title: string\r\n    status: TasksStatuses\r\n    priority: PriorytiesTask\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\ntype GetTasksResponse = {\r\n    items: TasksType[]\r\n    totalCount: number\r\n    error: string | null\r\n\r\n}\r\nexport type UpdateTask = {\r\n    title: string\r\n    description: string\r\n    status: TasksStatuses\r\n    priority: PriorytiesTask\r\n    startDate: string\r\n    deadline: string\r\n}\r\n\r\n\r\nexport const todolistApi = {\r\n    getTodolists() {\r\n        return instance.get<Array<TodolistsType>>(\"/todo-lists\")\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<CommonResponseType<{ item: TodolistsType }>,\r\n            AxiosResponse<CommonResponseType<{ item: TodolistsType }>>,\r\n            { title: string }>(\"/todo-lists\", {title})\r\n    }\r\n    ,\r\n    deleteTodolist(todolistId: string) {\r\n        return instance.delete<CommonResponseType>(`/todo-lists/${todolistId}`)\r\n    }\r\n    ,\r\n    updateTodolistTitle(params: { title: string, todolistId: string }) {\r\n        return instance.put<CommonResponseType,\r\n            AxiosResponse<CommonResponseType>,\r\n            { title: string }>(`/todo-lists/${params.todolistId}`, {title: params.title})\r\n    }\r\n}\r\n\r\nexport const taskApi = {\r\n    getTask(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`/todo-lists/${todolistId}/tasks`)\r\n    },\r\n    createTask(title: string, todolistId: string) {\r\n        return instance.post<CommonResponseType<{item:TasksType}>>(`/todo-lists/${todolistId}/tasks`, {title})\r\n    }\r\n    ,\r\n    deleteTask(todolistId: string, taskid: string) {\r\n        return instance.delete<CommonResponseType>(`/todo-lists/${todolistId}/tasks/${taskid}`)\r\n    }\r\n    ,\r\n    updateTask( model:UpdateTask, todolistId: string, taskid: string ) {\r\n        return instance.put<CommonResponseType<{item:TasksType}>>(`/todo-lists/${todolistId}/tasks/${taskid}`, model)\r\n    }\r\n}","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {taskApi, TasksStatuses, TasksType, UpdateTask} from \"../API/todolistAPI\";\r\nimport {Dispatch} from \"redux\";\r\nimport {AppRootType} from \"./store\";\r\nimport {TypeForTasksAction} from \"./todolist-reducer\";\r\n\r\n\r\ntype ActionTypeTasks =\r\n    ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof changedTaskStatusAC>\r\n    | ReturnType<typeof changedTaskTitleAC>\r\n    | ReturnType<typeof setTaskAC>\r\n    | TypeForTasksAction\r\n\r\nexport type TaskStateType = {\r\n    [key: string]: Array<TasksType>\r\n}\r\n\r\nconst initialState: TaskStateType = {}\r\n\r\nexport const tasksReducer = (state: TaskStateType = initialState, action: ActionTypeTasks): TaskStateType => {\r\n\r\n    switch (action.type) {\r\n        case \"SET-TODO\":\r\n            let copyState = {...state}\r\n            action.todos.forEach((t) => {\r\n                copyState[t.id] = []\r\n            })\r\n            return copyState\r\n        case 'REMOVE-TASK':\r\n        return {...state,[action.todolistId]: state[action.todolistId].filter(t => t.id !== action.id)}\r\n\r\n        case 'ADD-TASK':\r\n            return {...state,[action.task.todoListId]:[action.task, ...state[action.task.todoListId]]}\r\n\r\n        case 'CHANGE-TASK-STATUS':\r\n        return {...state,[action.todolistId]:state[action.todolistId].map(t => t.id === action.taskid ? {...t, status: action.status} : t)}\r\n\r\n        case 'CHANGE-TASK-TITLE':\r\n            return {...state,[action.todolistId]:state[action.todolistId].map(t => t.id === action.taskid ? {...t, title: action.title} : t)}\r\n\r\n        case 'ADD-TODOLIST':\r\n        return {...state,[action.todolist.id]:[]}\r\n\r\n        case 'REMOVE-TODOLIST': {\r\n            const stateCopy = {...state}\r\n            delete stateCopy[action.id]\r\n            return stateCopy\r\n        }\r\n        case \"SET-TASKS\":\r\n            return {...state,[action.todolistId] : action.tasks}\r\n\r\n\r\n        default:\r\n            return state\r\n    }\r\n};\r\n\r\nexport const removeTaskAC = (todolistId: string, id: string) => ({\r\n    type: 'REMOVE-TASK',\r\n    id,\r\n    todolistId,\r\n}) as const\r\n\r\nexport const addTaskAC = (task: TasksType) => ({\r\n    type: 'ADD-TASK',\r\n    task\r\n}) as const\r\n\r\nexport const changedTaskStatusAC = (taskid: string, status: TasksStatuses, todolistId: string) => ({\r\n    type: 'CHANGE-TASK-STATUS',\r\n    status,\r\n    taskid,\r\n    todolistId,\r\n}) as const\r\n\r\nexport const changedTaskTitleAC = (taskid: string, newTitle: string, todolistId: string) => ({\r\n    type: 'CHANGE-TASK-TITLE',\r\n    title: newTitle,\r\n    taskid,\r\n    todolistId,\r\n}) as const\r\n\r\n\r\nexport const setTaskAC = (tasksArray: Array<TasksType>, todolistId: string) => ({\r\n    type: \"SET-TASKS\",\r\n    tasks: tasksArray,\r\n    todolistId\r\n}) as const\r\n\r\n\r\nexport const setTasksTC = (todolistId: string) => (dispatch: Dispatch) => {\r\n    taskApi.getTask(todolistId)\r\n        .then((res) => {\r\n            dispatch(setTaskAC(res.data.items, todolistId))\r\n        })\r\n\r\n}\r\n\r\nexport const deleteTasksTC = (todolistId: string, taskid: string) => (dispatch: Dispatch) => {\r\n    taskApi.deleteTask(todolistId, taskid)\r\n        .then((res) => {\r\n            dispatch(removeTaskAC(todolistId, taskid))\r\n        })\r\n\r\n}\r\n\r\nexport const addTasksTC = (title: string, todolistId: string) => (dispatch: Dispatch) => {\r\n    taskApi.createTask(title, todolistId)\r\n        .then((res) => {\r\n            dispatch(addTaskAC(res.data.data.item))\r\n        })\r\n\r\n}\r\n\r\nexport const updateTasksStatusTC = (taskId: string, todolistId: string, status: TasksStatuses) =>\r\n    (dispatch: Dispatch, getState: () => AppRootType) => {\r\n        const tasks = getState().tasks[todolistId]\r\n        const currentTask = tasks.find(t => {\r\n            return t.id === taskId\r\n        })\r\n        if (currentTask) {\r\n            const model: UpdateTask = {\r\n                title: currentTask.title,\r\n                status,\r\n                description: currentTask.description,\r\n                priority: currentTask.priority,\r\n                startDate: currentTask.startDate,\r\n                deadline: currentTask.deadline\r\n            }\r\n\r\n\r\n            taskApi.updateTask(model, todolistId, taskId)\r\n                .then((res) => {\r\n                    dispatch(changedTaskStatusAC(taskId, status, todolistId))\r\n\r\n                })\r\n\r\n        }\r\n    }\r\n\r\nexport const updateTasksTitleTC = (taskId: string, todolistId: string, title: string) =>\r\n    (dispatch: Dispatch, getState: () => AppRootType) => {\r\n        const tasks = getState().tasks[todolistId]\r\n        const currentTask = tasks.find(t => {\r\n            return t.id === taskId\r\n        })\r\n        if (currentTask) {\r\n            const model: UpdateTask = {\r\n                title: title,\r\n                status: currentTask.status,\r\n                description: currentTask.description,\r\n                priority: currentTask.priority,\r\n                startDate: currentTask.startDate,\r\n                deadline: currentTask.deadline\r\n            }\r\n\r\n\r\n            taskApi.updateTask(model, todolistId, taskId)\r\n                .then((res) => {\r\n                    dispatch(changedTaskTitleAC(taskId, title, todolistId))\r\n\r\n                })\r\n\r\n        }\r\n    }","import React, {ChangeEvent, useState} from \"react\";\r\nimport {Input} from \"@material-ui/core\";\r\n\r\nexport type EditablespanType = {\r\n    title: string\r\n    onChange:(Newvalue:string)=>void\r\n}\r\n\r\nexport const EditableSpan:React.FC< EditablespanType>=React.memo(({title,onChange})=> {\r\n\r\n    let [editmode, seteditmode] = useState(false)\r\n    let [titleString, setTitleString] = useState(\"\")\r\n\r\n    const activaiteEditMode = () => {seteditmode(true);setTitleString(title)}\r\n    const activaiteViewMode = () => {seteditmode(false);onChange(titleString)}\r\n    const onChangeHandler = (e:ChangeEvent<HTMLInputElement>) => {\r\n        setTitleString(e.currentTarget.value)\r\n    }\r\n    return (\r\n        editmode ? <Input value={titleString} onChange={onChangeHandler} onBlur={activaiteViewMode} autoFocus/>\r\n            : <span onDoubleClick={activaiteEditMode}>{title}</span>\r\n    )\r\n\r\n})","import React, {ChangeEvent, useCallback} from \"react\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {\r\n    changedTaskTitleAC,\r\n    deleteTasksTC, updateTasksStatusTC,\r\n} from \"../Redux/tasks-reducer\";\r\nimport {Checkbox, IconButton} from \"@material-ui/core\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport {TasksStatuses, TasksType} from \"../API/todolistAPI\";\r\n\r\n\r\ntype TaskPropsType = {\r\n    task: TasksType\r\n    todoId: string\r\n}\r\n\r\nexport const Task: React.FC<TaskPropsType> = React.memo(({task, todoId}) => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const deletedTask = useCallback(() => {\r\n        dispatch(deleteTasksTC( todoId,task.id,))\r\n    }, [dispatch, todoId,task.id])\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        dispatch(updateTasksStatusTC(task.id,todoId, e.currentTarget.checked ? TasksStatuses.Completed:TasksStatuses.New))\r\n    }, [dispatch, task.id, todoId])\r\n\r\n    const onChangeStatusHendler = useCallback((Newvalue: string) => {\r\n        dispatch(changedTaskTitleAC(task.id, Newvalue, todoId))\r\n    }, [dispatch, task.id, todoId])\r\n\r\n    return <li style={{listStyleType: \"none\"}} className={task.status=== TasksStatuses.Completed? \"is-done\" : \"\"}>\r\n        <Checkbox\r\n            checked={task.status===TasksStatuses.Completed} onChange={onChangeHandler}\r\n            color=\"default\"\r\n            inputProps={{'aria-label': 'checkbox with default color'}}\r\n        />\r\n        <IconButton aria-label=\"delete\" color=\"default\" onClick={deletedTask}>\r\n            <DeleteIcon/>\r\n        </IconButton>\r\n        <EditableSpan title={task.title} onChange={onChangeStatusHendler}/>\r\n    </li>\r\n})","import {Button, TextField} from '@material-ui/core';\r\nimport React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\n\r\n\r\nexport type AdditemformPropsType = {\r\n    callback: (title: string) => void\r\n}\r\n\r\nexport const AddItemForm:React.FC<AdditemformPropsType> =React.memo( ({callback}) => {\r\n\r\n    const [title, setTitle] = useState(\"\")\r\n    const [error, setError] = useState<string | null>(null)\r\n\r\n    const inputHandlerCnange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onEnterHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if(error!==null){\r\n            setError(null)\r\n        }\r\n        if (e.charCode === 13) {\r\n            addTask()\r\n        }\r\n    }\r\n\r\n\r\n    const addTask = () => {\r\n        if (title.trim() !== \"\") {\r\n            callback(title.trim())\r\n            setTitle(\"\")\r\n        } else {\r\n            setError(\"title is required\")\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n\r\n        <div>\r\n            <TextField variant={\"outlined\"} value={title} onChange={inputHandlerCnange} onKeyPress={onEnterHandler}\r\n                       label={\"Type value\"} error={!!error} helperText={error}/>\r\n            <Button onClick={addTask} variant={\"contained\"} color={\"primary\"}\r\n                    style={{backgroundColor: \"#ffca28\", fontSize: \"10px\", padding: \"18px 0px 18px 0px\"}}>+</Button>\r\n\r\n        </div>\r\n\r\n    );\r\n});\r\n\r\n\r\n\r\n","import React, {useCallback, useEffect} from \"react\";\r\nimport {Box, Button, IconButton} from \"@material-ui/core\";\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport {addTaskAC, addTasksTC, setTasksTC} from \"../Redux/tasks-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootType} from \"../Redux/store\";\r\nimport {Task} from \"./Task\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {TasksStatuses, TasksType} from \"../API/todolistAPI\";\r\nimport {filterType} from \"../Redux/todolist-reducer\";\r\n\r\n\r\ntype TodolistType = {\r\n    title: string\r\n    TodoChanged: (value: filterType, todolistid: string) => void\r\n    filter: filterType\r\n    todolistid: string\r\n    removeTodo: (todolistid: string) => void\r\n    titleTodoStatus: (todolistid: string, Newvalue: string) => void\r\n}\r\n\r\n\r\nexport const Todolist: React.FC<TodolistType> = React.memo((props) => {\r\n\r\n    useEffect(() => {\r\n        dispatch(setTasksTC(props.todolistid))\r\n    }, [])\r\n\r\n    const tasks = useSelector<AppRootType, Array<TasksType>>(state => state.tasks[props.todolistid])\r\n    const dispatch = useDispatch()\r\n\r\n    const onButtonFilterClick1 = useCallback(() => {\r\n        props.TodoChanged(\"all\", props.todolistid)\r\n    }, [props.TodoChanged, props.todolistid])\r\n    const onButtonFilterClick2 = useCallback(() => {\r\n        props.TodoChanged(\"active\", props.todolistid)\r\n    }, [props.TodoChanged, props.todolistid])\r\n    const onButtonFilterClick3 = useCallback(() => {\r\n        props.TodoChanged(\"completed\", props.todolistid)\r\n    }, [props.TodoChanged, props.todolistid])\r\n\r\n    const handlerTodoList = () => props.removeTodo(props.todolistid)\r\n\r\n    const onChangeTitleTodo = useCallback((Newvalue: string) => {\r\n        props.titleTodoStatus(props.todolistid, Newvalue)\r\n    }, [props.titleTodoStatus, props.todolistid])\r\n\r\n    let taskfortodolist = tasks\r\n\r\n    if (props.filter === \"completed\") {\r\n        taskfortodolist = taskfortodolist.filter(el => el.status === TasksStatuses.Completed)\r\n    }\r\n    if (props.filter === \"active\") {\r\n        taskfortodolist = taskfortodolist.filter(el => el.status === TasksStatuses.New)\r\n    }\r\n\r\n    return (\r\n        <Box boxShadow={10}\r\n             style={{padding: \"15px\", border: \"3px #ffca28 solid\", borderRadius: \"10px\", backgroundColor: \"white\"}}>\r\n            <h3>\r\n                <EditableSpan title={props.title} onChange={onChangeTitleTodo}/>\r\n                <IconButton aria-label=\"delete\" color=\"default\" onClick={handlerTodoList}>\r\n                    <DeleteIcon/>\r\n                </IconButton>\r\n            </h3>\r\n            <AddItemForm\r\n                callback={useCallback((title) => {\r\n                    dispatch(addTasksTC(title, props.todolistid))\r\n                }, [dispatch, props.todolistid])}/>\r\n            <ul>\r\n                {taskfortodolist.map(el => {\r\n                        return <Task task={el} todoId={props.todolistid} key={el.id}/>\r\n                    }\r\n                )}\r\n            </ul>\r\n            <div>\r\n                <Button variant={props.filter === \"all\" ? \"contained\" : \"text\"} style={{padding: \"2px\",}}\r\n                        onClick={onButtonFilterClick1}>all\r\n                </Button>\r\n                <Button variant={props.filter === \"active\" ? \"contained\" : \"text\"} style={{padding: \"2px\"}}\r\n                        onClick={onButtonFilterClick2}>active\r\n                </Button>\r\n                <Button variant={props.filter === \"completed\" ? \"contained\" : \"text\"} style={{padding: \"2px\"}}\r\n                        onClick={onButtonFilterClick3}>complited\r\n                </Button>\r\n            </div>\r\n        </Box>\r\n\r\n    )\r\n\r\n})\r\n\r\n\r\n\r\n","import {todolistApi, TodolistsType} from \"../API/todolistAPI\";\r\nimport {Dispatch} from \"redux\";\r\n\r\nexport type TypeForTasksAction =\r\n    ReturnType<typeof removeTodolistAC>\r\n    | ReturnType<typeof addTodolistAC>\r\n    | ReturnType<typeof setTodosAC>\r\n\r\ntype ActionTypeTodolists =\r\n    | ReturnType<typeof changeTitleTodoAC>\r\n    | ReturnType<typeof changeFilterTodoAC>\r\n    | TypeForTasksAction\r\n\r\nexport type filterType = \"all\" | \"active\" | \"completed\"\r\nexport type TodolistsTypeEntity = TodolistsType & { filter: filterType }\r\n\r\nconst initialState: Array<TodolistsTypeEntity> = []\r\n\r\nexport const todolistsReducer = (state: Array<TodolistsTypeEntity> = initialState, action: ActionTypeTodolists): Array<TodolistsTypeEntity> => {\r\n\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(todo => todo.id !== action.id)\r\n\r\n        case 'ADD-TODOLIST':\r\n            return [{...action.todolist, filter: \"all\"}, ...state]\r\n\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            return state.map(todo => todo.id === action.id ? {...todo, title: action.title} : todo)\r\n\r\n        case'CHANGE-TODOLIST-FILTER':\r\n            return state.map(todo => todo.id === action.id ? {...todo, filter: action.filter} : todo)\r\n\r\n        case\"SET-TODO\":\r\n            return action.todos.map(todo => {\r\n                return {...todo, filter: \"all\"}\r\n            })\r\n\r\n        default:\r\n            return state\r\n    }\r\n};\r\n\r\nexport const removeTodolistAC = (id: string) => ({\r\n    type: 'REMOVE-TODOLIST',\r\n    id\r\n}) as const\r\n\r\nexport const addTodolistAC = (todolist: TodolistsType) => ({\r\n    type: 'ADD-TODOLIST',\r\n    todolist\r\n}) as const\r\n\r\nexport const changeTitleTodoAC = (id: string, newTodolistTitle: string) => ({\r\n    type: 'CHANGE-TODOLIST-TITLE',\r\n    id,\r\n    title: newTodolistTitle\r\n}) as const\r\n\r\nexport const changeFilterTodoAC = (filter: filterType, id: string) => ({\r\n    type: 'CHANGE-TODOLIST-FILTER',\r\n    id,\r\n    filter\r\n}) as const\r\n\r\n\r\nexport const setTodosAC = (todosArray: Array<TodolistsType>) => ({\r\n    type: \"SET-TODO\",\r\n    todos: todosArray\r\n}) as const\r\n\r\n\r\nexport const setTodoTÐ¡ = () => (dispatch: Dispatch) => {\r\n    todolistApi.getTodolists()\r\n        .then((res) => {\r\n            dispatch(setTodosAC(res.data))\r\n        })\r\n\r\n}\r\n\r\nexport const removeTodoTÐ¡ = (todolistId: string) => (dispatch: Dispatch) => {\r\n    todolistApi.deleteTodolist(todolistId)\r\n        .then((res) => {\r\n            dispatch(removeTodolistAC(todolistId))\r\n        })\r\n\r\n}\r\n\r\nexport const addTodoTÐ¡ = (title: string) => (dispatch: Dispatch) => {\r\n    todolistApi.createTodolist(title)\r\n        .then((res) => {\r\n            dispatch(addTodolistAC(res.data.data.item))\r\n        })\r\n\r\n}\r\nexport const changeTodoTÐ¡ = (todolistId: string, title: string) => (dispatch: Dispatch) => {\r\n    todolistApi.updateTodolistTitle({todolistId, title})\r\n        .then((res) => {\r\n            dispatch(changeTitleTodoAC(todolistId, title))\r\n        })\r\n\r\n}","import React, {useCallback, useEffect,} from 'react';\nimport './App.css';\nimport {Todolist} from \"./Component/Todolist\";\nimport {AddItemForm} from \"./Component/AddItemForm\";\nimport {AppBar, Box, Button, Container, Grid, IconButton, Toolbar, Typography} from \"@material-ui/core\";\nimport MenuIcon from '@material-ui/icons/Menu'\nimport {\n    addTodoTÐ¡,\n    changeFilterTodoAC,\n    changeTitleTodoAC, changeTodoTÐ¡, filterType,\n    removeTodoTÐ¡, setTodoTÐ¡, TodolistsTypeEntity,\n} from \"./Redux/todolist-reducer\";\n\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootType} from \"./Redux/store\";\nimport {TasksType} from \"./API/todolistAPI\";\n\n\nexport type TaskStateType = {\n    [key: string]: Array<TasksType>\n}\n\nexport const AppWithRedux: React.FC = () => {\n\n    useEffect(() => {\n        dispatch(setTodoTÐ¡())\n    }, [])\n\n    const dispatch = useDispatch()\n    const todolists = useSelector<AppRootType, Array<TodolistsTypeEntity>>(state => state.todolists)\n\n\n    const removeTodo = useCallback((todolistid: string) => {\n        dispatch(removeTodoTÐ¡(todolistid))\n\n    }, [dispatch])\n    const titleTodoStatus = useCallback((todolistid: string, Newvalue: string) => {\n        dispatch(changeTodoTÐ¡(todolistid, Newvalue))\n    }, [dispatch])\n\n    const addTodo = useCallback((title: string) => {\n        dispatch(addTodoTÐ¡(title))\n    }, [dispatch])\n\n    const TodoChanged = useCallback((value: filterType, todolistid: string) => {\n        dispatch(changeFilterTodoAC(value, todolistid))\n    }, [dispatch])\n\n    return (\n        <Box>\n            <AppBar position=\"static\" style={{backgroundColor: \"#ffca28\", padding: \"20px\"}}>\n                <Toolbar>\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\n                        <MenuIcon/>\n                    </IconButton>\n                    <Typography variant=\"h2\" style={{margin: \"0px 40px 0px 40px\"}}>\n                        Todolist\n                    </Typography>\n                    <Button color=\"inherit\">Login</Button>\n                </Toolbar>\n            </AppBar>\n            <Container style={{marginTop: \"20px\"}}>\n                <Grid container style={{padding: \"20px\"}}>\n                    <AddItemForm callback={addTodo}/>\n                </Grid>\n                <Grid container spacing={3}>\n                    {todolists.map(el => {\n                        return <Grid item key={el.id}>\n                            <Todolist title={el.title}\n                                      todolistid={el.id}\n                                      TodoChanged={TodoChanged}\n                                      filter={el.filter}\n                                      removeTodo={removeTodo}\n                                      titleTodoStatus={titleTodoStatus}\n                            />\n                        </Grid>\n                    })}</Grid>\n            </Container>\n        </Box>)\n}\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport {todolistsReducer} from \"./todolist-reducer\";\r\nimport {tasksReducer} from \"./tasks-reducer\";\r\nimport thunk from \"redux-thunk\";\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    todolists: todolistsReducer,\r\n    tasks: tasksReducer\r\n})\r\nexport type AppRootType = ReturnType<typeof rootReducer>\r\n\r\nexport const store = createStore(rootReducer,applyMiddleware(thunk))\r\n\r\n// @ts-ignore\r\nwindow.store = store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport {AppWithRedux} from \"./AppWithRedux\";\nimport {Provider} from \"react-redux\";\nimport {store} from \"./Redux/store\";\n\nReactDOM.render(\n    <Provider store={store}>\n        <AppWithRedux/>\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}