{"version":3,"sources":["API/todolistAPI.ts","reportWebVitals.ts","features/TodolistsList/todolist-reducer.ts","app/app-reducer.ts","utils/error-utils.ts","components/AddItemForm/AddItemForm.tsx","features/TodolistsList/tasks-reducer.ts","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","components/LinearProgress/LinearProgress.tsx","components/ErrorSnackBar/SnackBar.tsx","features/Login/auth-reducer.ts","features/Login/Login.tsx","features/404/ErrorRouter404.tsx","app/App.tsx","app/store.tsx","index.tsx"],"names":["TasksStatuses","PriorytiesTask","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","instance","axios","create","baseURL","withCredentials","headers","ServerResponseResultCode","todolistApi","get","title","post","res","data","resultCode","success","SyntaxError","messages","todolistId","delete","params","put","taskApi","taskid","model","authApi","initialstate","status","error","setAppStatusAC","type","setAppErrorAC","handleServerNetworkError","e","dispatch","name","message","initialState","removeTodolistAC","id","AddItemForm","React","memo","callback","disabled","useState","setTitle","setError","addTask","trim","TextField","variant","value","onChange","currentTarget","onKeyPress","charCode","label","helperText","Button","onClick","color","style","backgroundColor","fontSize","padding","removeTaskAC","changedTaskAC","setTaskAC","tasksArray","tasks","updateTasksTC","taskId","getState","a","currentTask","find","t","apiModel","description","priority","startDate","deadline","EditableSpan","editmode","seteditmode","titleString","setTitleString","Input","onBlur","autoFocus","onDoubleClick","Task","task","todoId","useDispatch","deletedTask","useCallback","onChangeHandler","checked","Completed","New","onChangeStatusHendler","Newvalue","listStyleType","className","Checkbox","inputProps","IconButton","Todolist","todo","TodoChanged","removeTodo","titleTodoStatus","demo","useEffect","items","useSelector","state","onButtonFilterClick1","onButtonFilterClick2","onButtonFilterClick3","onChangeTitleTodo","taskfortodolist","filter","el","Box","boxShadow","border","borderRadius","entityStatus","item","addTasksTC","map","TodolistsList","login","auth","isLoggedIn","todos","todolists","todolistid","addTodo","todolist","addTodoTÐ¡","Grid","container","spacing","to","LinearDeterminate","progress","setProgress","timer","setInterval","oldProgress","diff","Math","random","min","clearInterval","sx","width","LinearProgress","Alert","forwardRef","props","ref","elevation","ErrorSnackbar","app","handleClose","event","reason","console","log","Snackbar","open","autoHideDuration","onClose","severity","isInitialized","setLoginAC","Login","useForm","mode","register","formState","errors","isValid","handleSubmit","reset","justifyContent","FormControl","FormLabel","href","target","onSubmit","setLoginTC","FormGroup","margin","size","email","required","minLength","pattern","height","fontWeight","password","FormControlLabel","control","ErrorRouter404","App","logOut","AppBar","position","Toolbar","edge","Typography","Container","marginTop","path","element","top","textAlign","CircularProgress","rootReducer","combineReducers","action","copyState","forEach","todoListId","stateCopy","store","createStore","applyMiddleware","thunk","window","ReactDOM","render","basename","document","getElementById"],"mappings":"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","file":"static/js/main.510f9717.chunk.js","sourcesContent":["import axios, {AxiosResponse} from \"axios\";\r\nimport {ServerResponseResultCode} from \"../features/TodolistsList/todolist-reducer\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: \"https://social-network.samuraijs.com/api/1.1\",\r\n    withCredentials: true,\r\n    headers: {\r\n        \"API-KEY\": \"7ccc0386-8558-4e56-b3f7-82cd09cd2d3e\"\r\n    }\r\n})\r\n\r\n\r\nexport type TodolistsType = {\r\n    id: string\r\n    addedDate: string\r\n    order: number\r\n    title: string\r\n}\r\n\r\ntype CommonResponseType<T = {}> = {\r\n    resultCode: number\r\n    messages: string[]\r\n    fieldsErrors: string[]\r\n    data: T\r\n}\r\n\r\nexport enum TasksStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n\r\n}\r\n\r\nexport enum PriorytiesTask {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    later = 4\r\n\r\n}\r\n\r\n\r\nexport type TasksType = {\r\n    description: string\r\n    title: string\r\n    status: TasksStatuses\r\n    priority: PriorytiesTask\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\ntype GetTasksResponse = {\r\n    items: TasksType[]\r\n    totalCount: number\r\n    error: string | null\r\n\r\n}\r\nexport type UpdateTask = {\r\n    title: string\r\n    description: string\r\n    status: TasksStatuses\r\n    priority: PriorytiesTask\r\n    startDate: string\r\n    deadline: string\r\n}\r\n\r\nexport type LoginParamsType={\r\n    email: string,\r\n    password: string,\r\n    rememberMe?:boolean,\r\n    captcha?:string\r\n}\r\n\r\nexport const todolistApi = {\r\n    getTodolists() {\r\n        return instance.get<Array<TodolistsType>>(\"/todo-lists\")\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<CommonResponseType<{ item: TodolistsType }>,\r\n            AxiosResponse<CommonResponseType<{ item: TodolistsType }>>,\r\n            { title: string }>(\"/todo-lists\", {title}).then((res) => {\r\n            if (res.data.resultCode !== ServerResponseResultCode.success) {\r\n                throw new SyntaxError(res.data.messages[0])\r\n            } else return res\r\n        })\r\n    }\r\n    ,\r\n    deleteTodolist(todolistId: string) {\r\n        return instance.delete<CommonResponseType>(`/todo-lists/${todolistId}`).then((res) => {\r\n            if (res.data.resultCode !== ServerResponseResultCode.success) {\r\n                throw new SyntaxError(res.data.messages[0])\r\n            } else return res\r\n        })\r\n    }\r\n    ,\r\n    updateTodolistTitle(params: { title: string, todolistId: string }) {\r\n        return instance.put<CommonResponseType,\r\n            AxiosResponse<CommonResponseType>,\r\n            { title: string }>(`/todo-lists/${params.todolistId}`, {title: params.title}).then((res) => {\r\n            if (res.data.resultCode !== ServerResponseResultCode.success) {\r\n                throw new SyntaxError(res.data.messages[0])\r\n            } else return res\r\n        })\r\n    }\r\n}\r\n\r\nexport const taskApi = {\r\n    getTask(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`/todo-lists/${todolistId}/tasks`)\r\n    },\r\n    createTask(title: string, todolistId: string) {\r\n        return instance.post<CommonResponseType<{ item: TasksType }>>(`/todo-lists/${todolistId}/tasks`, {title}).then((res) => {\r\n            if (res.data.resultCode !== ServerResponseResultCode.success) {\r\n                throw new SyntaxError(res.data.messages[0])\r\n            } else return res\r\n        })\r\n    }\r\n    ,\r\n    deleteTask(todolistId: string, taskid: string) {\r\n        return instance.delete<CommonResponseType>(`/todo-lists/${todolistId}/tasks/${taskid}`).then((res) => {\r\n            if (res.data.resultCode !== ServerResponseResultCode.success) {\r\n                throw new SyntaxError(res.data.messages[0])\r\n            } else return res\r\n        })\r\n    }\r\n    ,\r\n    updateTask(model: UpdateTask, todolistId: string, taskid: string) {\r\n        return instance.put<CommonResponseType<{ item: TasksType }>>(`/todo-lists/${todolistId}/tasks/${taskid}`, model).then((res) => {\r\n            if (res.data.resultCode !== ServerResponseResultCode.success) {\r\n                throw new SyntaxError(res.data.messages[0])\r\n            } else return res\r\n        })\r\n    }\r\n}\r\n\r\nexport const authApi = {\r\n    createLogin(data:LoginParamsType) {\r\n        return instance.post<LoginParamsType,AxiosResponse<CommonResponseType<{ userId:number }>>>(`/auth/login`, data)\r\n            .then((res) => {\r\n            if (res.data.resultCode !== ServerResponseResultCode.success) {\r\n                throw new SyntaxError(res.data.messages[0])\r\n            } else return res\r\n        })\r\n    },\r\n    deleteLogin() {\r\n        return instance.delete<CommonResponseType>(`/auth/login`)\r\n            .then((res) => {\r\n            if (res.data.resultCode !== ServerResponseResultCode.success) {\r\n                throw new SyntaxError(res.data.messages[0])\r\n            } else return res\r\n        })\r\n    },\r\n    authMe() {\r\n        return instance.get<CommonResponseType<{ id: number, email: string, login: string }>>(`/auth/me`)\r\n            .then((res) => {\r\n            if (res.data.resultCode !== ServerResponseResultCode.success) {\r\n                throw new SyntaxError(res.data.messages[0])\r\n            } else return res\r\n        })\r\n    },\r\n}\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {todolistApi, TodolistsType} from \"../../API/todolistAPI\";\r\nimport {AppThunk} from \"../../app/store\";\r\nimport {setAppStatusAC} from \"../../app/app-reducer\";\r\nimport {handleServerNetworkError} from \"../../utils/error-utils\";\r\n\r\nexport type TypeForTasksAction =\r\n    ReturnType<typeof removeTodolistAC>\r\n    | ReturnType<typeof addTodolistAC>\r\n    | ReturnType<typeof setTodosAC>\r\n\r\nexport type ActionTypeTodolists =\r\n    | ReturnType<typeof changeTitleTodoAC>\r\n    | ReturnType<typeof changeFilterTodoAC>\r\n    | TypeForTasksAction\r\n    | ReturnType<typeof changeEntityStatusTodoAC>\r\n\r\n\r\nexport type filterType = \"all\" | \"active\" | \"completed\"\r\nexport type EntityStatusType = \"idle\" | \"sucsses\" | \"loading\" | \"failed\"\r\nexport type TodolistsTypeEntity = TodolistsType & { filter: filterType, entityStatus: EntityStatusType }\r\n\r\nconst initialState: Array<TodolistsTypeEntity> = []\r\n\r\nexport const todolistsReducer = (state: Array<TodolistsTypeEntity> = initialState, action: ActionTypeTodolists): Array<TodolistsTypeEntity> => {\r\n\r\n    switch (action.type) {\r\n        case 'TODO/REMOVE-TODOLIST':\r\n            return state.filter(todo => todo.id !== action.id)\r\n\r\n        case 'TODO/ADD-TODOLIST':\r\n            return [{...action.todolist, filter: \"all\", entityStatus: \"idle\"}, ...state]\r\n\r\n        case 'TODO/CHANGE-TODOLIST-TITLE':\r\n            return state.map(todo => todo.id === action.id ? {...todo, title: action.title} : todo)\r\n\r\n        case'TODO/CHANGE-TODOLIST-FILTER':\r\n            return state.map(todo => todo.id === action.id ? {...todo, filter: action.filter} : todo)\r\n\r\n        case'TODO/CHANGE-TODOLIST-ENTITY-STATUS':\r\n            return state.map(todo => todo.id === action.id ? {...todo, entityStatus: action.entityStatus} : todo)\r\n\r\n        case\"TODO/SET-TODO\":\r\n            return action.todos.map(todo => {\r\n                return {...todo, filter: \"all\", entityStatus: \"idle\"}\r\n            })\r\n\r\n        default:\r\n            return state\r\n    }\r\n};\r\n\r\nexport const removeTodolistAC = (id: string) => ({\r\n    type: 'TODO/REMOVE-TODOLIST',\r\n    id\r\n}) as const\r\n\r\nexport const addTodolistAC = (todolist: TodolistsType) => ({\r\n    type: 'TODO/ADD-TODOLIST',\r\n    todolist\r\n}) as const\r\n\r\nexport const changeTitleTodoAC = (id: string, newTodolistTitle: string) => ({\r\n    type: 'TODO/CHANGE-TODOLIST-TITLE',\r\n    id,\r\n    title: newTodolistTitle\r\n}) as const\r\n\r\nexport const changeFilterTodoAC = (filter: filterType, id: string) => ({\r\n    type: 'TODO/CHANGE-TODOLIST-FILTER',\r\n    id,\r\n    filter\r\n}) as const\r\n\r\nexport const changeEntityStatusTodoAC = (entityStatus: EntityStatusType, id: string) => ({\r\n    type: 'TODO/CHANGE-TODOLIST-ENTITY-STATUS',\r\n    id,\r\n    entityStatus\r\n}) as const\r\n\r\n\r\nexport const setTodosAC = (todosArray: Array<TodolistsType>) => ({\r\n    type: \"TODO/SET-TODO\",\r\n    todos: todosArray\r\n}) as const\r\n\r\n\r\nexport enum ServerResponseResultCode {\r\n    success = 0,\r\n    error = 1,\r\n    captcha = 10\r\n}\r\n\r\nexport const setTodoTÐ¡ = (): AppThunk => async dispatch => {\r\n    dispatch(setAppStatusAC(\"loading\"))\r\n    try {\r\n        const res = await todolistApi.getTodolists()\r\n        dispatch(setTodosAC(res.data))\r\n    } catch (e: any) {\r\n        handleServerNetworkError(e, dispatch)\r\n    } finally {\r\n        dispatch(setAppStatusAC(\"success\"))\r\n    }\r\n}\r\n\r\nexport const removeTodoTÐ¡ = (todolistId: string): AppThunk => async dispatch => {\r\n    dispatch(setAppStatusAC(\"loading\"))\r\n    dispatch(changeEntityStatusTodoAC(\"loading\", todolistId))\r\n    try {\r\n        await todolistApi.deleteTodolist(todolistId)\r\n        dispatch(removeTodolistAC(todolistId))\r\n    } catch (e: any) {\r\n        handleServerNetworkError(e, dispatch)\r\n    } finally {\r\n        dispatch(setAppStatusAC(\"success\"))\r\n    }\r\n}\r\n\r\nexport const addTodoTÐ¡ = (title: string): AppThunk => async dispatch => {\r\n    dispatch(setAppStatusAC(\"loading\"))\r\n    try {\r\n        const res = await todolistApi.createTodolist(title)\r\n        dispatch(addTodolistAC(res.data.data.item))\r\n    } catch (e: any) {\r\n        handleServerNetworkError(e, dispatch)\r\n    } finally {\r\n        dispatch(setAppStatusAC(\"success\"))\r\n    }\r\n}\r\n\r\nexport const changeTodoTÐ¡ = (todolistId: string, title: string): AppThunk => async dispatch => {\r\n    dispatch(setAppStatusAC(\"loading\"))\r\n    try {\r\n        await todolistApi.updateTodolistTitle({todolistId, title})\r\n        dispatch(changeTitleTodoAC(todolistId, title))\r\n    } catch (e: any) {\r\n        handleServerNetworkError(e, dispatch)\r\n    } finally {\r\n        dispatch(setAppStatusAC(\"success\"))\r\n    }\r\n}\r\n","export type StatusType = \"idle\" | \"success\" | \"loading\" | \"failed\"\r\nexport type AppActionType = ReturnType<typeof setAppStatusAC> | ReturnType<typeof setAppErrorAC>\r\n\r\nconst initialstate = {\r\n    status: \"idle\" as StatusType,\r\n    error: null as string|null,\r\n}\r\n\r\nexport type InitialAppStateType = typeof initialstate\r\n\r\nexport const appReducer = (state: InitialAppStateType = initialstate, action: AppActionType): InitialAppStateType => {\r\n\r\n    switch (action.type) {\r\n        case \"APP/SET-APP-STATUS\":\r\n            return {...state, status: action.status}\r\n        case \"APP/SET-APP-ERROR\":\r\n            return {...state, error: action.error}\r\n        default:\r\n            return state\r\n    }\r\n\r\n\r\n}\r\n\r\nexport const setAppStatusAC = (status: StatusType) => ({\r\n    type: \"APP/SET-APP-STATUS\",\r\n    status\r\n}) as const\r\n\r\nexport const setAppErrorAC = (error: string|null) => ({\r\n    type: \"APP/SET-APP-ERROR\",\r\n    error\r\n}) as const","import {setAppErrorAC} from \"../app/app-reducer\";\r\nimport {Dispatch} from \"redux\";\r\n\r\n\r\nexport const handleServerNetworkError = (e:any,dispatch:Dispatch)=> {\r\n    if (e.name === \"SyntaxError\") {\r\n       return dispatch(setAppErrorAC(e.message))\r\n    }\r\n    if (e.message === 'Network Error') {\r\n        return dispatch(setAppErrorAC(\"no connection!\"))\r\n    } else {\r\n        return dispatch(setAppErrorAC(\"something error\"))\r\n    }\r\n}\r\n","import {Button, TextField} from '@material-ui/core';\r\nimport React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\n\r\n\r\nexport type AdditemformPropsType = {\r\n    callback: (title: string) => void\r\n    disabled?:boolean\r\n}\r\n\r\nexport const AddItemForm:React.FC<AdditemformPropsType> =React.memo( ({callback,disabled}) => {\r\n\r\n    const [title, setTitle] = useState(\"\")\r\n    const [error, setError] = useState<string | null>(null)\r\n\r\n    const inputHandlerCnange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onEnterHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if(error!==null){\r\n            setError(null)\r\n        }\r\n        if (e.charCode === 13) {\r\n            addTask()\r\n        }\r\n    }\r\n\r\n\r\n    const addTask = () => {\r\n        if (title.trim() !== \"\") {\r\n            callback(title.trim())\r\n            setTitle(\"\")\r\n        } else {\r\n            setError(\"title is required\")\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n\r\n        <div>\r\n            <TextField variant={\"outlined\"} value={title} onChange={inputHandlerCnange} onKeyPress={onEnterHandler}\r\n                       label={\"Type value\"} error={!!error} helperText={error} disabled={disabled}/>\r\n            <Button onClick={addTask} variant={\"contained\"} color={\"primary\"}\r\n                    style={{backgroundColor: \"#ffca28\", fontSize: \"10px\", padding: \"18px 0px 18px 0px\"}} disabled={disabled}>+</Button>\r\n\r\n        </div>\r\n\r\n    );\r\n});\r\n\r\n\r\n\r\n","import {PriorytiesTask, taskApi, TasksStatuses, TasksType, UpdateTask} from \"../../API/todolistAPI\";\r\nimport {AppRootType, AppThunk} from \"../../app/store\";\r\nimport {TypeForTasksAction} from \"./todolist-reducer\";\r\nimport {setAppStatusAC} from \"../../app/app-reducer\";\r\nimport {handleServerNetworkError} from \"../../utils/error-utils\";\r\n\r\n\r\nexport type ActionTypeTasks =\r\n    ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof changedTaskAC>\r\n    | ReturnType<typeof setTaskAC>\r\n    | TypeForTasksAction\r\n\r\nexport type TaskStateType = {\r\n    [key: string]: Array<TasksType>\r\n}\r\n\r\nconst initialState: TaskStateType = {}\r\n\r\n\r\nexport const tasksReducer = (state: TaskStateType = initialState, action: ActionTypeTasks): TaskStateType => {\r\n\r\n    switch (action.type) {\r\n        case \"TODO/SET-TODO\":\r\n            let copyState = {...state}\r\n            action.todos.forEach((t) => {\r\n                copyState[t.id] = []\r\n            })\r\n            return copyState\r\n        case 'TASK/REMOVE-TASK':\r\n            return {...state, [action.todolistId]: state[action.todolistId].filter(t => t.id !== action.id)}\r\n\r\n        case 'TASK/ADD-TASK':\r\n            return {...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]}\r\n\r\n        case 'TASK/CHANGE-TASK':\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId].map(t => t.id === action.taskid ? {...t, ...action.model} : t)\r\n            }\r\n\r\n        case 'TODO/ADD-TODOLIST':\r\n            return {...state, [action.todolist.id]: []}\r\n\r\n        case 'TODO/REMOVE-TODOLIST': {\r\n            const stateCopy = {...state}\r\n            delete stateCopy[action.id]\r\n            return stateCopy\r\n        }\r\n        case \"TASK/SET-TASKS\":\r\n            return {...state, [action.todolistId]: action.tasks}\r\n\r\n\r\n        default:\r\n            return state\r\n    }\r\n};\r\n\r\nexport const removeTaskAC = (todolistId: string, id: string) => ({\r\n    type: 'TASK/REMOVE-TASK',\r\n    id,\r\n    todolistId,\r\n}) as const\r\n\r\nexport const addTaskAC = (task: TasksType) => ({\r\n    type: 'TASK/ADD-TASK',\r\n    task\r\n}) as const\r\n\r\nexport const changedTaskAC = (taskid: string, model: UpdateTaskForThunk, todolistId: string) => ({\r\n    type: 'TASK/CHANGE-TASK',\r\n    model,\r\n    taskid,\r\n    todolistId,\r\n}) as const\r\n\r\n\r\nexport const setTaskAC = (tasksArray: Array<TasksType>, todolistId: string) => ({\r\n    type: \"TASK/SET-TASKS\",\r\n    tasks: tasksArray,\r\n    todolistId\r\n}) as const\r\n\r\n\r\nexport const setTasksTC = (todolistId: string): AppThunk => async dispatch => {\r\n    dispatch(setAppStatusAC(\"loading\"))\r\n    try {\r\n        const res = await taskApi.getTask(todolistId)\r\n        dispatch(setTaskAC(res.data.items, todolistId))\r\n    } catch (e: any) {\r\n        handleServerNetworkError(e, dispatch)\r\n    } finally {\r\n        dispatch(setAppStatusAC(\"success\"))\r\n    }\r\n\r\n}\r\n\r\nexport const deleteTasksTC = (todolistId: string, taskid: string): AppThunk => async dispatch => {\r\n    dispatch(setAppStatusAC(\"loading\"))\r\n    try {\r\n        await taskApi.deleteTask(todolistId, taskid)\r\n        dispatch(removeTaskAC(todolistId, taskid))\r\n    } catch (e: any) {\r\n        handleServerNetworkError(e, dispatch)\r\n    } finally {\r\n        dispatch(setAppStatusAC(\"success\"))\r\n    }\r\n\r\n\r\n}\r\n\r\nexport const addTasksTC = (title: string, todolistId: string): AppThunk => async dispatch => {\r\n    dispatch(setAppStatusAC(\"loading\"))\r\n    try {\r\n        const res = await taskApi.createTask(title, todolistId)\r\n        dispatch(addTaskAC(res.data.data.item))\r\n    } catch (e: any) {\r\n        handleServerNetworkError(e, dispatch)\r\n    } finally {\r\n        dispatch(setAppStatusAC(\"success\"))\r\n    }\r\n\r\n\r\n}\r\n\r\nexport type UpdateTaskForThunk = {\r\n    title?: string\r\n    description?: string\r\n    status?: TasksStatuses\r\n    priority?: PriorytiesTask\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport const updateTasksTC = (taskId: string, todolistId: string, model: UpdateTaskForThunk): AppThunk =>\r\n    async (dispatch\r\n        , getState: () => AppRootType) => {\r\n        dispatch(setAppStatusAC(\"loading\"))\r\n        const tasks = getState().tasks[todolistId]\r\n        const currentTask = tasks.find(t => {\r\n            return t.id === taskId\r\n        })\r\n        if (currentTask) {\r\n            const apiModel: UpdateTask = {\r\n                title: currentTask.title,\r\n                status: currentTask.status,\r\n                description: currentTask.description,\r\n                priority: currentTask.priority,\r\n                startDate: currentTask.startDate,\r\n                deadline: currentTask.deadline,\r\n                ...model\r\n            }\r\n            try {\r\n                await taskApi.updateTask(apiModel, todolistId, taskId)\r\n                dispatch(changedTaskAC(taskId, model, todolistId))\r\n\r\n            } catch (e: any) {\r\n                handleServerNetworkError(e, dispatch)\r\n            } finally {\r\n                dispatch(setAppStatusAC(\"success\"))\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n","import React, {ChangeEvent, useState} from \"react\";\r\nimport {Input} from \"@material-ui/core\";\r\n\r\nexport type EditablespanType = {\r\n    title: string\r\n    onChange:(Newvalue:string)=>void\r\n    disabled?:boolean\r\n}\r\n\r\nexport const EditableSpan:React.FC< EditablespanType>=React.memo(({title,onChange,disabled})=> {\r\n\r\n    let [editmode, seteditmode] = useState(false)\r\n    let [titleString, setTitleString] = useState(\"\")\r\n\r\n    const activaiteEditMode = () => {seteditmode(true);setTitleString(title)}\r\n    const activaiteViewMode = () => {seteditmode(false);onChange(titleString)}\r\n    const onChangeHandler = (e:ChangeEvent<HTMLInputElement>) => {\r\n        setTitleString(e.currentTarget.value)\r\n    }\r\n    return (\r\n        editmode ? <Input value={titleString} onChange={onChangeHandler} disabled={disabled} onBlur={activaiteViewMode} autoFocus/>\r\n            : <span onDoubleClick={activaiteEditMode} >{title}</span>\r\n    )\r\n\r\n})","import React, {ChangeEvent, useCallback} from \"react\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {\r\n    deleteTasksTC, updateTasksTC\r\n} from \"../../tasks-reducer\";\r\nimport {Checkbox, IconButton} from \"@material-ui/core\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport {EditableSpan} from \"../../../../components/EditableSpan/EditableSpan\";\r\nimport {TasksStatuses, TasksType} from \"../../../../API/todolistAPI\";\r\n\r\n\r\ntype TaskPropsType = {\r\n    task: TasksType\r\n    todoId: string\r\n}\r\n\r\nexport const Task: React.FC<TaskPropsType> = React.memo(({task, todoId}) => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const deletedTask = useCallback(() => {\r\n        dispatch(deleteTasksTC( todoId,task.id,))\r\n    }, [dispatch, todoId,task.id])\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        dispatch(updateTasksTC(task.id,todoId, {status:e.currentTarget.checked ? TasksStatuses.Completed:TasksStatuses.New}))\r\n    }, [dispatch, task.id, todoId])\r\n\r\n    const onChangeStatusHendler = useCallback((Newvalue: string) => {\r\n        dispatch(updateTasksTC(task.id,todoId, {title:Newvalue}))\r\n    }, [dispatch, task.id, todoId])\r\n\r\n    return <li style={{listStyleType: \"none\"}} className={task.status=== TasksStatuses.Completed? \"is-done\" : \"\"}>\r\n        <Checkbox\r\n            checked={task.status===TasksStatuses.Completed} onChange={onChangeHandler}\r\n            color=\"default\"\r\n            inputProps={{'aria-label': 'checkbox with default color'}}\r\n        />\r\n        <IconButton aria-label=\"delete\" color=\"default\" onClick={deletedTask}>\r\n            <DeleteIcon/>\r\n        </IconButton>\r\n        <EditableSpan title={task.title} onChange={onChangeStatusHendler}/>\r\n    </li>\r\n})","import React, {useCallback, useEffect} from \"react\";\r\nimport {Box, Button, IconButton} from \"@material-ui/core\";\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport {addTasksTC, setTasksTC} from \"../tasks-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootType} from \"../../../app/store\";\r\nimport {Task} from \"./Task/Task\";\r\nimport {EditableSpan} from \"../../../components/EditableSpan/EditableSpan\";\r\nimport {AddItemForm} from \"../../../components/AddItemForm/AddItemForm\";\r\nimport {TasksStatuses, TasksType} from \"../../../API/todolistAPI\";\r\nimport {filterType, TodolistsTypeEntity} from \"../todolist-reducer\";\r\n\r\n\r\nexport type TodolistType = {\r\n    todo: TodolistsTypeEntity\r\n    TodoChanged: (value: filterType, todolistid: string) => void\r\n    removeTodo: (todolistid: string) => void\r\n    titleTodoStatus: (todolistid: string, Newvalue: string) => void\r\n    demo?: boolean\r\n}\r\n\r\n\r\nexport const Todolist: React.FC<TodolistType> = React.memo(({todo, TodoChanged, removeTodo, titleTodoStatus, demo}) => {\r\n\r\n    useEffect(() => {\r\n        if (demo) {\r\n            return\r\n        }\r\n        dispatch(setTasksTC(todo.id))\r\n    }, [])\r\n\r\n    const tasks = useSelector<AppRootType, Array<TasksType>>(state => state.tasks[todo.id])\r\n    const dispatch = useDispatch()\r\n\r\n    const onButtonFilterClick1 = useCallback(() => {\r\n        TodoChanged(\"all\", todo.id)\r\n    }, [TodoChanged, todo.id])\r\n    const onButtonFilterClick2 = useCallback(() => {\r\n        TodoChanged(\"active\", todo.id)\r\n    }, [TodoChanged, todo.id])\r\n    const onButtonFilterClick3 = useCallback(() => {\r\n        TodoChanged(\"completed\", todo.id)\r\n    }, [TodoChanged, todo.id])\r\n\r\n    const handlerTodoList = () => removeTodo(todo.id)\r\n\r\n    const onChangeTitleTodo = useCallback((Newvalue: string) => {\r\n        titleTodoStatus(todo.id, Newvalue)\r\n    }, [titleTodoStatus, todo.id])\r\n\r\n    let taskfortodolist = tasks\r\n\r\n    if (todo.filter === \"completed\") {\r\n        taskfortodolist = taskfortodolist.filter(el => el.status === TasksStatuses.Completed)\r\n    }\r\n    if (todo.filter === \"active\") {\r\n        taskfortodolist = taskfortodolist.filter(el => el.status === TasksStatuses.New)\r\n    }\r\n\r\n    return (\r\n        <Box boxShadow={10}\r\n             style={{padding: \"15px\", border: \"3px #ffca28 solid\", borderRadius: \"10px\", backgroundColor: \"white\"}}>\r\n            <h3>\r\n                <EditableSpan title={todo.title} onChange={onChangeTitleTodo} disabled={todo.entityStatus === \"loading\"}/>\r\n                <IconButton aria-label=\"delete\" color=\"default\" onClick={handlerTodoList}\r\n                            disabled={todo.entityStatus === \"loading\"}>\r\n                    <DeleteIcon/>\r\n                </IconButton>\r\n            </h3>\r\n            <AddItemForm disabled={todo.entityStatus === \"loading\"}\r\n                         callback={useCallback((title) => {\r\n                             dispatch(addTasksTC(title, todo.id))\r\n                         }, [dispatch, todo.id])}/>\r\n            <ul>\r\n                {taskfortodolist.map(el => {\r\n                        return <Task task={el} todoId={todo.id} key={el.id}/>\r\n                    }\r\n                )}\r\n            </ul>\r\n            <div>\r\n                <Button variant={todo.filter === \"all\" ? \"contained\" : \"text\"} style={{padding: \"2px\",}}\r\n                        onClick={onButtonFilterClick1}>all\r\n                </Button>\r\n                <Button variant={todo.filter === \"active\" ? \"contained\" : \"text\"} style={{padding: \"2px\"}}\r\n                        onClick={onButtonFilterClick2}>active\r\n                </Button>\r\n                <Button variant={todo.filter === \"completed\" ? \"contained\" : \"text\"} style={{padding: \"2px\"}}\r\n                        onClick={onButtonFilterClick3}>complited\r\n                </Button>\r\n            </div>\r\n        </Box>\r\n\r\n    )\r\n\r\n})\r\n\r\n\r\n\r\n","import React, {useCallback, useEffect} from \"react\";\r\nimport {\r\n    addTodoTÐ¡, changeFilterTodoAC,\r\n    changeTodoTÐ¡,\r\n    filterType,\r\n    removeTodoTÐ¡,\r\n    setTodoTÐ¡,\r\n    TodolistsTypeEntity\r\n} from \"./todolist-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootType} from \"../../app/store\";\r\nimport {Grid} from \"@material-ui/core\";\r\nimport {AddItemForm} from \"../../components/AddItemForm/AddItemForm\";\r\nimport {Todolist} from \"./Todolist/Todolist\";\r\nimport {Navigate} from \"react-router-dom\";\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodolistsList: React.FC<PropsType> = React.memo(({demo = false}) => {\r\n\r\n    const login = useSelector<AppRootType, boolean>(state => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (demo || !login) {\r\n            return\r\n        }\r\n        dispatch(setTodoTÐ¡())\r\n    }, [dispatch])\r\n\r\n    const todolists = useSelector<AppRootType, Array<TodolistsTypeEntity>>(state => state.todolists)\r\n\r\n    const removeTodo = useCallback((todolistid: string) => {\r\n        dispatch(removeTodoTÐ¡(todolistid))\r\n\r\n    }, [dispatch])\r\n    const titleTodoStatus = useCallback((todolistid: string, Newvalue: string) => {\r\n        dispatch(changeTodoTÐ¡(todolistid, Newvalue))\r\n    }, [dispatch])\r\n\r\n    const addTodo = useCallback((title: string) => {\r\n        dispatch(addTodoTÐ¡(title))\r\n    }, [dispatch])\r\n\r\n    const TodoChanged = useCallback((value: filterType, todolistid: string) => {\r\n        dispatch(changeFilterTodoAC(value, todolistid))\r\n    }, [dispatch])\r\n    if (!login) {\r\n        return <Navigate to={\"login\"}/>\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Grid container style={{padding: \"20px\"}}>\r\n                <AddItemForm callback={addTodo}/>\r\n            </Grid>\r\n            <Grid container spacing={3}>\r\n                {todolists.map(el => {\r\n                    return <Grid item key={el.id}>\r\n                        <Todolist todo={el}\r\n                                  TodoChanged={TodoChanged}\r\n                                  removeTodo={removeTodo}\r\n                                  titleTodoStatus={titleTodoStatus}\r\n                                  demo={demo}\r\n                        />\r\n                    </Grid>\r\n                })}</Grid>\r\n        </>\r\n    );\r\n});\r\n","import Box from '@material-ui/core/Box';\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\nimport * as React from 'react';\r\nimport {useEffect} from 'react';\r\n\r\n\r\n\r\nexport const LinearDeterminate=()=> {\r\n\r\n    const [progress, setProgress] = React.useState(0);\r\n\r\n    useEffect(() => {\r\n        const timer = setInterval(() => {\r\n            setProgress((oldProgress) => {\r\n                if (oldProgress === 100) {\r\n                    return 0;\r\n                }\r\n                const diff = Math.random() * 10;\r\n                return Math.min(oldProgress + diff, 100);\r\n            });\r\n        }, 300);\r\n\r\n        return () => {\r\n            clearInterval(timer);\r\n        };\r\n    }, []);\r\n\r\n    return (\r\n        <Box sx={{ width: '100%' }}>\r\n            <LinearProgress variant=\"determinate\" value={progress}  style={{backgroundColor:\"#80cbc4\"}}/>\r\n        </Box>\r\n    );\r\n}\r\n","import React from 'react'\r\nimport MuiAlert, {AlertProps} from '@mui/material/Alert';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootType} from \"../../app/store\";\r\nimport {setAppErrorAC} from \"../../app/app-reducer\";\r\n\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n    props, ref) {\r\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\nexport function ErrorSnackbar() {\r\n    const error = useSelector<AppRootType, string | null>(state => state.app.error)\r\n    const dispatch = useDispatch()\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        dispatch(setAppErrorAC(null));\r\n    };\r\n    console.log(error)\r\n    return (\r\n        <Snackbar open={error !== null} autoHideDuration={8000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\" sx={{width: '100%'}}>\r\n                {error}\r\n                {/*ð */}\r\n            </Alert>\r\n        </Snackbar>\r\n    );\r\n}\r\n","import {AppThunk} from \"../../app/store\";\r\nimport {setAppStatusAC} from \"../../app/app-reducer\";\r\nimport {authApi, LoginParamsType} from \"../../API/todolistAPI\";\r\nimport {handleServerNetworkError} from \"../../utils/error-utils\";\r\n\r\nconst initialstate = {\r\n    isLoggedIn: false,\r\n    isInitialized: false\r\n}\r\n\r\nexport type InitialAutchType = typeof initialstate\r\nexport type ActionTypeAuth = ReturnType<typeof setLoginAC> | ReturnType<typeof setInitializedAC>\r\n\r\nexport const authReducer = (state: InitialAutchType = initialstate, action: ActionTypeAuth): InitialAutchType => {\r\n\r\n    switch (action.type) {\r\n        case 'AUTH/SET-LOGIN':\r\n            return {...state, isLoggedIn: action.isLoggedIn}\r\n        case 'AUTH/SET-INITIALIZED':\r\n            return {...state, isInitialized: action.isInitialized}\r\n        default :\r\n            return state\r\n\r\n\r\n    }\r\n}\r\n\r\n\r\nexport const setLoginAC = (isLoggedIn: boolean) => ({\r\n    type: 'AUTH/SET-LOGIN',\r\n    isLoggedIn\r\n}) as const\r\n\r\nexport const setInitializedAC = (isInitialized: boolean) => ({\r\n    type: 'AUTH/SET-INITIALIZED',\r\n    isInitialized\r\n}) as const\r\n\r\nexport const setLoginTC = (data: LoginParamsType): AppThunk => async dispatch => {\r\n    dispatch(setAppStatusAC(\"loading\"))\r\n    try {\r\n        await authApi.createLogin(data)\r\n        dispatch(setLoginAC(true))\r\n    } catch (e: any) {\r\n        handleServerNetworkError(e, dispatch)\r\n    } finally {\r\n        dispatch(setAppStatusAC(\"success\"))\r\n    }\r\n}\r\n\r\nexport const deleteLoginTC = (): AppThunk => async dispatch => {\r\n    dispatch(setAppStatusAC(\"loading\"))\r\n    try {\r\n        await authApi.deleteLogin()\r\n        dispatch(setLoginAC(false))\r\n    } catch (e: any) {\r\n        handleServerNetworkError(e, dispatch)\r\n    } finally {\r\n        dispatch(setAppStatusAC(\"success\"))\r\n    }\r\n}\r\n\r\nexport const setAuthTC = (): AppThunk => async dispatch => {\r\n    try {\r\n        await authApi.authMe()\r\n        dispatch(setLoginAC(true))\r\n    } catch (e: any) {\r\n        handleServerNetworkError(e, dispatch)\r\n    } finally {\r\n        dispatch(setInitializedAC(true))\r\n    }\r\n}\r\n","import React from 'react'\r\nimport Grid from '@mui/material/Grid';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport FormGroup from '@mui/material/FormGroup';\r\nimport FormLabel from '@mui/material/FormLabel';\r\nimport TextField from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\nimport {Container} from '@mui/material';\r\nimport {SubmitHandler, useForm} from \"react-hook-form\";\r\nimport {setLoginTC} from \"./auth-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootType} from \"../../app/store\";\r\nimport {Navigate} from \"react-router-dom\";\r\nimport {LoginParamsType} from \"../../API/todolistAPI\";\r\n\r\nexport type DataType = {\r\n    [x: string]: any\r\n}\r\n\r\n\r\nexport const Login = () => {\r\n\r\n    const login = useSelector<AppRootType, boolean>(state => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n\r\n    const {register, formState: {errors, isValid}, handleSubmit, reset} = useForm<LoginParamsType>({mode: \"onBlur\"});\r\n    const onSubmit : SubmitHandler<LoginParamsType>= (data) => {////////////////////////////////////////////////////////typescript\r\n        dispatch(setLoginTC(data));\r\n        reset()\r\n    }\r\n    if (login) {\r\n        return <Navigate to={\"/\"}/>\r\n    }\r\n    return <Grid container justifyContent={'center'}>\r\n        <Grid item justifyContent={'center'}>\r\n            <FormControl>\r\n                <FormLabel>\r\n                    <p>To log in get registered\r\n                        <a href={'https://social-network.samuraijs.com/'}\r\n                           target={'_blank'}> here\r\n                        </a>\r\n                    </p>\r\n                    <p>or use common test account credentials:</p>\r\n                    <p>Email: free@samuraijs.com</p>\r\n                    <p>Password: free</p>\r\n                </FormLabel>\r\n                <form onSubmit={handleSubmit(onSubmit)}>\r\n                    <FormGroup>\r\n\r\n                        <TextField label=\"Email\" margin=\"normal\" size={'small'}\r\n                                   color={errors?.email?.message ? 'error' : 'info'}\r\n                                   {...register(\"email\", {\r\n                                       required: \"required email\",\r\n                                       minLength: {\r\n                                           value: 5,\r\n                                           message: \"min length 5\"\r\n                                       }, pattern: /^\\w+([-+.']\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*$/\r\n                                   })}/>\r\n\r\n                        <Container style={{height: 30, color: \"#be0404\", fontWeight: \"bold\"}}>\r\n                            {errors?.email && (errors?.email?.message || \"field email is filled incorrectly\")}</Container>\r\n\r\n\r\n\r\n                        <TextField type=\"password\" label=\"Password\" size={'small'}\r\n                                   margin=\"normal\" color={errors?.password?.message ? 'error' : 'info'}\r\n                                   {...register(\"password\", {\r\n                                       required: \"required password\",\r\n                                       minLength: {\r\n                                           value: 5,\r\n                                           message: \"min length 5\"\r\n                                       }\r\n                                   })}/>\r\n                        <Container style={{height: 30, color: \"#be0404\", fontWeight: \"bold\"}}>\r\n                            {errors?.password?.message}</Container>\r\n\r\n                        <FormControlLabel label={'Remember me'} control={<Checkbox/>} {...register(\"rememberMe\")}/>\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'} disabled={!isValid}>\r\n                            Login\r\n                        </Button>\r\n                    </FormGroup>\r\n                </form>\r\n            </FormControl>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n\r\n","import React from \"react\";\r\n\r\n\r\nexport const ErrorRouter404: React.FC = React.memo(() => {\r\n\r\n    return (\r\n       <div>\r\n           Error404\r\n       </div>\r\n    )\r\n\r\n})\r\n","import React, {useCallback, useEffect} from 'react';\nimport './App.css';\n\nimport MenuIcon from '@material-ui/icons/Menu'\nimport {TasksType} from \"../API/todolistAPI\";\nimport {TodolistsList} from \"../features/TodolistsList/TodolistsList\";\nimport {LinearDeterminate} from \"../components/LinearProgress/LinearProgress\";\nimport Box from '@material-ui/core/Box';\nimport AppBar from '@material-ui/core/AppBar';\nimport IconButton from '@material-ui/core/IconButton';\nimport Typography from '@material-ui/core/Typography';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Button from '@material-ui/core/Button';\nimport Container from '@material-ui/core/Container';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootType} from \"./store\";\nimport {StatusType} from \"./app-reducer\";\nimport {ErrorSnackbar} from \"../components/ErrorSnackBar/SnackBar\";\nimport {Login} from \"../features/Login/Login\";\nimport {Routes, Route, Navigate} from \"react-router-dom\";\nimport {ErrorRouter404} from \"../features/404/ErrorRouter404\";\nimport {deleteLoginTC, setAuthTC} from \"../features/Login/auth-reducer\";\nimport {CircularProgress} from '@mui/material';\n\ntype PropsType = {\n    demo?: boolean\n}\n\nexport type TaskStateType = {\n    [key: string]: Array<TasksType>\n}\n\nexport const App: React.FC<PropsType> = ({demo = false}) => {\n\n    const dispatch = useDispatch()\n\n    useEffect(() => {\n        dispatch(setAuthTC())\n    }, [dispatch])\n\n    const status = useSelector<AppRootType, StatusType>(state => state.app.status)\n    const login = useSelector<AppRootType, boolean>(state => state.auth.isLoggedIn)\n    const isInitialized = useSelector<AppRootType, boolean>(state => state.auth.isInitialized)\n\n    const logOut =  useCallback(() => {\n        dispatch(deleteLoginTC())\n    },[dispatch])\n\n    if (!isInitialized) {\n        return <Container\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\n            <CircularProgress size={120} style={{color: \"#ffca28\"}}/>\n        </Container>\n    }\n\n\n    return (\n        <Box>\n            <Box style={{height: \"4px\"}}>\n                {status === \"loading\" && <LinearDeterminate/>}\n            </Box>\n            <AppBar position=\"static\" style={{backgroundColor: \"#ffca28\", padding: \"20px\"}}>\n                <Toolbar>\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\n                        <MenuIcon/>\n                    </IconButton>\n                    <Typography variant=\"h2\" style={{margin: \"0px 40px 0px 40px\"}}>\n                        Todolist\n                    </Typography>\n                    {login && <Button color=\"inherit\" onClick={logOut}>Log out</Button>}\n                </Toolbar>\n            </AppBar>\n            <Container style={{marginTop: \"20px\"}}>\n                <Routes>\n                    <Route path=\"/\" element={<TodolistsList demo={demo}/>}/>\n                    <Route path=\"login\" element={<Login/>}/>\n                    <Route path=\"404\" element={<ErrorRouter404/>}/>\n                    <Route path=\"*\" element={<Navigate to={\"404\"}/>}/>\n                </Routes>\n            </Container>\n            <ErrorSnackbar/>\n        </Box>)\n}\n\n\nexport default App;\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport {ActionTypeTodolists, todolistsReducer} from \"../features/TodolistsList/todolist-reducer\";\r\nimport {ActionTypeTasks, tasksReducer} from \"../features/TodolistsList/tasks-reducer\";\r\nimport thunk, {ThunkAction} from \"redux-thunk\";\r\nimport {AppActionType, appReducer} from \"./app-reducer\";\r\nimport {ActionTypeAuth, authReducer} from \"../features/Login/auth-reducer\";\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    todolists: todolistsReducer,\r\n    tasks: tasksReducer,\r\n    app:appReducer,\r\n    auth:authReducer\r\n})\r\nexport type AppRootType = ReturnType<typeof rootReducer>\r\n\r\nexport const store = createStore(rootReducer,applyMiddleware(thunk))\r\n\r\nexport type AppRootActionType=ActionTypeTasks|ActionTypeTodolists|AppActionType|ActionTypeAuth\r\n\r\nexport type AppThunk<ReturnType=void>=ThunkAction<ReturnType, AppRootType, unknown, AppRootActionType>\r\n// @ts-ignore\r\nwindow.store = store\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport {App} from \"./app/App\";\nimport {Provider} from \"react-redux\";\nimport {store} from \"./app/store\";\nimport {BrowserRouter} from \"react-router-dom\";\n\nReactDOM.render(\n    <Provider store={store}>\n        <BrowserRouter basename={'Todolist'}>\n            <App/>\n        </BrowserRouter>\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}