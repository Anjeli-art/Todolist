{"version":3,"sources":["API/todolistAPI.ts","reportWebVitals.ts","Redux/tasks-reducer.ts","Component/EditableSpan.tsx","Component/Task.tsx","Component/AddItemForm.tsx","Component/Todolist.tsx","Redux/todolist-reducer.ts","AppWithRedux.tsx","Redux/store.tsx","index.tsx"],"names":["TasksStatuses","PriorytiesTask","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","instance","axios","create","baseURL","withCredentials","headers","todolistApi","get","initialState","EditableSpan","React","memo","title","onChange","useState","editmode","seteditmode","titleString","setTitleString","Input","value","e","currentTarget","onBlur","autoFocus","onDoubleClick","Task","task","todoId","dispatch","useDispatch","deletedTask","useCallback","type","id","todolistId","onChangeHandler","taskid","status","checked","Completed","New","onChangeStatusHendler","Newvalue","style","listStyleType","className","Checkbox","color","inputProps","IconButton","onClick","AddItemForm","callback","setTitle","error","setError","addTask","trim","TextField","variant","onKeyPress","charCode","label","helperText","Button","backgroundColor","fontSize","padding","Todolist","props","tasks","useSelector","state","todolistid","onButtonFilterClick1","TodoChanged","onButtonFilterClick2","onButtonFilterClick3","onChangeTitleTodo","titleTodoStatus","taskfortodolist","filter","el","Box","boxShadow","border","borderRadius","removeTodo","newTaskTitle","map","v1","AppWithRedux","useEffect","res","todos","data","todolists","addTodo","AppBar","position","Toolbar","edge","Typography","margin","Container","marginTop","Grid","container","spacing","item","rootReducer","combineReducers","action","addedDate","order","newState","find","copyState","forEach","t","stateCopy","filteredTask","newTask","description","priority","Low","startDate","deadline","todoListId","newTasks","store","createStore","applyMiddleware","thunk","window","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8532b135.chunk.js","sourcesContent":["import axios, {AxiosResponse} from \"axios\";\r\n\r\n\r\nconst instance = axios.create({\r\n    baseURL: \"https://social-network.samuraijs.com/api/1.1\",\r\n    withCredentials: true,\r\n    headers: {\r\n        \"API-KEY\": \"7ccc0386-8558-4e56-b3f7-82cd09cd2d3e\"\r\n    }\r\n})\r\n\r\n\r\nexport type TodolistsType = {\r\n    id: string\r\n    addedDate: string\r\n    order: number\r\n    title: string\r\n}\r\n\r\ntype CommonResponseType<T = {}> = {\r\n    resultCode: number\r\n    messages: string[]\r\n    fieldsErrors: string[]\r\n    data: T\r\n}\r\n\r\nexport enum TasksStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n\r\n}\r\n\r\nexport enum PriorytiesTask{\r\n    Low=0,\r\n    Middle=1,\r\n    Hi=2,\r\n    Urgently=3,\r\n    later=4\r\n\r\n}\r\n\r\n\r\nexport type TasksType = {\r\n    description: string\r\n    title: string\r\n    status: TasksStatuses\r\n    priority: PriorytiesTask\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\ntype GetTasksResponse = {\r\n    items: TasksType[]\r\n    totalCount: number\r\n    error: string | null\r\n\r\n}\r\ntype UpdateTask = {\r\n    title: string\r\n    description: string\r\n    completed: boolean\r\n    status: TasksStatuses\r\n    priority: PriorytiesTask\r\n    startDate: string\r\n    deadline: string\r\n}\r\n\r\n\r\nexport const todolistApi = {\r\n    getTodolists() {\r\n        return instance.get<Array<TodolistsType>>(\"/todo-lists\")\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<CommonResponseType<{ item: TodolistsType }>,\r\n            AxiosResponse<CommonResponseType<{ item: TodolistsType }>>,\r\n            { title: string }>(\"/todo-lists\", {title})\r\n    }\r\n    ,\r\n    deleteTodolist(todolistId: string) {\r\n        return instance.delete<CommonResponseType>(`/todo-lists/${todolistId}`)\r\n    }\r\n    ,\r\n    updateTodolistTitle(params: { title: string, todolistId: string }) {\r\n        return instance.put<CommonResponseType,\r\n            AxiosResponse<CommonResponseType>,\r\n            { title: string }>(`/todo-lists/${params.todolistId}`, {title: params.title})\r\n    }\r\n}\r\n\r\nexport const taskApi = {\r\n    getTask(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`/todo-lists/${todolistId}/tasks`)\r\n    },\r\n    createTask(title: string, todolistId: string) {\r\n        return instance.post<CommonResponseType<TasksType>>(`/todo-lists/${todolistId}/tasks`, {title})\r\n    }\r\n    ,\r\n    deleteTask(todolistId: string, taskid: string) {\r\n        return instance.delete<CommonResponseType>(`/todo-lists/${todolistId}/tasks/${taskid}`)\r\n    }\r\n    ,\r\n    updateTask( model:UpdateTask, todolistId: string, taskid: string ) {\r\n        return instance.put<CommonResponseType>(`/todo-lists/${todolistId}/tasks/${taskid}`, model)\r\n    }\r\n}","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {v1} from \"uuid\";\r\nimport {ActionTypeAddTodolist, ActionTypeRemoveTodolist, ActionTypeSetTodos} from \"./todolist-reducer\";\r\nimport {PriorytiesTask, TasksStatuses, TasksType} from \"../API/todolistAPI\";\r\n\r\n\r\ntype ActionType = ActionTypeRemoveTaskAC\r\n    | ActionTypeAddTaskAC\r\n    | ActionTypeChangedTaskStatusAC\r\n    | ActionTypeChangedTaskTitleAC\r\n    | ActionTypeAddTodolist\r\n    | ActionTypeRemoveTodolist\r\n    | ActionTypeSetTodos\r\n\r\nexport type ActionTypeRemoveTaskAC = {\r\n    type: 'REMOVE-TASK'\r\n    id: string\r\n    todolistId: string\r\n}\r\nexport type ActionTypeAddTaskAC = {\r\n    type: 'ADD-TASK'\r\n    title: string\r\n    todolistId: string\r\n}\r\n\r\nexport type ActionTypeChangedTaskStatusAC = {\r\n    type: 'CHANGE-TASK-STATUS'\r\n    status: TasksStatuses\r\n    todolistId: string\r\n    taskid: string\r\n}\r\n\r\nexport type ActionTypeChangedTaskTitleAC = {\r\n    type: 'CHANGE-TASK-TITLE',\r\n    title: string,\r\n    taskid: string,\r\n    todolistId: string,\r\n}\r\nexport type TaskStateType = {\r\n    [key: string]: Array<TasksType>\r\n}\r\n\r\nconst initialState: TaskStateType = {}\r\n\r\nexport const tasksReducer = (state: TaskStateType = initialState, action: ActionType): TaskStateType => {\r\n\r\n    switch (action.type) {\r\n        case \"SET-TODO\":\r\n            let copyState={...state}\r\n            action.todos.forEach((t)=>{\r\n                copyState[t.id]=[]\r\n            })\r\n            return copyState\r\n        case 'REMOVE-TASK': {\r\n            const stateCopy = {...state}\r\n            const task = state[action.todolistId]\r\n            const filteredTask = task.filter(t => t.id !== action.id)\r\n            stateCopy[action.todolistId] = filteredTask\r\n            return stateCopy\r\n        }\r\n        case 'ADD-TASK': {\r\n            const stateCopy = {...state}\r\n            const newTask = {\r\n                description: \"\",\r\n                title: action.title,\r\n                status: TasksStatuses.New,\r\n                priority: PriorytiesTask.Low,\r\n                startDate: \"\",\r\n                deadline: \"\",\r\n                id: v1(),\r\n                todoListId: action.todolistId,\r\n                order: 0,\r\n                addedDate: \"\"\r\n            }\r\n            const tasks = stateCopy[action.todolistId]\r\n            const newTasks = [newTask, ...tasks]\r\n            stateCopy[action.todolistId] = newTasks\r\n            return stateCopy\r\n        }\r\n        case 'CHANGE-TASK-STATUS': {\r\n            const stateCopy = {...state}\r\n            const tasks = stateCopy[action.todolistId]\r\n            stateCopy[action.todolistId] = tasks.map(t => t.id === action.taskid ? {...t, status: action.status} : t)\r\n            return stateCopy\r\n        }\r\n        case 'CHANGE-TASK-TITLE': {\r\n            const stateCopy = {...state}\r\n            const tasks = stateCopy[action.todolistId]\r\n            stateCopy[action.todolistId] = tasks.map(t => t.id === action.taskid ? {...t, title: action.title} : t)\r\n            return stateCopy\r\n        }\r\n        case 'ADD-TODOLIST': {\r\n            const stateCopy = {...state}\r\n            stateCopy[action.todolistId] = []\r\n            return stateCopy\r\n        }\r\n        case 'REMOVE-TODOLIST': {\r\n            const stateCopy = {...state}\r\n            delete stateCopy[action.id]\r\n            return stateCopy\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n};\r\n\r\nexport const removeTaskAC = (taskid: string, todolistId: string): ActionTypeRemoveTaskAC => {\r\n    return {\r\n        type: 'REMOVE-TASK',\r\n        id: taskid,\r\n        todolistId: todolistId,\r\n    }\r\n}\r\nexport const addTaskAC = (newTaskTitle: string, todolistId: string): ActionTypeAddTaskAC => {\r\n    return {\r\n        type: 'ADD-TASK',\r\n        title: newTaskTitle,\r\n        todolistId: todolistId,\r\n    }\r\n}\r\nexport const changedTaskStatusAC = (taskid: string, status: TasksStatuses, todolistId: string): ActionTypeChangedTaskStatusAC => {\r\n    return {\r\n        type: 'CHANGE-TASK-STATUS',\r\n        status: status,\r\n        taskid: taskid,\r\n        todolistId: todolistId,\r\n    }\r\n}\r\nexport const changedTaskTitleAC = (taskid: string, newTitle: string, todolistId: string): ActionTypeChangedTaskTitleAC => {\r\n    return {\r\n        type: 'CHANGE-TASK-TITLE',\r\n        title: newTitle,\r\n        taskid: taskid,\r\n        todolistId: todolistId,\r\n    }\r\n}","import React, {ChangeEvent, useState} from \"react\";\r\nimport {Input} from \"@material-ui/core\";\r\n\r\nexport type EditablespanType = {\r\n    title: string\r\n    onChange:(Newvalue:string)=>void\r\n}\r\n\r\nexport const EditableSpan:React.FC< EditablespanType>=React.memo(({title,onChange})=> {\r\n\r\n    let [editmode, seteditmode] = useState(false)\r\n    let [titleString, setTitleString] = useState(\"\")\r\n\r\n    const activaiteEditMode = () => {seteditmode(true);setTitleString(title)}\r\n    const activaiteViewMode = () => {seteditmode(false);onChange(titleString)}\r\n    const onChangeHandler = (e:ChangeEvent<HTMLInputElement>) => {\r\n        setTitleString(e.currentTarget.value)\r\n    }\r\n    return (\r\n        editmode ? <Input value={titleString} onChange={onChangeHandler} onBlur={activaiteViewMode} autoFocus/>\r\n            : <span onDoubleClick={activaiteEditMode}>{title}</span>\r\n    )\r\n\r\n})","import React, {ChangeEvent, useCallback} from \"react\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {changedTaskStatusAC, changedTaskTitleAC, removeTaskAC} from \"../Redux/tasks-reducer\";\r\nimport {Checkbox, IconButton} from \"@material-ui/core\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport {TasksStatuses, TasksType} from \"../API/todolistAPI\";\r\n\r\n\r\ntype TaskPropsType = {\r\n    task: TasksType\r\n    todoId: string\r\n}\r\n\r\nexport const Task: React.FC<TaskPropsType> = React.memo(({task, todoId}) => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const deletedTask = useCallback(() => {\r\n        dispatch(removeTaskAC(task.id, todoId))\r\n    }, [dispatch, task.id, todoId])\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        dispatch(changedTaskStatusAC(task.id, e.currentTarget.checked ? TasksStatuses.Completed:TasksStatuses.New, todoId))\r\n    }, [dispatch, task.id, todoId])\r\n\r\n    const onChangeStatusHendler = useCallback((Newvalue: string) => {\r\n        dispatch(changedTaskTitleAC(task.id, Newvalue, todoId))\r\n    }, [dispatch, task.id, todoId])\r\n\r\n    return <li style={{listStyleType: \"none\"}} className={task.status=== TasksStatuses.Completed? \"is-done\" : \"\"}>\r\n        <Checkbox\r\n            checked={task.status===TasksStatuses.Completed} onChange={onChangeHandler}\r\n            color=\"default\"\r\n            inputProps={{'aria-label': 'checkbox with default color'}}\r\n        />\r\n        <IconButton aria-label=\"delete\" color=\"default\" onClick={deletedTask}>\r\n            <DeleteIcon/>\r\n        </IconButton>\r\n        <EditableSpan title={task.title} onChange={onChangeStatusHendler}/>\r\n    </li>\r\n})","import {Button, TextField} from '@material-ui/core';\r\nimport React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\n\r\n\r\nexport type AdditemformPropsType = {\r\n    callback: (title: string) => void\r\n}\r\n\r\nexport const AddItemForm:React.FC<AdditemformPropsType> =React.memo( ({callback}) => {\r\n\r\n    const [title, setTitle] = useState(\"\")\r\n    const [error, setError] = useState<string | null>(null)\r\n\r\n    const inputHandlerCnange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onEnterHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if(error!==null){\r\n            setError(null)\r\n        }\r\n        if (e.charCode === 13) {\r\n            addTask()\r\n        }\r\n    }\r\n\r\n\r\n    const addTask = () => {\r\n        if (title.trim() !== \"\") {\r\n            callback(title.trim())\r\n            setTitle(\"\")\r\n        } else {\r\n            setError(\"title is required\")\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n\r\n        <div>\r\n            <TextField variant={\"outlined\"} value={title} onChange={inputHandlerCnange} onKeyPress={onEnterHandler}\r\n                       label={\"Type value\"} error={!!error} helperText={error}/>\r\n            <Button onClick={addTask} variant={\"contained\"} color={\"primary\"}\r\n                    style={{backgroundColor: \"#ffca28\", fontSize: \"10px\", padding: \"18px 0px 18px 0px\"}}>+</Button>\r\n\r\n        </div>\r\n\r\n    );\r\n});\r\n\r\n\r\n\r\n","import React, { useCallback} from \"react\";\r\nimport {Box, Button, IconButton} from \"@material-ui/core\";\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport {addTaskAC} from \"../Redux/tasks-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootType} from \"../Redux/store\";\r\nimport {Task} from \"./Task\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {TasksStatuses, TasksType} from \"../API/todolistAPI\";\r\nimport {filterType} from \"../Redux/todolist-reducer\";\r\n\r\n\r\n\r\ntype TodolistType = {\r\n    title: string\r\n    TodoChanged: (value: filterType, todolistid: string) => void\r\n    filter: filterType\r\n    todolistid: string\r\n    removeTodo: (todolistid: string) => void\r\n    titleTodoStatus: (todolistid: string, Newvalue: string) => void\r\n}\r\n\r\n\r\nexport const Todolist:React.FC<TodolistType> = React.memo((props) => {\r\n\r\n    const tasks = useSelector<AppRootType, Array<TasksType>>(state => state.tasks[props.todolistid])\r\n    const dispatch = useDispatch()\r\n\r\n    const onButtonFilterClick1 = useCallback(() => {\r\n        props.TodoChanged(\"all\", props.todolistid)\r\n    }, [props.TodoChanged, props.todolistid])\r\n    const onButtonFilterClick2 = useCallback(() => {\r\n        props.TodoChanged(\"active\", props.todolistid)\r\n    }, [props.TodoChanged, props.todolistid])\r\n    const onButtonFilterClick3 = useCallback(() => {\r\n        props.TodoChanged(\"completed\", props.todolistid)\r\n    }, [props.TodoChanged, props.todolistid])\r\n\r\n    const handlerTodoList = () => props.removeTodo(props.todolistid)\r\n\r\n    const onChangeTitleTodo = useCallback((Newvalue: string) => {\r\n        props.titleTodoStatus(props.todolistid, Newvalue)\r\n    }, [props.titleTodoStatus, props.todolistid])\r\n\r\n    let taskfortodolist = tasks\r\n\r\n    if (props.filter === \"completed\") {\r\n        taskfortodolist = taskfortodolist.filter(el => el.status===TasksStatuses.Completed)\r\n    }\r\n    if (props.filter === \"active\") {\r\n        taskfortodolist = taskfortodolist.filter(el => el.status===TasksStatuses.New)\r\n    }\r\n    return (\r\n        <Box boxShadow={10}\r\n             style={{padding: \"15px\", border: \"3px #ffca28 solid\", borderRadius: \"10px\", backgroundColor: \"white\"}}>\r\n            <h3>\r\n                <EditableSpan title={props.title} onChange={onChangeTitleTodo}/>\r\n                <IconButton aria-label=\"delete\" color=\"default\" onClick={handlerTodoList}>\r\n                    <DeleteIcon/>\r\n                </IconButton>\r\n            </h3>\r\n            <AddItemForm\r\n                callback={useCallback((title) => {\r\n                    dispatch(addTaskAC(title, props.todolistid))\r\n                }, [dispatch, props.todolistid])}/>\r\n            <ul>\r\n                {taskfortodolist.map(el => {\r\n                        return <Task task={el} todoId={props.todolistid} key={el.id}/>\r\n                    }\r\n                )}\r\n            </ul>\r\n            <div>\r\n                <Button variant={props.filter === \"all\" ? \"contained\" : \"text\"} style={{padding: \"2px\",}}\r\n                        onClick={onButtonFilterClick1}>all\r\n                </Button>\r\n                <Button variant={props.filter === \"active\" ? \"contained\" : \"text\"} style={{padding: \"2px\"}}\r\n                        onClick={onButtonFilterClick2}>active\r\n                </Button>\r\n                <Button variant={props.filter === \"completed\" ? \"contained\" : \"text\"} style={{padding: \"2px\"}}\r\n                        onClick={onButtonFilterClick3}>complited\r\n                </Button>\r\n            </div>\r\n        </Box>\r\n\r\n    )\r\n\r\n})\r\n\r\n\r\n\r\n","import {v1} from \"uuid\";\r\nimport {todolistApi, TodolistsType} from \"../API/todolistAPI\";\r\nimport {Dispatch} from \"redux\";\r\n\r\n\r\ntype ActionType =\r\n    ActionTypeRemoveTodolist\r\n    | ActionTypeAddTodolist\r\n    | ActionTypeChangeTitle\r\n    | ActionTypeChangeFilter\r\n    | ActionTypeSetTodos\r\n\r\nexport type ActionTypeRemoveTodolist = {\r\n    type: 'REMOVE-TODOLIST'\r\n    id: string\r\n}\r\nexport type ActionTypeAddTodolist = {\r\n    type: 'ADD-TODOLIST'\r\n    title: string\r\n    todolistId: string\r\n}\r\nexport type ActionTypeChangeTitle = {\r\n    type: 'CHANGE-TODOLIST-TITLE'\r\n    id: string\r\n    title: string\r\n}\r\nexport type ActionTypeChangeFilter = {\r\n    type: 'CHANGE-TODOLIST-FILTER'\r\n    id: string\r\n    filter: filterType\r\n}\r\n\r\nexport type ActionTypeSetTodos = {\r\n    type: \"SET-TODO\",\r\n    todos: Array<TodolistsType>\r\n}\r\nexport const todolist1 = v1()\r\nexport const todolist2 = v1()\r\n\r\nexport type filterType = \"all\" | \"active\" | \"completed\"\r\nexport type TodolistsTypeEntity = TodolistsType & { filter:filterType }\r\n\r\nconst initialState: Array<TodolistsTypeEntity> = []\r\n\r\nexport const todolistsReducer = (state: Array<TodolistsTypeEntity> = initialState, action: ActionType): Array<TodolistsTypeEntity> => {\r\n\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST': {\r\n            return state.filter(el => el.id !== action.id)\r\n        }\r\n\r\n        case 'ADD-TODOLIST': {\r\n            return [{id: action.todolistId, title: action.title, filter: \"all\", addedDate: '', order: 0}, ...state]\r\n        }\r\n\r\n        case 'CHANGE-TODOLIST-TITLE': {\r\n            let newState = state.find(el => el.id === action.id)\r\n            if (newState) {\r\n                newState.title = action.title\r\n\r\n            }\r\n            return [...state]\r\n        }\r\n        case'CHANGE-TODOLIST-FILTER': {\r\n            let newState = state.find(el => el.id === action.id)\r\n            if (newState) {\r\n                newState.filter = action.filter\r\n\r\n            }\r\n            return [...state]\r\n        }\r\n\r\n        case\"SET-TODO\":\r\n            return action.todos.map(el=>{return{...el,filter:\"all\"}})\r\n        default:\r\n            return state\r\n    }\r\n};\r\n\r\nexport const removeTodolistAC = (todolistId: string): ActionTypeRemoveTodolist => {\r\n    return {\r\n        type: 'REMOVE-TODOLIST',\r\n        id: todolistId\r\n    }\r\n}\r\nexport const addTodolistAC = (newTodolistTitle: string): ActionTypeAddTodolist => {\r\n    return {\r\n        type: 'ADD-TODOLIST',\r\n        title: newTodolistTitle,\r\n        todolistId: v1()\r\n    }\r\n}\r\nexport const changeTitleTodoAC = (todolistId: string, newTodolistTitle: string): ActionTypeChangeTitle => {\r\n    return {\r\n        type: 'CHANGE-TODOLIST-TITLE',\r\n        id: todolistId,\r\n        title: newTodolistTitle\r\n    }\r\n}\r\nexport const changeFilterTodoAC = (filter: filterType, todolistId: string): ActionTypeChangeFilter => {\r\n    return {\r\n        type: 'CHANGE-TODOLIST-FILTER',\r\n        id: todolistId,\r\n        filter: filter\r\n    }\r\n}\r\n\r\nexport const setTodosAC = (todosArray: Array<TodolistsType>): ActionTypeSetTodos => {\r\n    return {\r\n        type: \"SET-TODO\",\r\n        todos: todosArray\r\n    }\r\n}\r\n\r\nexport const setTodoThunk=()=>(dispatch:Dispatch)=>{\r\n   todolistApi.getTodolists()\r\n       .then((res)=>{\r\n        dispatch(setTodosAC(res.data))})\r\n\r\n}","import React, {useCallback, useEffect} from 'react';\nimport './App.css';\nimport {Todolist} from \"./Component/Todolist\";\nimport {AddItemForm} from \"./Component/AddItemForm\";\nimport {AppBar, Box, Button, Container, Grid, IconButton, Toolbar, Typography} from \"@material-ui/core\";\nimport MenuIcon from '@material-ui/icons/Menu'\nimport {\n    addTodolistAC,\n    changeFilterTodoAC,\n    changeTitleTodoAC, filterType,\n    removeTodolistAC, setTodosAC, setTodoThunk, TodolistsTypeEntity,\n} from \"./Redux/todolist-reducer\";\n\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootType} from \"./Redux/store\";\nimport {TasksType, todolistApi} from \"./API/todolistAPI\";\n\n\n\n\nexport type TaskStateType = {\n    [key: string]: Array<TasksType>\n}\n\nexport const AppWithRedux: React.FC = () => {\n\n    useEffect(()=>{\n        dispatch(setTodoThunk())\n    },[])\n\n    const dispatch = useDispatch()\n    const todolists = useSelector<AppRootType, Array<TodolistsTypeEntity>>(state => state.todolists)\n\n\n    const removeTodo = useCallback((todolistid: string) => {\n        dispatch(removeTodolistAC(todolistid))\n\n    }, [dispatch])\n    const titleTodoStatus = useCallback((todolistid: string, Newvalue: string) => {\n        dispatch(changeTitleTodoAC(todolistid, Newvalue))\n    }, [dispatch])\n\n    const addTodo = useCallback((title: string) => {\n        dispatch(addTodolistAC(title))\n    }, [dispatch])\n\n    const TodoChanged = useCallback((value: filterType, todolistid: string) => {\n        dispatch(changeFilterTodoAC(value, todolistid))\n    }, [dispatch])\n\n    return (\n        <Box>\n            <AppBar position=\"static\" style={{backgroundColor: \"#ffca28\", padding: \"20px\"}}>\n                <Toolbar>\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\n                        <MenuIcon/>\n                    </IconButton>\n                    <Typography variant=\"h2\" style={{margin: \"0px 40px 0px 40px\"}}>\n                        Todolist\n                    </Typography>\n                    <Button color=\"inherit\">Login</Button>\n                </Toolbar>\n            </AppBar>\n            <Container style={{marginTop: \"20px\"}}>\n                <Grid container style={{padding: \"20px\"}}>\n                    <AddItemForm callback={addTodo}/>\n                </Grid>\n                <Grid container spacing={3}>\n                    {todolists.map(el => {\n                        return <Grid item key={el.id}>\n                            <Todolist title={el.title}\n                                      todolistid={el.id}\n                                      TodoChanged={TodoChanged}\n                                      filter={el.filter}\n                                      removeTodo={removeTodo}\n                                      titleTodoStatus={titleTodoStatus}\n                            />\n                        </Grid>\n                    })}</Grid>\n            </Container>\n        </Box>)\n}\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport {todolistsReducer} from \"./todolist-reducer\";\r\nimport {tasksReducer} from \"./tasks-reducer\";\r\nimport thunk from \"redux-thunk\";\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    todolists: todolistsReducer,\r\n    tasks: tasksReducer\r\n})\r\nexport type AppRootType = ReturnType<typeof rootReducer>\r\n\r\nexport const store = createStore(rootReducer,applyMiddleware(thunk))\r\n\r\n// @ts-ignore\r\nwindow.store = store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport {AppWithRedux} from \"./AppWithRedux\";\nimport {Provider} from \"react-redux\";\nimport {store} from \"./Redux/store\";\n\nReactDOM.render(\n    <Provider store={store}>\n        <AppWithRedux/>\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}