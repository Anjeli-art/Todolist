{"version":3,"sources":["Todolist.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Todolist","props","useState","title","setTitle","error","setError","addTask","trim","value","onChange","e","currentTarget","onKeyPress","charCode","className","onClick","tasks","map","el","isDone","type","checked","changeStatus","id","taskDelet","filter","taskChanged","App","v1","Settask","setFilter","taskfortodolist","idTask","newTasks","newTask","find","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.623145ac.chunk.js","sourcesContent":["import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {filterType} from \"./App\";\r\n\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\ntype TodolistType = {\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    taskDelet: (idTask: string) => void\r\n    taskChanged: (value: filterType) => void\r\n    changeStatus: (idTask: string, isDone: boolean) => void\r\n    addTask: (title: string) => void\r\n    filter: filterType\r\n}\r\n\r\nexport function Todolist(props: TodolistType) {\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n\r\n    const inputHandlerCnange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addTask = () => {\r\n        if (title.trim() !== \"\") {\r\n            props.addTask(title.trim())\r\n            setTitle(\"\")\r\n        } else {\r\n            setError(\"title is required\")\r\n        }\r\n    }\r\n\r\n    const onEnterHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        setError(null)\r\n        if (e.charCode === 13) {\r\n            addTask()\r\n        }\r\n    }\r\n\r\n    const onButtonFilterClick1 = () => {\r\n        props.taskChanged(\"all\")\r\n    }\r\n    const onButtonFilterClick2 = () => {\r\n        props.taskChanged(\"active\")\r\n    }\r\n    const onButtonFilterClick3 = () => {\r\n        props.taskChanged(\"complited\")\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h3>{props.title}</h3>\r\n            <div>\r\n                <input value={title} onChange={inputHandlerCnange} onKeyPress={onEnterHandler}\r\n                       className={error ? \"error\" : \"\"}/>\r\n                <button onClick={addTask}>+</button>\r\n                {error && <div className={\"error-message\"}>{error}</div>}\r\n            </div>\r\n            <ul>\r\n                {props.tasks.map(el => {\r\n                        const deletedTask = () => {\r\n                            props.taskDelet(el.id)\r\n                        }\r\n                        const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => props.changeStatus(el.id, e.currentTarget.checked)\r\n                        return <li key={el.id} className={el.isDone ? \"is-done\" : \"\"}>\r\n                            <input type=\"checkbox\"\r\n                                   checked={el.isDone}\r\n                                   onChange={onChangeHandler}/>\r\n                            <button onClick={deletedTask}>x</button>\r\n                            {el.title}</li>\r\n                    }\r\n                )}\r\n            </ul>\r\n            <div>\r\n                <button className={props.filter === \"all\" ? \"active-filter\" : \"\"} onClick={onButtonFilterClick1}>all\r\n                </button>\r\n                <button className={props.filter === \"active\" ? \"active-filter\" : \"\"}\r\n                        onClick={onButtonFilterClick2}>active\r\n                </button>\r\n                <button className={props.filter === \"complited\" ? \"active-filter\" : \"\"}\r\n                        onClick={onButtonFilterClick3}>complited\r\n                </button>\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n\r\n}","import React, {useState} from 'react';\nimport './App.css';\nimport {TaskType, Todolist} from \"./Todolist\";\nimport {v1} from \"uuid\";\n\n\nexport type filterType = \"all\" | \"active\" | \"complited\"\n\nfunction App() {\n    let [tasks, Settask] = useState<Array<TaskType>>([{id: v1(), title: \"html\", isDone: true},\n        {id: v1(), title: \"css\", isDone: true},\n        {id: v1(), title: \"js\", isDone: false},\n        {id: v1(), title: \"restAPI\", isDone: true},\n        {id: v1(), title: \"graphQL\", isDone: false}])\n\n\n    let taskDelet = (idTask: string) => {\n        const newTasks = tasks.filter(el => el.id !== idTask)\n        Settask(newTasks)\n    }\n\n    let [filter, setFilter] = useState<filterType>(\"all\")\n\n    let taskChanged = (value: filterType) => {\n        setFilter(value)\n    }\n\n    let taskfortodolist = tasks\n\n    if (filter === \"complited\") {\n        taskfortodolist = tasks.filter(el => el.isDone)\n    }\n    if (filter === \"active\") {\n        taskfortodolist = tasks.filter(el => !el.isDone)\n    }\n\n    let addTask = (title: string) => {\n        const newId = v1()\n        const newTasks = [{id: newId, title: title, isDone: false}, ...tasks]\n        Settask(newTasks)\n    }\n\n    let changeStatus = (idTask: string, isDone: boolean) => {\n        let newTask = tasks.find(el => el.id === idTask)\n        if (newTask) {\n            newTask.isDone = isDone\n        }\n        Settask([...tasks])\n    }\n\n\n    return (\n        <div className=\"App\">\n            <Todolist title={\"what to learn\"}\n                      tasks={taskfortodolist}\n                      taskDelet={taskDelet}\n                      taskChanged={taskChanged}\n                      addTask={addTask}\n                      changeStatus={changeStatus}\n                      filter={filter}\n            />\n        </div>\n\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}