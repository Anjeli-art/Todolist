{"version":3,"sources":["Additemform.tsx","Editablespan.tsx","Todolist.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Additemform","props","useState","title","setTitle","error","setError","addTask","trim","callback","value","onChange","e","currentTarget","onKeyPress","charCode","className","onClick","Editablespan","editmode","seteditmode","onBlur","autoFocus","onDoubleClick","Todolist","Newvalue","titleTodoStatus","todolistid","removeTodo","tasks","map","el","isDone","type","checked","changeStatus","id","removeTask","changeTaskTitle","filter","taskChanged","App","todolist1","v1","todolist2","todolist","setTodolist","Settask","idTask","todotasks","filtertodo","todolistNew","find","task","tasksobj","newTask","todo","taskfortodolist","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5144b812.chunk.js","sourcesContent":["import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\n\r\nexport type AdditemformPropsType = {\r\n    callback:(title: string)=>void\r\n}\r\n\r\nexport const Additemform = (props: AdditemformPropsType) => {\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n    const inputHandlerCnange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onEnterHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        setError(null)\r\n        if (e.charCode === 13) {\r\n            addTask()\r\n        }\r\n    }\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addTask = () => {\r\n        if (title.trim() !== \"\") {\r\n            debugger\r\n            props.callback(title.trim())\r\n            setTitle(\"\")\r\n        } else {\r\n            setError(\"title is required\")\r\n        }\r\n    }\r\n    return (\r\n\r\n        <div>\r\n            <input value={title} onChange={inputHandlerCnange} onKeyPress={onEnterHandler}\r\n                   className={error ? \"error\" : \"\"}/>\r\n            <button onClick={addTask}>+</button>\r\n            {error && <div className={\"error-message\"}>{error}</div>}\r\n        </div>\r\n\r\n    );\r\n};\r\n\r\n","import React, {ChangeEvent, useState} from \"react\";\r\n\r\nexport type EditablespanType = {\r\n    title: string\r\n    onChange:(Newvalue:string)=>void\r\n}\r\n\r\nexport function Editablespan(props: EditablespanType) {\r\n\r\n    let [editmode, seteditmode] = useState(false)\r\n    let [title, setTitle] = useState(\"\")\r\n\r\n    const activaiteEditMode = () => {seteditmode(true);setTitle(props.title)}\r\n    const activaiteViewMode = () => {seteditmode(false);props.onChange(title)}\r\n    const onChangeHandler = (e:ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n    return (\r\n        editmode ? <input value={title} onChange={onChangeHandler} onBlur={activaiteViewMode} autoFocus/>\r\n            : <span onDoubleClick={activaiteEditMode}>{props.title}</span>\r\n    )\r\n\r\n}","import React, {ChangeEvent} from \"react\";\r\nimport {filterType} from \"./App\";\r\nimport {Additemform} from \"./Additemform\";\r\nimport {Editablespan} from \"./Editablespan\";\r\n\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\ntype TodolistType = {\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    removeTask: (idTask: string, todolistid: string) => void\r\n    taskChanged: (value: filterType, todolistid: string) => void\r\n    changeStatus: (idTask: string, isDone: boolean, todolistid: string) => void\r\n    addTask: (title: string, todolistid: string) => void\r\n    filter: filterType\r\n    todolistid: string\r\n    removeTodo: (todolistid: string) => void\r\n    changeTaskTitle:(id:string,Newvalue:string ,todolistid:string)=>void\r\n    titleTodoStatus:(todolistid:string,Newvalue: string)=>void\r\n}\r\n\r\nexport function Todolist(props: TodolistType) {\r\n\r\n    const onButtonFilterClick1 = () => {\r\n        props.taskChanged(\"all\", props.todolistid)\r\n    }\r\n    const onButtonFilterClick2 = () => {\r\n        props.taskChanged(\"active\", props.todolistid)\r\n    }\r\n    const onButtonFilterClick3 = () => {\r\n        props.taskChanged(\"complited\", props.todolistid)\r\n    }\r\n    const handlerTodoList = () => props.removeTodo(props.todolistid)\r\n    const addTask = (title: string) => {\r\n        props.addTask(title, props.todolistid)\r\n    }\r\n\r\n    const onChangeTitleTodo=(Newvalue: string)=>{props.titleTodoStatus(props.todolistid,Newvalue)}\r\n    return (\r\n        <div className=\"todo\">\r\n            <h3>\r\n                <Editablespan title={props.title} onChange={onChangeTitleTodo}/>\r\n                <button onClick={handlerTodoList}>x</button>\r\n            </h3>\r\n            <Additemform callback={addTask}/>\r\n            <ul>\r\n                {props.tasks.map(el => {\r\n                        const deletedTask = () => {\r\n                            props.removeTask(el.id, props.todolistid)\r\n                        }\r\n                        const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => props.changeStatus(el.id, e.currentTarget.checked, props.todolistid)\r\n                        const onChangeStatusHendler = (Newvalue: string) => {props.changeTaskTitle(el.id,Newvalue , props.todolistid)}\r\n                        return <li key={el.id} className={el.isDone ? \"is-done\" : \"\"}>\r\n                            <input type=\"checkbox\" checked={el.isDone} onChange={onChangeHandler}/>\r\n                            <button onClick={deletedTask}>x</button>\r\n                            <Editablespan title={el.title} onChange={onChangeStatusHendler}/>\r\n                        </li>\r\n                    }\r\n                )}\r\n            </ul>\r\n            <div>\r\n                <button className={props.filter === \"all\" ? \"active-filter\" : \"\"} onClick={onButtonFilterClick1}>all\r\n                </button>\r\n                <button className={props.filter === \"active\" ? \"active-filter\" : \"\"}\r\n                        onClick={onButtonFilterClick2}>active\r\n                </button>\r\n                <button className={props.filter === \"complited\" ? \"active-filter\" : \"\"}\r\n                        onClick={onButtonFilterClick3}>complited\r\n                </button>\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n\r\n}\r\n\r\n","import React, {useState} from 'react';\nimport './App.css';\nimport {TaskType, Todolist} from \"./Todolist\";\nimport {v1} from \"uuid\";\nimport {Additemform} from \"./Additemform\";\n\n\nexport type filterType = \"all\" | \"active\" | \"complited\"\nexport type TodollistType = { id: string, title: string, filter: filterType }\nexport type TaskStateType = {\n    [key: string]: Array<TaskType>\n}\n\nfunction App() {\n    let todolist1 = v1()\n    let todolist2 = v1()\n\n    let [todolist, setTodolist] = useState<Array<TodollistType>>([\n        {id: todolist1, title: \"what to learn\", filter: \"all\"}, {\n            id: todolist2, title: \"what to bye\", filter: \"active\"\n        }])\n\n    let [tasks, Settask] = useState<TaskStateType>(\n        {\n            [todolist1]: [{id: v1(), title: \"html\", isDone: true},\n                {id: v1(), title: \"css\", isDone: true},\n                {id: v1(), title: \"js\", isDone: false},\n                {id: v1(), title: \"restAPI\", isDone: true},\n                {id: v1(), title: \"graphQL\", isDone: false}],\n\n            [todolist2]:\n                [{id: v1(), title: \"book\", isDone: true},\n                    {id: v1(), title: \"milk\", isDone: true},]\n        })\n\n\n    let removeTask = (idTask: string, todolistid: string) => {\n        let todotasks = tasks[todolistid]\n        tasks[todolistid] = todotasks.filter(el => el.id !== idTask)\n        Settask({...tasks})\n    }\n    let removeTodo = (todolistid: string) => {\n        let filtertodo = todolist.filter(el => el.id !== todolistid)\n        setTodolist(filtertodo)\n        delete tasks[todolistid]\n        Settask({...tasks})\n    }\n\n    let taskChanged = (value: filterType, todolistid: string) => {\n        let todolistNew = todolist.find(el => el.id === todolistid)\n        if (todolistNew) {\n            todolistNew.filter = value\n            setTodolist([...todolist])\n        }\n    }\n\n\n    let addTask = (title: string, todolistid: string) => {\n        const task = {id: v1(), title: title, isDone: false}\n        const tasksobj = tasks[todolistid]\n        tasks[todolistid] = [task, ...tasksobj]\n        Settask({...tasks})\n    }\n\n    let addTodo = (title: string) => {\n        const todo: TodollistType = {id: v1(), title: title, filter: \"all\"}\n        setTodolist([todo, ...todolist])\n        Settask({[todo.id]: [], ...tasks})\n    }\n\n    let changeStatus = (idTask: string, isDone: boolean, todolistid: string) => {\n        const tasksobj = tasks[todolistid]\n        let newTask = tasksobj.find(el => el.id === idTask)\n        if (newTask) {\n            newTask.isDone = isDone\n            Settask({...tasks})\n        }\n    }\n    let changeTaskTitle = (id: string, Newvalue: string, todolistid: string) => {\n        const tasksobj = tasks[todolistid]\n        let newTask = tasksobj.find(el => el.id === id)\n        if (newTask) {\n            newTask.title = Newvalue\n            Settask({...tasks})\n        }\n    }\n    const titleTodoStatus = (todolistid: string, Newvalue: string) => {\n        const todo = todolist.find(el=>el.id===todolistid)\n        if(todo){\n            todo.title=Newvalue\n        }\n        setTodolist([...todolist])\n    }\n\n    // let changeTaskTitle = (id: string, Newvalue:string, todolistid: string) => { //моя функция\n    //     const tasksobj = tasks[todolistid]\n    //     let newTask = tasksobj.map(el => el.id === id ? {...el,title:Newvalue}: el)\n    //     tasks[todolistid]=newTask\n    //     Settask({...tasks})\n    // }\n\n    // const titleTodoStatus = (todolistid: string, Newvalue: string) => {\n    //     const todo = todolist.map(el => el.id === todolistid ? {...el, title: Newvalue} : el)\n    //     setTodolist(todo)\n    // }\n\n    return (\n        <div className=\"App\">\n            <Additemform callback={addTodo}/>\n            {todolist.map(el => {\n                let taskfortodolist = tasks[el.id]\n\n                if (el.filter === \"complited\") {\n                    taskfortodolist = taskfortodolist.filter(el => el.isDone)\n                }\n                if (el.filter === \"active\") {\n                    taskfortodolist = taskfortodolist.filter(el => !el.isDone)\n                }\n                return <Todolist title={el.title}\n                                 key={el.id}\n                                 todolistid={el.id}\n                                 tasks={taskfortodolist}\n                                 removeTask={removeTask}\n                                 taskChanged={taskChanged}\n                                 addTask={addTask}\n                                 changeStatus={changeStatus}\n                                 filter={el.filter}\n                                 removeTodo={removeTodo}\n                                 changeTaskTitle={changeTaskTitle}\n                                 titleTodoStatus={titleTodoStatus}\n                />\n            })}\n        </div>)\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}