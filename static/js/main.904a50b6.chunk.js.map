{"version":3,"sources":["Todolist.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Todolist","props","useState","title","setTitle","addTask","value","onChange","e","currentTarget","onKeyPress","charCode","onClick","tasks","map","el","type","checked","isDone","taskDelet","id","taskChanged","App","v1","Settask","filter","setFilter","taskfortodolist","className","idTask","newTasks","changeStatus","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mNAmBO,SAASA,EAASC,GAAsB,IAAD,EAElBC,mBAAS,IAFS,mBAErCC,EAFqC,KAE9BC,EAF8B,KASpCC,EAAU,WACZJ,EAAMI,QAAQF,GACdC,EAAS,KAmBb,OACI,gCACI,6BAAKH,EAAME,QACX,gCACI,uBAAOG,MAAOH,EAAOI,SA9BN,SAACC,GACxBJ,EAASI,EAAEC,cAAcH,QA6BkCI,WApBxC,SAACF,GACD,KAAfA,EAAEG,UACFN,OAmBI,wBAAQO,QAASP,EAAjB,kBAEJ,6BACKJ,EAAMY,MAAMC,KAAI,SAAAC,GAIT,OAAO,+BAAgB,uBAAOC,KAAK,WAAWC,QAASF,EAAGG,SACtD,wBAAQN,QAJQ,WAChBX,EAAMkB,UAAUJ,EAAGK,KAGnB,eACCL,EAAGZ,QAFQY,EAAGK,SAM/B,gCACI,wBAAQR,QA7BS,WACzBX,EAAMoB,YAAY,QA4BV,iBACA,wBAAQT,QA3BS,WACzBX,EAAMoB,YAAY,WA0BV,oBACA,wBAAQT,QAzBS,WACzBX,EAAMoB,YAAY,cAwBV,6B,YCVDC,MApDf,WAAgB,IAAD,EACYpB,mBAA0B,CAAC,CAACkB,GAAIG,cAAMpB,MAAO,OAAQe,QAAQ,GAChF,CAACE,GAAIG,cAAMpB,MAAO,MAAOe,QAAQ,GACjC,CAACE,GAAIG,cAAMpB,MAAO,KAAMe,QAAQ,GAChC,CAACE,GAAIG,cAAMpB,MAAO,UAAWe,QAAQ,GACrC,CAACE,GAAIG,cAAMpB,MAAO,UAAWe,QAAQ,KAL9B,mBACNL,EADM,KACCW,EADD,OAaetB,mBAAqB,OAbpC,mBAaNuB,EAbM,KAaEC,EAbF,KAmBPC,EAAkBd,EAoBtB,MAlBe,cAAXY,IACAE,EAAkBd,EAAMY,QAAO,SAAAV,GAAE,OAAIA,EAAGG,WAE7B,WAAXO,IACAE,EAAkBd,EAAMY,QAAO,SAAAV,GAAE,OAAKA,EAAGG,WAezC,qBAAKU,UAAU,MAAf,SACI,cAAC5B,EAAD,CAAUG,MAAO,gBACPU,MAAOc,EACPR,UAnCF,SAACU,GACb,IAAMC,EAAWjB,EAAMY,QAAO,SAAAV,GAAE,OAAIA,EAAGK,KAAOS,KAC9CL,EAAQM,IAkCMT,YA7BA,SAACf,GACfoB,EAAUpB,IA6BID,QAjBJ,SAACF,GACX,IACM2B,EAAQ,CAAI,CAACV,GADLG,cACgBpB,MAAOA,EAAOe,QAAQ,IAAtC,mBAAiDL,IAC/DW,EAAQM,IAeMC,aAZC,kBC5BRC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.904a50b6.chunk.js","sourcesContent":["import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {filterType} from \"./App\";\r\n\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\ntype TodolistType = {\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    taskDelet: (idTask: string) => void\r\n    taskChanged: (value: filterType) => void\r\n    changeStatus: () => void\r\n    addTask: (title: string) => void\r\n}\r\n\r\nexport function Todolist(props: TodolistType) {\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n\r\n    const inputHandlerCnange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n\r\n    }\r\n\r\n    const addTask = () => {\r\n        props.addTask(title)\r\n        setTitle(\"\")\r\n    }\r\n\r\n    const onEnterHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.charCode === 13) {\r\n            addTask()\r\n        }\r\n    }\r\n\r\n    const onButtonFilterClick1 = () => {\r\n        props.taskChanged(\"all\")\r\n    }\r\n    const onButtonFilterClick2 = () => {\r\n        props.taskChanged(\"active\")\r\n    }\r\n    const onButtonFilterClick3 = () => {\r\n        props.taskChanged(\"complited\")\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h3>{props.title}</h3>\r\n            <div>\r\n                <input value={title} onChange={inputHandlerCnange} onKeyPress={onEnterHandler}/>\r\n                <button onClick={addTask}>+</button>\r\n            </div>\r\n            <ul>\r\n                {props.tasks.map(el => {\r\n                        const deletedTask = () => {\r\n                            props.taskDelet(el.id)\r\n                        }\r\n                        return <li key={el.id}><input type=\"checkbox\" checked={el.isDone}/>\r\n                            <button onClick={deletedTask}>x</button>\r\n                            {el.title}</li>\r\n                    }\r\n                )}\r\n            </ul>\r\n            <div>\r\n                <button onClick={onButtonFilterClick1}>all</button>\r\n                <button onClick={onButtonFilterClick2}>active</button>\r\n                <button onClick={onButtonFilterClick3}>complited</button>\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n\r\n}","import React, {useState} from 'react';\nimport './App.css';\nimport {TaskType, Todolist} from \"./Todolist\";\nimport {v1} from \"uuid\";\n\n\nexport type filterType = \"all\" | \"active\" | \"complited\"\n\nfunction App() {\n    let [tasks, Settask] = useState<Array<TaskType>>([{id: v1(), title: \"html\", isDone: true},\n        {id: v1(), title: \"css\", isDone: true},\n        {id: v1(), title: \"js\", isDone: false},\n        {id: v1(), title: \"restAPI\", isDone: true},\n        {id: v1(), title: \"graphQL\", isDone: false}])\n\n\n    let taskDelet = (idTask: string) => {\n        const newTasks = tasks.filter(el => el.id !== idTask)\n        Settask(newTasks)\n    }\n\n    let [filter, setFilter] = useState<filterType>(\"all\")\n\n    let taskChanged = (value: filterType) => {\n        setFilter(value)\n    }\n\n    let taskfortodolist = tasks\n\n    if (filter === \"complited\") {\n        taskfortodolist = tasks.filter(el => el.isDone)\n    }\n    if (filter === \"active\") {\n        taskfortodolist = tasks.filter(el => !el.isDone)\n    }\n\n    let addTask = (title: string) => {\n        const newId = v1()\n        const newTasks = [{id: newId, title: title, isDone: false}, ...tasks]\n        Settask(newTasks)\n    }\n\n    let changeStatus = () => {\n\n    }\n\n\n    return (\n        <div className=\"App\">\n            <Todolist title={\"what to learn\"}\n                      tasks={taskfortodolist}\n                      taskDelet={taskDelet}\n                      taskChanged={taskChanged}\n                      addTask={addTask}\n                      changeStatus={changeStatus}/>\n        </div>\n\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}