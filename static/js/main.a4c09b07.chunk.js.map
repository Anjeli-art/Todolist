{"version":3,"sources":["Additemform.tsx","Editablespan.tsx","Todolist.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Additemform","props","useState","title","setTitle","error","setError","addTask","trim","callback","TextField","variant","value","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","Button","onClick","color","style","backgroundColor","fontSize","padding","Editablespan","editmode","seteditmode","Input","onBlur","autoFocus","onDoubleClick","Todolist","Box","boxShadow","border","borderRadius","Newvalue","titleTodoStatus","todolistid","IconButton","aria-label","removeTodo","tasks","map","el","listStyleType","className","isDone","Checkbox","checked","changeStatus","id","inputProps","removeTask","changeTaskTitle","filter","taskChanged","App","todolist1","v1","todolist2","todolist","setTodolist","Settask","idTask","todotasks","filtertodo","todolistNew","find","task","tasksobj","newTask","todo","background","height","AppBar","position","Toolbar","edge","Typography","margin","Container","marginTop","Grid","container","spacing","taskfortodolist","item","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a4c09b07.chunk.js","sourcesContent":["import {Button, createMuiTheme, Input, TextField} from '@material-ui/core';\r\nimport React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\n\r\n\r\n\r\nexport type AdditemformPropsType = {\r\n    callback: (title: string) => void\r\n}\r\n\r\nexport const Additemform = (props: AdditemformPropsType) => {\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n    const inputHandlerCnange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onEnterHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        setError(null)\r\n        if (e.charCode === 13) {\r\n            addTask()\r\n        }\r\n    }\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addTask = () => {\r\n        if (title.trim() !== \"\") {\r\n            debugger\r\n            props.callback(title.trim())\r\n            setTitle(\"\")\r\n        } else {\r\n            setError(\"title is required\")\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n\r\n        <div>\r\n            <TextField variant={\"outlined\"} value={title} onChange={inputHandlerCnange} onKeyPress={onEnterHandler}\r\n                       label={\"Type value\"} error={!!error} helperText={error}/>\r\n            <Button onClick={addTask} variant={\"contained\"} color={\"primary\"}\r\n                    style={{backgroundColor: \"#ffca28\", fontSize: \"10px\", padding: \"18px 0px 18px 0px\"}}>+</Button>\r\n\r\n        </div>\r\n\r\n    );\r\n};\r\n\r\n","import React, {ChangeEvent, useState} from \"react\";\r\nimport {Input} from \"@material-ui/core\";\r\n\r\nexport type EditablespanType = {\r\n    title: string\r\n    onChange:(Newvalue:string)=>void\r\n}\r\n\r\nexport function Editablespan(props: EditablespanType) {\r\n\r\n    let [editmode, seteditmode] = useState(false)\r\n    let [title, setTitle] = useState(\"\")\r\n\r\n    const activaiteEditMode = () => {seteditmode(true);setTitle(props.title)}\r\n    const activaiteViewMode = () => {seteditmode(false);props.onChange(title)}\r\n    const onChangeHandler = (e:ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n    return (\r\n        // eslint-disable-next-line react/jsx-no-undef\r\n        editmode ? <Input value={title} onChange={onChangeHandler} onBlur={activaiteViewMode} autoFocus/>\r\n            : <span onDoubleClick={activaiteEditMode}>{props.title}</span>\r\n    )\r\n\r\n}","import React, {ChangeEvent} from \"react\";\r\nimport {filterType} from \"./App\";\r\nimport {Additemform} from \"./Additemform\";\r\nimport {Editablespan} from \"./Editablespan\";\r\nimport {Box, Button, Checkbox, IconButton} from \"@material-ui/core\";\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\n\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\ntype TodolistType = {\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    removeTask: (idTask: string, todolistid: string) => void\r\n    taskChanged: (value: filterType, todolistid: string) => void\r\n    changeStatus: (idTask: string, isDone: boolean, todolistid: string) => void\r\n    addTask: (title: string, todolistid: string) => void\r\n    filter: filterType\r\n    todolistid: string\r\n    removeTodo: (todolistid: string) => void\r\n    changeTaskTitle: (id: string, Newvalue: string, todolistid: string) => void\r\n    titleTodoStatus: (todolistid: string, Newvalue: string) => void\r\n}\r\n\r\n\r\nexport function Todolist(props: TodolistType) {\r\n\r\n    const onButtonFilterClick1 = () => {\r\n        props.taskChanged(\"all\", props.todolistid)\r\n    }\r\n    const onButtonFilterClick2 = () => {\r\n        props.taskChanged(\"active\", props.todolistid)\r\n    }\r\n    const onButtonFilterClick3 = () => {\r\n        props.taskChanged(\"complited\", props.todolistid)\r\n    }\r\n    const handlerTodoList = () => props.removeTodo(props.todolistid)\r\n    const addTask = (title: string) => {\r\n        props.addTask(title, props.todolistid)\r\n    }\r\n\r\n    const onChangeTitleTodo = (Newvalue: string) => {\r\n        props.titleTodoStatus(props.todolistid, Newvalue)\r\n    }\r\n    return (\r\n        <Box boxShadow={10} style={{padding: \"15px\",border:\"3px #ffca28 solid\",borderRadius:\"10px\",backgroundColor:\"white\"}}>\r\n            <h3>\r\n                <Editablespan title={props.title} onChange={onChangeTitleTodo}/>\r\n                <IconButton aria-label=\"delete\" color=\"default\" onClick={handlerTodoList}>\r\n                    <DeleteIcon/>\r\n                </IconButton>\r\n            </h3>\r\n            <Additemform callback={addTask}/>\r\n            <ul >\r\n                {props.tasks.map(el => {\r\n                        const deletedTask = () => {\r\n                            props.removeTask(el.id, props.todolistid)\r\n                        }\r\n                        const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => props.changeStatus(el.id, e.currentTarget.checked, props.todolistid)\r\n                        const onChangeStatusHendler = (Newvalue: string) => {\r\n                            props.changeTaskTitle(el.id, Newvalue, props.todolistid)\r\n                        }\r\n                        return <li style={{ listStyleType: \"none\" }} key={el.id} className={el.isDone ? \"is-done\" : \"\"}>\r\n                            <Checkbox\r\n                                checked={el.isDone} onChange={onChangeHandler}\r\n                                color=\"default\"\r\n                                inputProps={{'aria-label': 'checkbox with default color'}}\r\n                            />\r\n                            <IconButton aria-label=\"delete\" color=\"default\" onClick={deletedTask}>\r\n                                <DeleteIcon/>\r\n                            </IconButton>\r\n                            <Editablespan title={el.title} onChange={onChangeStatusHendler}/>\r\n                        </li>\r\n                    }\r\n                )}\r\n            </ul>\r\n            <div>\r\n                <Button variant={props.filter === \"all\" ? \"contained\" : \"text\"} style={{padding: \"2px\",}}\r\n                        onClick={onButtonFilterClick1}>all\r\n                </Button>\r\n                <Button variant={props.filter === \"active\" ? \"contained\" : \"text\"} style={{padding: \"2px\"}}\r\n                        onClick={onButtonFilterClick2}>active\r\n                </Button>\r\n                <Button variant={props.filter === \"complited\" ? \"contained\" : \"text\"} style={{padding: \"2px\"}}\r\n                        onClick={onButtonFilterClick3}>complited\r\n                </Button>\r\n            </div>\r\n        </Box>\r\n\r\n    )\r\n\r\n}\r\n\r\n","import React, {useState} from 'react';\nimport './App.css';\nimport {TaskType, Todolist} from \"./Todolist\";\nimport {v1} from \"uuid\";\nimport {Additemform} from \"./Additemform\";\nimport {AppBar, Box, Button, Container, Grid, IconButton, Toolbar, Typography} from \"@material-ui/core\";\nimport MenuIcon from '@material-ui/icons/Menu'\n\n\nexport type filterType = \"all\" | \"active\" | \"complited\"\nexport type TodollistType = { id: string, title: string, filter: filterType }\nexport type TaskStateType = {\n    [key: string]: Array<TaskType>\n}\n\nfunction App() {\n    let todolist1 = v1()\n    let todolist2 = v1()\n\n    let [todolist, setTodolist] = useState<Array<TodollistType>>([\n        {id: todolist1, title: \"what to learn\", filter: \"all\"}, {\n            id: todolist2, title: \"what to bye\", filter: \"active\"\n        }])\n\n    let [tasks, Settask] = useState<TaskStateType>(\n        {\n            [todolist1]: [{id: v1(), title: \"html\", isDone: true},\n                {id: v1(), title: \"css\", isDone: true},\n                {id: v1(), title: \"js\", isDone: false},\n                {id: v1(), title: \"restAPI\", isDone: true},\n                {id: v1(), title: \"graphQL\", isDone: false}],\n\n            [todolist2]:\n                [{id: v1(), title: \"book\", isDone: true},\n                    {id: v1(), title: \"milk\", isDone: true},]\n        })\n\n\n    let removeTask = (idTask: string, todolistid: string) => {\n        let todotasks = tasks[todolistid]\n        tasks[todolistid] = todotasks.filter(el => el.id !== idTask)\n        Settask({...tasks})\n    }\n    let removeTodo = (todolistid: string) => {\n        let filtertodo = todolist.filter(el => el.id !== todolistid)\n        setTodolist(filtertodo)\n        delete tasks[todolistid]\n        Settask({...tasks})\n    }\n\n    let taskChanged = (value: filterType, todolistid: string) => {\n        let todolistNew = todolist.find(el => el.id === todolistid)\n        if (todolistNew) {\n            todolistNew.filter = value\n            setTodolist([...todolist])\n        }\n    }\n\n\n    let addTask = (title: string, todolistid: string) => {\n        const task = {id: v1(), title: title, isDone: false}\n        const tasksobj = tasks[todolistid]\n        tasks[todolistid] = [task, ...tasksobj]\n        Settask({...tasks})\n    }\n\n    let addTodo = (title: string) => {\n        const todo: TodollistType = {id: v1(), title: title, filter: \"all\"}\n        setTodolist([todo, ...todolist])\n        Settask({[todo.id]: [], ...tasks})\n    }\n\n    let changeStatus = (idTask: string, isDone: boolean, todolistid: string) => {\n        const tasksobj = tasks[todolistid]\n        let newTask = tasksobj.find(el => el.id === idTask)\n        if (newTask) {\n            newTask.isDone = isDone\n            Settask({...tasks})\n        }\n    }\n    let changeTaskTitle = (id: string, Newvalue: string, todolistid: string) => {\n        const tasksobj = tasks[todolistid]\n        let newTask = tasksobj.find(el => el.id === id)\n        if (newTask) {\n            newTask.title = Newvalue\n            Settask({...tasks})\n        }\n    }\n    const titleTodoStatus = (todolistid: string, Newvalue: string) => {\n        const todo = todolist.find(el => el.id === todolistid)\n        if (todo) {\n            todo.title = Newvalue\n        }\n        setTodolist([...todolist])\n    }\n\n    // let changeTaskTitle = (id: string, Newvalue:string, todolistid: string) => { //моя функция\n    //     const tasksobj = tasks[todolistid]\n    //     let newTask = tasksobj.map(el => el.id === id ? {...el,title:Newvalue}: el)\n    //     tasks[todolistid]=newTask\n    //     Settask({...tasks})\n    // }\n\n    // const titleTodoStatus = (todolistid: string, Newvalue: string) => {\n    //     const todo = todolist.map(el => el.id === todolistid ? {...el, title: Newvalue} : el)\n    //     setTodolist(todo)\n    // }\n\n    return (\n        <Box style={{background: \"#80cbc4\",height: \"100vh\"}}>\n            <AppBar position=\"static\" style={{backgroundColor: \"#ffca28\", padding: \"20px\"}}>\n                <Toolbar>\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\n                        <MenuIcon/>\n                    </IconButton>\n                    <Typography variant=\"h2\" style={{margin: \"0px 40px 0px 40px\"}}>\n                        Todolist\n                    </Typography>\n                    <Button color=\"inherit\">Login</Button>\n                </Toolbar>\n            </AppBar>\n            <Container style={{marginTop: \"20px\"}}>\n                <Grid container style={{padding:\"20px\"}}>\n                    <Additemform callback={addTodo} />\n                </Grid>\n                <Grid container spacing={3}>\n                    {todolist.map(el => {\n                        let taskfortodolist = tasks[el.id]\n\n                        if (el.filter === \"complited\") {\n                            taskfortodolist = taskfortodolist.filter(el => el.isDone)\n                        }\n                        if (el.filter === \"active\") {\n                            taskfortodolist = taskfortodolist.filter(el => !el.isDone)\n                        }\n                        return <Grid item>\n                            <Todolist title={el.title}\n                                      key={el.id}\n                                      todolistid={el.id}\n                                      tasks={taskfortodolist}\n                                      removeTask={removeTask}\n                                      taskChanged={taskChanged}\n                                      addTask={addTask}\n                                      changeStatus={changeStatus}\n                                      filter={el.filter}\n                                      removeTodo={removeTodo}\n                                      changeTaskTitle={changeTaskTitle}\n                                      titleTodoStatus={titleTodoStatus}\n                            />\n                        </Grid>\n                    })}</Grid>\n            </Container>\n        </Box>)\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}