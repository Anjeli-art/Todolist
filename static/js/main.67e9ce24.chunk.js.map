{"version":3,"sources":["API/todolistAPI.ts","reportWebVitals.ts","features/TodolistsList/todolist-reducer.ts","app/app-reducer.ts","components/AddItemForm/AddItemForm.tsx","features/TodolistsList/tasks-reducer.ts","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","components/LinearProgress/LinearProgress.tsx","components/ErrorSnackBar/SnackBar.tsx","app/App.tsx","app/store.tsx","index.tsx"],"names":["TasksStatuses","PriorytiesTask","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","instance","axios","create","baseURL","withCredentials","headers","ServerResponseResultCode","todolistApi","get","title","post","todolistId","delete","params","put","taskApi","taskid","model","initialstate","status","error","setAppStatusAC","type","setAppErrorAC","initialState","removeTodolistAC","id","AddItemForm","React","memo","callback","disabled","useState","setTitle","setError","addTask","trim","TextField","variant","value","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","Button","onClick","color","style","backgroundColor","fontSize","padding","removeTaskAC","changedTaskAC","setTaskAC","tasksArray","tasks","updateTasksTC","taskId","dispatch","getState","a","currentTask","find","t","apiModel","description","priority","startDate","deadline","res","data","resultCode","success","SyntaxError","messages","name","message","EditableSpan","editmode","seteditmode","titleString","setTitleString","Input","onBlur","autoFocus","onDoubleClick","Task","task","todoId","useDispatch","deletedTask","useCallback","onChangeHandler","checked","Completed","New","onChangeStatusHendler","Newvalue","listStyleType","className","Checkbox","inputProps","IconButton","Todolist","todo","TodoChanged","removeTodo","titleTodoStatus","demo","useEffect","items","useSelector","state","onButtonFilterClick1","onButtonFilterClick2","onButtonFilterClick3","onChangeTitleTodo","taskfortodolist","filter","el","Box","boxShadow","border","borderRadius","entityStatus","item","addTasksTC","map","TodolistsList","todos","todolists","todolistid","addTodo","todolist","addTodoTÐ¡","Grid","container","spacing","LinearDeterminate","progress","setProgress","timer","setInterval","oldProgress","diff","Math","random","min","clearInterval","sx","width","LinearProgress","Alert","forwardRef","props","ref","elevation","ErrorSnackbar","app","handleClose","event","reason","console","log","Snackbar","open","autoHideDuration","onClose","severity","App","height","AppBar","position","Toolbar","edge","Typography","margin","Container","marginTop","rootReducer","combineReducers","action","copyState","forEach","todoListId","stateCopy","store","createStore","applyMiddleware","thunk","window","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.67e9ce24.chunk.js","sourcesContent":["import axios, {AxiosResponse} from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: \"https://social-network.samuraijs.com/api/1.1\",\r\n    withCredentials: true,\r\n    headers: {\r\n        \"API-KEY\": \"7ccc0386-8558-4e56-b3f7-82cd09cd2d3e\"\r\n    }\r\n})\r\n\r\n\r\nexport type TodolistsType = {\r\n    id: string\r\n    addedDate: string\r\n    order: number\r\n    title: string\r\n}\r\n\r\ntype CommonResponseType<T = {}> = {\r\n    resultCode: number\r\n    messages: string[]\r\n    fieldsErrors: string[]\r\n    data: T\r\n}\r\n\r\nexport enum TasksStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n\r\n}\r\n\r\nexport enum PriorytiesTask{\r\n    Low=0,\r\n    Middle=1,\r\n    Hi=2,\r\n    Urgently=3,\r\n    later=4\r\n\r\n}\r\n\r\n\r\nexport type TasksType = {\r\n    description: string\r\n    title: string\r\n    status: TasksStatuses\r\n    priority: PriorytiesTask\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\ntype GetTasksResponse = {\r\n    items: TasksType[]\r\n    totalCount: number\r\n    error: string | null\r\n\r\n}\r\nexport type UpdateTask = {\r\n    title: string\r\n    description: string\r\n    status: TasksStatuses\r\n    priority: PriorytiesTask\r\n    startDate: string\r\n    deadline: string\r\n}\r\n\r\n\r\nexport const todolistApi = {\r\n    getTodolists() {\r\n        return instance.get<Array<TodolistsType>>(\"/todo-lists\")\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<CommonResponseType<{ item: TodolistsType }>,\r\n            AxiosResponse<CommonResponseType<{ item: TodolistsType }>>,\r\n            { title: string }>(\"/todo-lists\", {title})\r\n    }\r\n    ,\r\n    deleteTodolist(todolistId: string) {\r\n        return instance.delete<CommonResponseType>(`/todo-lists/${todolistId}`)\r\n    }\r\n    ,\r\n    updateTodolistTitle(params: { title: string, todolistId: string }) {\r\n        return instance.put<CommonResponseType,\r\n            AxiosResponse<CommonResponseType>,\r\n            { title: string }>(`/todo-lists/${params.todolistId}`, {title: params.title})\r\n    }\r\n}\r\n\r\nexport const taskApi = {\r\n    getTask(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`/todo-lists/${todolistId}/tasks`)\r\n    },\r\n    createTask(title: string, todolistId: string) {\r\n        return instance.post<CommonResponseType<{item:TasksType}>>(`/todo-lists/${todolistId}/tasks`, {title})\r\n    }\r\n    ,\r\n    deleteTask(todolistId: string, taskid: string) {\r\n        return instance.delete<CommonResponseType>(`/todo-lists/${todolistId}/tasks/${taskid}`)\r\n    }\r\n    ,\r\n    updateTask( model:UpdateTask, todolistId: string, taskid: string ) {\r\n        return instance.put<CommonResponseType<{item:TasksType}>>(`/todo-lists/${todolistId}/tasks/${taskid}`, model)\r\n    }\r\n}","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {todolistApi, TodolistsType} from \"../../API/todolistAPI\";\r\nimport {AppThunk} from \"../../app/store\";\r\nimport {setAppErrorAC, setAppStatusAC} from \"../../app/app-reducer\";\r\n\r\nexport type TypeForTasksAction =\r\n    ReturnType<typeof removeTodolistAC>\r\n    | ReturnType<typeof addTodolistAC>\r\n    | ReturnType<typeof setTodosAC>\r\n\r\nexport type ActionTypeTodolists =\r\n    | ReturnType<typeof changeTitleTodoAC>\r\n    | ReturnType<typeof changeFilterTodoAC>\r\n    | TypeForTasksAction\r\n    | ReturnType<typeof changeEntityStatusTodoAC>\r\n\r\n\r\nexport type filterType = \"all\" | \"active\" | \"completed\"\r\nexport type EntityStatusType = \"idle\" | \"sucsses\" | \"loading\" | \"failed\"\r\nexport type TodolistsTypeEntity = TodolistsType & { filter: filterType ,entityStatus:EntityStatusType}\r\n\r\nconst initialState: Array<TodolistsTypeEntity> = []\r\n\r\nexport const todolistsReducer = (state: Array<TodolistsTypeEntity> = initialState, action: ActionTypeTodolists): Array<TodolistsTypeEntity> => {\r\n\r\n    switch (action.type) {\r\n        case 'TODO/REMOVE-TODOLIST':\r\n            return state.filter(todo => todo.id !== action.id)\r\n\r\n        case 'TODO/ADD-TODOLIST':\r\n            return [{...action.todolist, filter: \"all\",entityStatus:\"idle\"}, ...state]\r\n\r\n        case 'TODO/CHANGE-TODOLIST-TITLE':\r\n            return state.map(todo => todo.id === action.id ? {...todo, title: action.title} : todo)\r\n\r\n        case'TODO/CHANGE-TODOLIST-FILTER':\r\n            return state.map(todo => todo.id === action.id ? {...todo, filter: action.filter} : todo)\r\n\r\n        case'TODO/CHANGE-TODOLIST-ENTITY-STATUS':\r\n            return state.map(todo => todo.id === action.id ? {...todo,entityStatus:action.entityStatus } : todo)\r\n\r\n        case\"TODO/SET-TODO\":\r\n            return action.todos.map(todo => {\r\n                return {...todo, filter: \"all\",entityStatus:\"idle\"}\r\n            })\r\n\r\n        default:\r\n            return state\r\n    }\r\n};\r\n\r\nexport const removeTodolistAC = (id: string) => ({\r\n    type: 'TODO/REMOVE-TODOLIST',\r\n    id\r\n}) as const\r\n\r\nexport const addTodolistAC = (todolist: TodolistsType) => ({\r\n    type: 'TODO/ADD-TODOLIST',\r\n    todolist\r\n}) as const\r\n\r\nexport const changeTitleTodoAC = (id: string, newTodolistTitle: string) => ({\r\n    type: 'TODO/CHANGE-TODOLIST-TITLE',\r\n    id,\r\n    title: newTodolistTitle\r\n}) as const\r\n\r\nexport const changeFilterTodoAC = (filter: filterType, id: string) => ({\r\n    type: 'TODO/CHANGE-TODOLIST-FILTER',\r\n    id,\r\n    filter\r\n}) as const\r\n\r\nexport const changeEntityStatusTodoAC = (entityStatus:EntityStatusType, id: string) => ({\r\n    type: 'TODO/CHANGE-TODOLIST-ENTITY-STATUS',\r\n    id,\r\n    entityStatus\r\n}) as const\r\n\r\n\r\nexport const setTodosAC = (todosArray: Array<TodolistsType>) => ({\r\n    type: \"TODO/SET-TODO\",\r\n    todos: todosArray\r\n}) as const\r\n\r\n\r\nexport enum ServerResponseResultCode{\r\n    success=0,\r\n    error=1,\r\n    captcha=10\r\n}\r\n\r\nexport const setTodoTÐ¡ = (): AppThunk => async dispatch => {\r\n    dispatch(setAppStatusAC(\"loading\"))\r\n    try {\r\n        const res = await todolistApi.getTodolists()\r\n        dispatch(setTodosAC(res.data))\r\n    } catch (e: any) {\r\n        if (e.message === 'Network Error') {\r\n            dispatch(setAppErrorAC(\"no connection!\"))\r\n        } else {\r\n            dispatch(setAppErrorAC(\"something error\"))\r\n        }\r\n    } finally {\r\n        dispatch(setAppStatusAC(\"success\"))\r\n    }\r\n}\r\n\r\nexport const removeTodoTÐ¡ = (todolistId: string): AppThunk => async dispatch => {\r\n    dispatch(setAppStatusAC(\"loading\"))\r\n    dispatch(changeEntityStatusTodoAC(\"loading\",todolistId))\r\n    try {\r\n        const res = await todolistApi.deleteTodolist(todolistId)\r\n        if (res.data.resultCode !== ServerResponseResultCode.success) {\r\n            throw new SyntaxError(res.data.messages[0])\r\n        }\r\n        dispatch(removeTodolistAC(todolistId))\r\n    } catch (e: any) {\r\n        if (e.name === \"SyntaxError\") {\r\n            dispatch(setAppErrorAC(e.message))\r\n        } else if (e.message === 'Network Error') {\r\n            dispatch(setAppErrorAC(\"no connection!\"))\r\n        } else {\r\n            dispatch(setAppErrorAC(\"something error\"))\r\n        }\r\n    } finally {\r\n        dispatch(setAppStatusAC(\"success\"))\r\n    }\r\n}\r\n\r\nexport const addTodoTÐ¡ = (title: string): AppThunk => async dispatch => {\r\n    dispatch(setAppStatusAC(\"loading\"))\r\n    try {\r\n        const res = await todolistApi.createTodolist(title)\r\n        if (res.data.resultCode !== ServerResponseResultCode.success) {\r\n            throw new SyntaxError(res.data.messages[0])\r\n        }\r\n        dispatch(addTodolistAC(res.data.data.item))\r\n    } catch (e: any) {\r\n        if (e.name === \"SyntaxError\") {\r\n            dispatch(setAppErrorAC(e.message))\r\n        } else if (e.message === 'Network Error') {\r\n            dispatch(setAppErrorAC(\"no connection!\"))\r\n        } else {\r\n            dispatch(setAppErrorAC(\"something error\"))\r\n        }\r\n    } finally {\r\n        dispatch(setAppStatusAC(\"success\"))\r\n    }\r\n}\r\n\r\nexport const changeTodoTÐ¡ = (todolistId: string, title: string): AppThunk => async dispatch => {\r\n    dispatch(setAppStatusAC(\"loading\"))\r\n    try {\r\n        const res = await todolistApi.updateTodolistTitle({todolistId, title})\r\n        if (res.data.resultCode !== ServerResponseResultCode.success) {\r\n            throw new SyntaxError(res.data.messages[0])\r\n        }\r\n        dispatch(changeTitleTodoAC(todolistId, title))\r\n    } catch (e:any) {\r\n        if (e.name === \"SyntaxError\") {\r\n            dispatch(setAppErrorAC(e.message))\r\n        } else if (e.message === 'Network Error') {\r\n            dispatch(setAppErrorAC(\"no connection!\"))\r\n        } else {\r\n            dispatch(setAppErrorAC(\"something error\"))\r\n        }\r\n    } finally {\r\n        dispatch(setAppStatusAC(\"success\"))\r\n    }\r\n}","export type StatusType = \"idle\" | \"success\" | \"loading\" | \"failed\"\r\nexport type AppActionType = ReturnType<typeof setAppStatusAC> | ReturnType<typeof setAppErrorAC>\r\n\r\nconst initialstate = {\r\n    status: \"idle\" as StatusType,\r\n    error: null as string|null,\r\n}\r\n\r\nexport type InitialAppStateType = typeof initialstate\r\n\r\nexport const appReducer = (state: InitialAppStateType = initialstate, action: AppActionType): InitialAppStateType => {\r\n\r\n    switch (action.type) {\r\n        case \"APP/SET-APP-STATUS\":\r\n            return {...state, status: action.status}\r\n        case \"APP/SET-APP-ERROR\":\r\n            return {...state, error: action.error}\r\n        default:\r\n            return state\r\n    }\r\n\r\n\r\n}\r\n\r\nexport const setAppStatusAC = (status: StatusType) => ({\r\n    type: \"APP/SET-APP-STATUS\",\r\n    status\r\n}) as const\r\n\r\nexport const setAppErrorAC = (error: string|null) => ({\r\n    type: \"APP/SET-APP-ERROR\",\r\n    error\r\n}) as const","import {Button, TextField} from '@material-ui/core';\r\nimport React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {EntityStatusType} from \"../../features/TodolistsList/todolist-reducer\";\r\n\r\n\r\nexport type AdditemformPropsType = {\r\n    callback: (title: string) => void\r\n    disabled?:boolean\r\n}\r\n\r\nexport const AddItemForm:React.FC<AdditemformPropsType> =React.memo( ({callback,disabled}) => {\r\n\r\n    const [title, setTitle] = useState(\"\")\r\n    const [error, setError] = useState<string | null>(null)\r\n\r\n    const inputHandlerCnange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onEnterHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if(error!==null){\r\n            setError(null)\r\n        }\r\n        if (e.charCode === 13) {\r\n            addTask()\r\n        }\r\n    }\r\n\r\n\r\n    const addTask = () => {\r\n        if (title.trim() !== \"\") {\r\n            callback(title.trim())\r\n            setTitle(\"\")\r\n        } else {\r\n            setError(\"title is required\")\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n\r\n        <div>\r\n            <TextField variant={\"outlined\"} value={title} onChange={inputHandlerCnange} onKeyPress={onEnterHandler}\r\n                       label={\"Type value\"} error={!!error} helperText={error} disabled={disabled}/>\r\n            <Button onClick={addTask} variant={\"contained\"} color={\"primary\"}\r\n                    style={{backgroundColor: \"#ffca28\", fontSize: \"10px\", padding: \"18px 0px 18px 0px\"}} disabled={disabled}>+</Button>\r\n\r\n        </div>\r\n\r\n    );\r\n});\r\n\r\n\r\n\r\n","import {PriorytiesTask, taskApi, TasksStatuses, TasksType, UpdateTask} from \"../../API/todolistAPI\";\r\nimport {AppRootType, AppThunk} from \"../../app/store\";\r\nimport {ServerResponseResultCode, TypeForTasksAction} from \"./todolist-reducer\";\r\nimport {setAppErrorAC, setAppStatusAC} from \"../../app/app-reducer\";\r\nimport {handleServerNetworkError} from \"../../utils/error-utils\";\r\n\r\n\r\nexport type ActionTypeTasks =\r\n    ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof changedTaskAC>\r\n    | ReturnType<typeof setTaskAC>\r\n    | TypeForTasksAction\r\n\r\nexport type TaskStateType = {\r\n    [key: string]: Array<TasksType>\r\n}\r\n\r\nconst initialState: TaskStateType = {}\r\n\r\n\r\nexport const tasksReducer = (state: TaskStateType = initialState, action: ActionTypeTasks): TaskStateType => {\r\n\r\n    switch (action.type) {\r\n        case \"TODO/SET-TODO\":\r\n            let copyState = {...state}\r\n            action.todos.forEach((t) => {\r\n                copyState[t.id] = []\r\n            })\r\n            return copyState\r\n        case 'TASK/REMOVE-TASK':\r\n            return {...state, [action.todolistId]: state[action.todolistId].filter(t => t.id !== action.id)}\r\n\r\n        case 'TASK/ADD-TASK':\r\n            return {...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]}\r\n\r\n        case 'TASK/CHANGE-TASK':\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId].map(t => t.id === action.taskid ? {...t, ...action.model} : t)\r\n            }\r\n\r\n        case 'TODO/ADD-TODOLIST':\r\n            return {...state, [action.todolist.id]: []}\r\n\r\n        case 'TODO/REMOVE-TODOLIST': {\r\n            const stateCopy = {...state}\r\n            delete stateCopy[action.id]\r\n            return stateCopy\r\n        }\r\n        case \"TASK/SET-TASKS\":\r\n            return {...state, [action.todolistId]: action.tasks}\r\n\r\n\r\n        default:\r\n            return state\r\n    }\r\n};\r\n\r\nexport const removeTaskAC = (todolistId: string, id: string) => ({\r\n    type: 'TASK/REMOVE-TASK',\r\n    id,\r\n    todolistId,\r\n}) as const\r\n\r\nexport const addTaskAC = (task: TasksType) => ({\r\n    type: 'TASK/ADD-TASK',\r\n    task\r\n}) as const\r\n\r\nexport const changedTaskAC = (taskid: string, model: UpdateTaskForThunk, todolistId: string) => ({\r\n    type: 'TASK/CHANGE-TASK',\r\n    model,\r\n    taskid,\r\n    todolistId,\r\n}) as const\r\n\r\n\r\nexport const setTaskAC = (tasksArray: Array<TasksType>, todolistId: string) => ({\r\n    type: \"TASK/SET-TASKS\",\r\n    tasks: tasksArray,\r\n    todolistId\r\n}) as const\r\n\r\n\r\nexport const setTasksTC = (todolistId: string): AppThunk => async dispatch => {\r\n    dispatch(setAppStatusAC(\"loading\"))\r\n    try {\r\n        const res = await taskApi.getTask(todolistId)\r\n        dispatch(setTaskAC(res.data.items, todolistId))\r\n    } catch (e: any) {\r\n        if (e.name === \"SyntaxError\") {\r\n            dispatch(setAppErrorAC(e.message))\r\n        } else if (e.message === 'Network Error') {\r\n            dispatch(setAppErrorAC(\"no connection!\"))\r\n        } else {\r\n            dispatch(setAppErrorAC(\"something error\"))\r\n        }\r\n\r\n    } finally {\r\n        dispatch(setAppStatusAC(\"success\"))\r\n    }\r\n\r\n}\r\n\r\nexport const deleteTasksTC = (todolistId: string, taskid: string): AppThunk => async dispatch => {\r\n    dispatch(setAppStatusAC(\"loading\"))\r\n    try {\r\n        const res = await taskApi.deleteTask(todolistId, taskid)\r\n        if (res.data.resultCode !== ServerResponseResultCode.success) {\r\n            throw new SyntaxError(res.data.messages[0])\r\n        }\r\n        dispatch(removeTaskAC(todolistId, taskid))\r\n    } catch (e: any) {\r\n        if (e.name === \"SyntaxError\") {\r\n            dispatch(setAppErrorAC(e.message))\r\n        } else if (e.message === 'Network Error') {\r\n            dispatch(setAppErrorAC(\"no connection!\"))\r\n        } else {\r\n            dispatch(setAppErrorAC(\"something error\"))\r\n        }\r\n    } finally {\r\n        dispatch(setAppStatusAC(\"success\"))\r\n    }\r\n\r\n\r\n}\r\n\r\nexport const addTasksTC = (title: string, todolistId: string): AppThunk => async dispatch => {\r\n    dispatch(setAppStatusAC(\"loading\"))\r\n    try {\r\n        const res = await taskApi.createTask(title, todolistId)\r\n        if (res.data.resultCode !== ServerResponseResultCode.success) {\r\n            throw new SyntaxError(res.data.messages[0])\r\n        }\r\n        dispatch(addTaskAC(res.data.data.item))\r\n    } catch (e: any) {\r\n        if (e.name === \"SyntaxError\") {\r\n            dispatch(setAppErrorAC(e.message))\r\n        } else if (e.message === 'Network Error') {\r\n            dispatch(setAppErrorAC(\"no connection!\"))\r\n        } else {\r\n            dispatch(setAppErrorAC(\"something error\"))\r\n        }\r\n    } finally {\r\n        dispatch(setAppStatusAC(\"success\"))\r\n    }\r\n\r\n\r\n}\r\n\r\nexport type UpdateTaskForThunk = {\r\n    title?: string\r\n    description?: string\r\n    status?: TasksStatuses\r\n    priority?: PriorytiesTask\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport const updateTasksTC = (taskId: string, todolistId: string, model: UpdateTaskForThunk): AppThunk =>\r\n    async (dispatch\r\n        , getState: () => AppRootType) => {\r\n        dispatch(setAppStatusAC(\"loading\"))\r\n        const tasks = getState().tasks[todolistId]\r\n        const currentTask = tasks.find(t => {\r\n            return t.id === taskId\r\n        })\r\n        if (currentTask) {\r\n            const apiModel: UpdateTask = {\r\n                title: currentTask.title,\r\n                status: currentTask.status,\r\n                description: currentTask.description,\r\n                priority: currentTask.priority,\r\n                startDate: currentTask.startDate,\r\n                deadline: currentTask.deadline,\r\n                ...model\r\n            }\r\n            try {\r\n                const res = await taskApi.updateTask(apiModel, todolistId, taskId)\r\n                if (res.data.resultCode !== ServerResponseResultCode.success) {\r\n                    throw new SyntaxError(res.data.messages[0])\r\n                }\r\n                dispatch(changedTaskAC(taskId, model, todolistId))\r\n\r\n            } catch (e: any) {\r\n                if (e.name === \"SyntaxError\") {\r\n                    dispatch(setAppErrorAC(e.message))\r\n                } else if (e.message === 'Network Error') {\r\n                    dispatch(setAppErrorAC(\"no connection!\"))\r\n                } else {\r\n                    dispatch(setAppErrorAC(\"something error\"))\r\n                }\r\n            } finally {\r\n                dispatch(setAppStatusAC(\"success\"))\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n","import React, {ChangeEvent, useState} from \"react\";\r\nimport {Input} from \"@material-ui/core\";\r\n\r\nexport type EditablespanType = {\r\n    title: string\r\n    onChange:(Newvalue:string)=>void\r\n    disabled?:boolean\r\n}\r\n\r\nexport const EditableSpan:React.FC< EditablespanType>=React.memo(({title,onChange,disabled})=> {\r\n\r\n    let [editmode, seteditmode] = useState(false)\r\n    let [titleString, setTitleString] = useState(\"\")\r\n\r\n    const activaiteEditMode = () => {seteditmode(true);setTitleString(title)}\r\n    const activaiteViewMode = () => {seteditmode(false);onChange(titleString)}\r\n    const onChangeHandler = (e:ChangeEvent<HTMLInputElement>) => {\r\n        setTitleString(e.currentTarget.value)\r\n    }\r\n    return (\r\n        editmode ? <Input value={titleString} onChange={onChangeHandler} disabled={disabled} onBlur={activaiteViewMode} autoFocus/>\r\n            : <span onDoubleClick={activaiteEditMode} >{title}</span>\r\n    )\r\n\r\n})","import React, {ChangeEvent, useCallback} from \"react\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {\r\n    deleteTasksTC, updateTasksTC\r\n} from \"../../tasks-reducer\";\r\nimport {Checkbox, IconButton} from \"@material-ui/core\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport {EditableSpan} from \"../../../../components/EditableSpan/EditableSpan\";\r\nimport {TasksStatuses, TasksType} from \"../../../../API/todolistAPI\";\r\n\r\n\r\ntype TaskPropsType = {\r\n    task: TasksType\r\n    todoId: string\r\n}\r\n\r\nexport const Task: React.FC<TaskPropsType> = React.memo(({task, todoId}) => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const deletedTask = useCallback(() => {\r\n        dispatch(deleteTasksTC( todoId,task.id,))\r\n    }, [dispatch, todoId,task.id])\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        dispatch(updateTasksTC(task.id,todoId, {status:e.currentTarget.checked ? TasksStatuses.Completed:TasksStatuses.New}))\r\n    }, [dispatch, task.id, todoId])\r\n\r\n    const onChangeStatusHendler = useCallback((Newvalue: string) => {\r\n        dispatch(updateTasksTC(task.id,todoId, {title:Newvalue}))\r\n    }, [dispatch, task.id, todoId])\r\n\r\n    return <li style={{listStyleType: \"none\"}} className={task.status=== TasksStatuses.Completed? \"is-done\" : \"\"}>\r\n        <Checkbox\r\n            checked={task.status===TasksStatuses.Completed} onChange={onChangeHandler}\r\n            color=\"default\"\r\n            inputProps={{'aria-label': 'checkbox with default color'}}\r\n        />\r\n        <IconButton aria-label=\"delete\" color=\"default\" onClick={deletedTask}>\r\n            <DeleteIcon/>\r\n        </IconButton>\r\n        <EditableSpan title={task.title} onChange={onChangeStatusHendler}/>\r\n    </li>\r\n})","import React, {useCallback, useEffect} from \"react\";\r\nimport {Box, Button, IconButton} from \"@material-ui/core\";\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport {addTasksTC, setTasksTC} from \"../tasks-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootType} from \"../../../app/store\";\r\nimport {Task} from \"./Task/Task\";\r\nimport {EditableSpan} from \"../../../components/EditableSpan/EditableSpan\";\r\nimport {AddItemForm} from \"../../../components/AddItemForm/AddItemForm\";\r\nimport {TasksStatuses, TasksType} from \"../../../API/todolistAPI\";\r\nimport {filterType, TodolistsTypeEntity} from \"../todolist-reducer\";\r\n\r\n\r\nexport type TodolistType = {\r\n    todo: TodolistsTypeEntity\r\n    TodoChanged: (value: filterType, todolistid: string) => void\r\n    removeTodo: (todolistid: string) => void\r\n    titleTodoStatus: (todolistid: string, Newvalue: string) => void\r\n    demo?: boolean\r\n}\r\n\r\n\r\nexport const Todolist: React.FC<TodolistType> = React.memo(({todo, TodoChanged, removeTodo, titleTodoStatus, demo}) => {\r\n\r\n    useEffect(() => {\r\n        if (demo) {\r\n            return\r\n        }\r\n        dispatch(setTasksTC(todo.id))\r\n    }, [])\r\n\r\n    const tasks = useSelector<AppRootType, Array<TasksType>>(state => state.tasks[todo.id])\r\n    const dispatch = useDispatch()\r\n\r\n    const onButtonFilterClick1 = useCallback(() => {\r\n        TodoChanged(\"all\", todo.id)\r\n    }, [TodoChanged, todo.id])\r\n    const onButtonFilterClick2 = useCallback(() => {\r\n        TodoChanged(\"active\", todo.id)\r\n    }, [TodoChanged, todo.id])\r\n    const onButtonFilterClick3 = useCallback(() => {\r\n        TodoChanged(\"completed\", todo.id)\r\n    }, [TodoChanged, todo.id])\r\n\r\n    const handlerTodoList = () => removeTodo(todo.id)\r\n\r\n    const onChangeTitleTodo = useCallback((Newvalue: string) => {\r\n        titleTodoStatus(todo.id, Newvalue)\r\n    }, [titleTodoStatus, todo.id])\r\n\r\n    let taskfortodolist = tasks\r\n\r\n    if (todo.filter === \"completed\") {\r\n        taskfortodolist = taskfortodolist.filter(el => el.status === TasksStatuses.Completed)\r\n    }\r\n    if (todo.filter === \"active\") {\r\n        taskfortodolist = taskfortodolist.filter(el => el.status === TasksStatuses.New)\r\n    }\r\n\r\n    return (\r\n        <Box boxShadow={10}\r\n             style={{padding: \"15px\", border: \"3px #ffca28 solid\", borderRadius: \"10px\", backgroundColor: \"white\"}}>\r\n            <h3>\r\n                <EditableSpan title={todo.title} onChange={onChangeTitleTodo} disabled={todo.entityStatus === \"loading\"}/>\r\n                <IconButton aria-label=\"delete\" color=\"default\" onClick={handlerTodoList}\r\n                            disabled={todo.entityStatus === \"loading\"}>\r\n                    <DeleteIcon/>\r\n                </IconButton>\r\n            </h3>\r\n            <AddItemForm disabled={todo.entityStatus === \"loading\"}\r\n                         callback={useCallback((title) => {\r\n                             dispatch(addTasksTC(title, todo.id))\r\n                         }, [dispatch, todo.id])}/>\r\n            <ul>\r\n                {taskfortodolist.map(el => {\r\n                        return <Task task={el} todoId={todo.id} key={el.id}/>\r\n                    }\r\n                )}\r\n            </ul>\r\n            <div>\r\n                <Button variant={todo.filter === \"all\" ? \"contained\" : \"text\"} style={{padding: \"2px\",}}\r\n                        onClick={onButtonFilterClick1}>all\r\n                </Button>\r\n                <Button variant={todo.filter === \"active\" ? \"contained\" : \"text\"} style={{padding: \"2px\"}}\r\n                        onClick={onButtonFilterClick2}>active\r\n                </Button>\r\n                <Button variant={todo.filter === \"completed\" ? \"contained\" : \"text\"} style={{padding: \"2px\"}}\r\n                        onClick={onButtonFilterClick3}>complited\r\n                </Button>\r\n            </div>\r\n        </Box>\r\n\r\n    )\r\n\r\n})\r\n\r\n\r\n\r\n","import React, {useCallback, useEffect} from \"react\";\r\nimport {\r\n    addTodoTÐ¡, changeFilterTodoAC,\r\n    changeTodoTÐ¡,\r\n    filterType,\r\n    removeTodoTÐ¡,\r\n    setTodoTÐ¡,\r\n    TodolistsTypeEntity\r\n} from \"./todolist-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootType} from \"../../app/store\";\r\nimport {Grid} from \"@material-ui/core\";\r\nimport {AddItemForm} from \"../../components/AddItemForm/AddItemForm\";\r\nimport {Todolist} from \"./Todolist/Todolist\";\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodolistsList: React.FC<PropsType> = React.memo(({demo = false}) => {\r\n    useEffect(() => {\r\n        if (demo) {\r\n            return\r\n        }\r\n        dispatch(setTodoTÐ¡())\r\n    }, [])\r\n\r\n    const dispatch = useDispatch()\r\n    const todolists = useSelector<AppRootType, Array<TodolistsTypeEntity>>(state => state.todolists)\r\n\r\n\r\n    const removeTodo = useCallback((todolistid: string) => {\r\n        dispatch(removeTodoTÐ¡(todolistid))\r\n\r\n    }, [dispatch])\r\n    const titleTodoStatus = useCallback((todolistid: string, Newvalue: string) => {\r\n        dispatch(changeTodoTÐ¡(todolistid, Newvalue))\r\n    }, [dispatch])\r\n\r\n    const addTodo = useCallback((title: string) => {\r\n        dispatch(addTodoTÐ¡(title))\r\n    }, [dispatch])\r\n\r\n    const TodoChanged = useCallback((value: filterType, todolistid: string) => {\r\n        dispatch(changeFilterTodoAC(value, todolistid))\r\n    }, [dispatch])\r\n\r\n    return (\r\n        <>\r\n            <Grid container style={{padding: \"20px\"}}>\r\n                <AddItemForm callback={addTodo}/>\r\n            </Grid>\r\n            <Grid container spacing={3}>\r\n                {todolists.map(el => {\r\n                    return <Grid item key={el.id}>\r\n                        <Todolist todo={el}\r\n                                  TodoChanged={TodoChanged}\r\n                                  removeTodo={removeTodo}\r\n                                  titleTodoStatus={titleTodoStatus}\r\n                                  demo={demo}\r\n                        />\r\n                    </Grid>\r\n                })}</Grid>\r\n        </>\r\n    );\r\n});","import Box from '@material-ui/core/Box';\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\nimport * as React from 'react';\r\nimport {useEffect} from 'react';\r\n\r\n\r\n\r\nexport const LinearDeterminate=()=> {\r\n\r\n    const [progress, setProgress] = React.useState(0);\r\n\r\n    useEffect(() => {\r\n        const timer = setInterval(() => {\r\n            setProgress((oldProgress) => {\r\n                if (oldProgress === 100) {\r\n                    return 0;\r\n                }\r\n                const diff = Math.random() * 10;\r\n                return Math.min(oldProgress + diff, 100);\r\n            });\r\n        }, 300);\r\n\r\n        return () => {\r\n            clearInterval(timer);\r\n        };\r\n    }, []);\r\n\r\n    return (\r\n        <Box sx={{ width: '100%' }}>\r\n            <LinearProgress variant=\"determinate\" value={progress}  style={{backgroundColor:\"#80cbc4\"}}/>\r\n        </Box>\r\n    );\r\n}","import React from 'react'\r\nimport MuiAlert, {AlertProps} from '@mui/material/Alert';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootType} from \"../../app/store\";\r\nimport {setAppErrorAC} from \"../../app/app-reducer\";\r\n\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n    props, ref) {\r\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\nexport function ErrorSnackbar() {\r\n    const error = useSelector<AppRootType, string | null>(state => state.app.error)\r\n    const dispatch = useDispatch()\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        dispatch(setAppErrorAC(null));\r\n    };\r\n    console.log(error)\r\n    return (\r\n        <Snackbar open={error !== null} autoHideDuration={8000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\" sx={{width: '100%'}}>\r\n                {error}\r\n                {/*ð */}\r\n            </Alert>\r\n        </Snackbar>\r\n    );\r\n}\r\n","import React from 'react';\nimport './App.css';\n\nimport MenuIcon from '@material-ui/icons/Menu'\nimport {TasksType} from \"../API/todolistAPI\";\nimport {TodolistsList} from \"../features/TodolistsList/TodolistsList\";\nimport {LinearDeterminate} from \"../components/LinearProgress/LinearProgress\";\nimport Box from '@material-ui/core/Box';\nimport AppBar from '@material-ui/core/AppBar';\nimport IconButton from '@material-ui/core/IconButton';\nimport Typography from '@material-ui/core/Typography';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Button from '@material-ui/core/Button';\nimport Container from '@material-ui/core/Container';\nimport {useSelector} from \"react-redux\";\nimport {AppRootType} from \"./store\";\nimport {StatusType} from \"./app-reducer\";\nimport {ErrorSnackbar} from \"../components/ErrorSnackBar/SnackBar\";\n\ntype PropsType={\n    demo?:boolean\n}\n\nexport type TaskStateType = {\n    [key: string]: Array<TasksType>\n}\n\nexport const App: React.FC<PropsType> = ({demo=false}) => {\n\n    const status = useSelector<AppRootType, StatusType>(state => state.app.status)\n    return (\n        <Box>\n            <Box style={{height: \"4px\"}}>\n                {status === \"loading\" && <LinearDeterminate/>}\n            </Box>\n            <AppBar position=\"static\" style={{backgroundColor: \"#ffca28\", padding: \"20px\"}}>\n                <Toolbar>\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\n                        <MenuIcon/>\n                    </IconButton>\n                    <Typography variant=\"h2\" style={{margin: \"0px 40px 0px 40px\"}}>\n                        Todolist\n                    </Typography>\n                    <Button color=\"inherit\">Login</Button>\n                </Toolbar>\n            </AppBar>\n            <Container style={{marginTop: \"20px\"}}>\n                <TodolistsList demo={demo}/>\n            </Container>\n            <ErrorSnackbar/>\n        </Box>)\n}\n\n\nexport default App;","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport {ActionTypeTodolists, todolistsReducer} from \"../features/TodolistsList/todolist-reducer\";\r\nimport {ActionTypeTasks, tasksReducer} from \"../features/TodolistsList/tasks-reducer\";\r\nimport thunk, {ThunkAction} from \"redux-thunk\";\r\nimport {AppActionType, appReducer} from \"./app-reducer\";\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    todolists: todolistsReducer,\r\n    tasks: tasksReducer,\r\n    app:appReducer\r\n})\r\nexport type AppRootType = ReturnType<typeof rootReducer>\r\n\r\nexport const store = createStore(rootReducer,applyMiddleware(thunk))\r\n\r\nexport type AppRootActionType=ActionTypeTasks|ActionTypeTodolists|AppActionType\r\n\r\nexport type AppThunk<ReturnType=void>=ThunkAction<ReturnType, AppRootType, unknown, AppRootActionType>\r\n// @ts-ignore\r\nwindow.store = store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport {App} from \"./app/App\";\nimport {Provider} from \"react-redux\";\nimport {store} from \"./app/store\";\n\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}