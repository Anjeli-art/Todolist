{"version":3,"sources":["Todolist.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Todolist","props","title","tasks","map","el","type","checked","isDone","onClick","taskDelet","id","taskChanged","App","useState","Settask","filter","setFilter","taskfortodolist","className","idTask","newTasks","value","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sLAiBO,SAASA,EAASC,GACrB,OACI,gCACI,6BAAKA,EAAMC,QACX,gCACI,0BACA,0CAEJ,6BACKD,EAAME,MAAMC,KAAI,SAAAC,GAAE,OAAI,+BAAgB,uBAAOC,KAAK,WAAWC,QAASF,EAAGG,SACtE,wBAAQC,QAAS,kBAAMR,EAAMS,UAAUL,EAAGM,KAA1C,eACCN,EAAGH,QAFwBG,EAAGM,SAIvC,gCACI,wBAAQF,QAAS,kBAAMR,EAAMW,YAAY,QAAzC,iBACA,wBAAQH,QAAS,kBAAMR,EAAMW,YAAY,WAAzC,oBACA,wBAAQH,QAAS,kBAAMR,EAAMW,YAAY,cAAzC,6BCWDC,MArCf,WAAgB,IAAD,EACYC,mBAA0B,CAAC,CAACH,GAAI,EAAGT,MAAO,OAAQM,QAAQ,GAC7E,CAACG,GAAI,EAAGT,MAAO,MAAOM,QAAQ,GAC9B,CAACG,GAAI,EAAGT,MAAO,KAAMM,QAAQ,GAC7B,CAACG,GAAI,EAAGT,MAAO,UAAWM,QAAQ,GAClC,CAACG,GAAI,EAAGT,MAAO,UAAWM,QAAQ,KAL3B,mBACNL,EADM,KACCY,EADD,OAaeD,mBAAqB,OAbpC,mBAaNE,EAbM,KAaEC,EAbF,KAmBPC,EAAkBf,EAUtB,MARe,cAAXa,IACAE,EAAkBf,EAAMa,QAAO,SAAAX,GAAE,OAAIA,EAAGG,WAE7B,WAAXQ,IACAE,EAAkBf,EAAMa,QAAO,SAAAX,GAAE,OAAKA,EAAGG,WAKzC,qBAAKW,UAAU,MAAf,SACI,cAACnB,EAAD,CAAUE,MAAO,gBAAiBC,MAAOe,EAAiBR,UAvBlD,SAACU,GACb,IAAMC,EAAWlB,EAAMa,QAAO,SAAAX,GAAE,OAAIA,EAAGM,KAAOS,KAC9CL,EAAQM,IAqB4ET,YAhBxE,SAACU,GACbL,EAAUK,SCTHC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.5229ad95.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {filterType} from \"./App\";\r\n\r\nexport type TaskType = {\r\n    id: number\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\ntype TodolistType = {\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    taskDelet: (idTask: number) => void\r\n    taskChanged: (value: filterType) => void\r\n\r\n}\r\n\r\nexport function Todolist(props: TodolistType) {\r\n    return (\r\n        <div>\r\n            <h3>{props.title}</h3>\r\n            <div>\r\n                <input/>\r\n                <button>+</button>\r\n            </div>\r\n            <ul>\r\n                {props.tasks.map(el => <li key={el.id}><input type=\"checkbox\" checked={el.isDone}/>\r\n                    <button onClick={() => props.taskDelet(el.id)}>x</button>\r\n                    {el.title}</li>)}\r\n            </ul>\r\n            <div>\r\n                <button onClick={() => props.taskChanged(\"all\")}>all</button>\r\n                <button onClick={() => props.taskChanged(\"active\")}>active</button>\r\n                <button onClick={() => props.taskChanged(\"complited\")}>complited</button>\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n\r\n}","import React, {useState} from 'react';\nimport './App.css';\nimport {TaskType, Todolist} from \"./Todolist\";\n\n\nexport type filterType = \"all\" | \"active\" | \"complited\"\n\nfunction App() {\n    let [tasks, Settask] = useState<Array<TaskType>>([{id: 1, title: \"html\", isDone: true},\n        {id: 2, title: \"css\", isDone: true},\n        {id: 3, title: \"js\", isDone: false},\n        {id: 4, title: \"restAPI\", isDone: true},\n        {id: 5, title: \"graphQL\", isDone: false}])\n\n\n    let taskDelet = (idTask: number) => {\n        const newTasks = tasks.filter(el => el.id !== idTask)\n        Settask(newTasks)\n    }\n\n    let [filter, setFilter] = useState<filterType>(\"all\")\n\n    let taskChanged=(value:filterType)=>{\n        setFilter(value)\n    }\n\n    let taskfortodolist = tasks\n\n    if (filter === \"complited\") {\n        taskfortodolist = tasks.filter(el => el.isDone)\n    }\n    if (filter === \"active\") {\n        taskfortodolist = tasks.filter(el => !el.isDone)\n    }\n\n\n    return (\n        <div className=\"App\">\n            <Todolist title={\"what to learn\"} tasks={taskfortodolist} taskDelet={taskDelet} taskChanged={taskChanged}/>\n        </div>\n\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}