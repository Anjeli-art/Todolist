{"version":3,"sources":["Todolist.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Todolist","props","useState","title","setTitle","error","setError","addTask","trim","todolistid","onClick","removeTodo","value","onChange","e","currentTarget","onKeyPress","charCode","className","tasks","map","el","isDone","type","checked","changeStatus","id","removeTask","filter","taskChanged","App","todolist1","v1","todolist2","todolist","setTodolist","Settask","idTask","todotasks","filtertodo","todolistNew","find","task","tasksobj","newTask","taskfortodolist","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1e6cabcb.chunk.js","sourcesContent":["import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {filterType} from \"./App\";\r\n\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\ntype TodolistType = {\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    removeTask: (idTask: string, todolistid: string) => void\r\n    taskChanged: (value: filterType, todolistid: string) => void\r\n    changeStatus: (idTask: string, isDone: boolean, todolistid: string) => void\r\n    addTask: (title: string, todolistid: string) => void\r\n    filter: filterType\r\n    todolistid: string\r\n    removeTodo: (todolistid: string) => void\r\n}\r\n\r\nexport function Todolist(props: TodolistType) {\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n\r\n    const inputHandlerCnange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addTask = () => {\r\n        if (title.trim() !== \"\") {\r\n            debugger\r\n            props.addTask(title.trim(), props.todolistid)\r\n            setTitle(\"\")\r\n        } else {\r\n            setError(\"title is required\")\r\n        }\r\n    }\r\n\r\n    const onEnterHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        setError(null)\r\n        if (e.charCode === 13) {\r\n            addTask()\r\n        }\r\n    }\r\n\r\n    const onButtonFilterClick1 = () => {\r\n        props.taskChanged(\"all\", props.todolistid)\r\n    }\r\n    const onButtonFilterClick2 = () => {\r\n        props.taskChanged(\"active\", props.todolistid)\r\n    }\r\n    const onButtonFilterClick3 = () => {\r\n        props.taskChanged(\"complited\", props.todolistid)\r\n    }\r\n    const handlerTodoList = () => props.removeTodo(props.todolistid)\r\n\r\n    return (\r\n        <div>\r\n            <h3>{props.title}\r\n                <button onClick={handlerTodoList}>x</button>\r\n            </h3>\r\n            <div>\r\n                <input value={title} onChange={inputHandlerCnange} onKeyPress={onEnterHandler}\r\n                       className={error ? \"error\" : \"\"}/>\r\n                <button onClick={addTask}>+</button>\r\n                {error && <div className={\"error-message\"}>{error}</div>}\r\n            </div>\r\n            <ul>\r\n                {props.tasks.map(el => {\r\n                        const deletedTask = () => {\r\n                            props.removeTask(el.id, props.todolistid)\r\n                        }\r\n                        const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => props.changeStatus(el.id, e.currentTarget.checked, props.todolistid)\r\n                        return <li key={el.id} className={el.isDone ? \"is-done\" : \"\"}>\r\n                            <input type=\"checkbox\"\r\n                                   checked={el.isDone}\r\n                                   onChange={onChangeHandler}/>\r\n                            <button onClick={deletedTask}>x</button>\r\n                            {el.title}</li>\r\n                    }\r\n                )}\r\n            </ul>\r\n            <div>\r\n                <button className={props.filter === \"all\" ? \"active-filter\" : \"\"} onClick={onButtonFilterClick1}>all\r\n                </button>\r\n                <button className={props.filter === \"active\" ? \"active-filter\" : \"\"}\r\n                        onClick={onButtonFilterClick2}>active\r\n                </button>\r\n                <button className={props.filter === \"complited\" ? \"active-filter\" : \"\"}\r\n                        onClick={onButtonFilterClick3}>complited\r\n                </button>\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n\r\n}","import React, {useState} from 'react';\nimport './App.css';\nimport {TaskType, Todolist} from \"./Todolist\";\nimport {v1} from \"uuid\";\n\n\nexport type filterType = \"all\" | \"active\" | \"complited\"\nexport type TodollistType = { id: string, title: string, filter: filterType }\n\n\nfunction App() {\n    let todolist1 = v1()\n    let todolist2 = v1()\n\n    let [todolist, setTodolist] = useState<Array<TodollistType>>([\n        {id: todolist1, title: \"what to learn\", filter: \"all\"}, {\n            id: todolist2, title: \"what to bye\", filter: \"active\"\n        }])\n\n    let [tasks, Settask] = useState(\n        {\n            [todolist1]: [{id: v1(), title: \"html\", isDone: true},\n                {id: v1(), title: \"css\", isDone: true},\n                {id: v1(), title: \"js\", isDone: false},\n                {id: v1(), title: \"restAPI\", isDone: true},\n                {id: v1(), title: \"graphQL\", isDone: false}],\n\n            [todolist2]:\n                [{id: v1(), title: \"book\", isDone: true},\n                    {id: v1(), title: \"milk\", isDone: true},]\n        })\n\n\n    let removeTask = (idTask: string, todolistid: string) => {\n        let todotasks = tasks[todolistid]\n        tasks[todolistid] = todotasks.filter(el => el.id !== idTask)\n        Settask({...tasks})\n    }\n    let removeTodo = (todolistid: string) => {\n        let filtertodo=todolist.filter(el=>el.id!==todolistid)\n        setTodolist(filtertodo)\n        delete tasks[todolistid]\n        Settask({...tasks})\n    }\n\n    let taskChanged = (value: filterType, todolistid: string) => {\n        let todolistNew = todolist.find(el => el.id === todolistid)\n        if (todolistNew) {\n            todolistNew.filter = value\n            setTodolist([...todolist])\n        }\n    }\n\n\n    let addTask = (title: string, todolistid: string) => {\n        const task = {id: v1(), title: title, isDone: false}\n        const tasksobj = tasks[todolistid]\n        tasks[todolistid] = [task, ...tasksobj]\n        Settask({...tasks})\n    }\n\n    let changeStatus = (idTask: string, isDone: boolean, todolistid: string) => {\n        const tasksobj = tasks[todolistid]\n        let newTask = tasksobj.find(el => el.id === idTask)\n        if (newTask) {\n            newTask.isDone = isDone\n            Settask({...tasks})\n        }\n    }\n\n\n    return (\n        <div className=\"App\">\n            {todolist.map(el => {\n                let taskfortodolist = tasks[el.id]\n\n                if (el.filter === \"complited\") {\n                    taskfortodolist = taskfortodolist.filter(el => el.isDone)\n                }\n                if (el.filter === \"active\") {\n                    taskfortodolist = taskfortodolist.filter(el => !el.isDone)\n                }\n                return <Todolist title={el.title}\n                                 key={el.id}\n                                 todolistid={el.id}\n                                 tasks={taskfortodolist}\n                                 removeTask={removeTask}\n                                 taskChanged={taskChanged}\n                                 addTask={addTask}\n                                 changeStatus={changeStatus}\n                                 filter={el.filter}\n                                 removeTodo={removeTodo}\n                />\n            })}\n        </div>)\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}