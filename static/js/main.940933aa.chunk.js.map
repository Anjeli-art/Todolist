{"version":3,"sources":["API/todolistAPI.ts","reportWebVitals.ts","features/TodolistsList/todolist-reducer.ts","app/app-reducer.ts","utils/error-utils.ts","features/TodolistsList/tasks-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","components/LinearProgress/LinearProgress.tsx","components/ErrorSnackBar/SnackBar.tsx","features/Login/auth-reducer.ts","features/Login/Login.tsx","features/404/ErrorRouter404.tsx","app/App.tsx","app/store.tsx","index.tsx"],"names":["TasksStatuses","PriorytiesTask","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","instance","axios","create","baseURL","withCredentials","headers","ServerResponseResultCode","todolistApi","get","title","post","res","data","resultCode","success","SyntaxError","messages","todolistId","delete","params","put","taskApi","taskid","model","authApi","initialstate","status","error","setAppStatusAC","type","setAppErrorAC","handleServerNetworkError","e","dispatch","name","message","initialState","removeTaskAC","id","changedTaskAC","setTaskAC","tasksArray","tasks","updateTasksTC","taskId","getState","a","currentTask","find","t","apiModel","description","priority","startDate","deadline","removeTodolistAC","AddItemForm","React","memo","callback","disabled","useState","setTitle","setError","addTask","trim","TextField","variant","value","onChange","currentTarget","onKeyPress","charCode","label","helperText","Button","onClick","color","style","backgroundColor","fontSize","padding","EditableSpan","editmode","seteditmode","titleString","setTitleString","Input","onBlur","autoFocus","onDoubleClick","Task","task","todoId","useDispatch","deletedTask","useCallback","onChangeHandler","checked","Completed","New","onChangeStatusHendler","Newvalue","listStyleType","className","Checkbox","inputProps","IconButton","Todolist","todo","TodoChanged","removeTodo","titleTodoStatus","demo","useSelector","state","onButtonFilterClick1","onButtonFilterClick2","onButtonFilterClick3","onChangeTitleTodo","taskfortodolist","filter","el","Box","boxShadow","border","borderRadius","entityStatus","item","addTasksTC","map","TodolistsList","login","auth","isLoggedIn","useEffect","todos","forEach","items","todolists","todolistid","addTodo","todolist","addTodoTÐ¡","Grid","container","spacing","to","LinearDeterminate","progress","setProgress","timer","setInterval","oldProgress","diff","Math","random","min","clearInterval","sx","width","LinearProgress","Alert","forwardRef","props","ref","elevation","ErrorSnackbar","app","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","isInitialized","setLoginAC","Login","useForm","mode","register","formState","errors","isValid","handleSubmit","reset","justifyContent","FormControl","FormLabel","href","target","onSubmit","setLoginTC","FormGroup","margin","size","email","required","minLength","pattern","height","fontWeight","password","FormControlLabel","control","ErrorRouter404","App","logOut","AppBar","position","Toolbar","edge","Typography","Container","marginTop","path","element","top","textAlign","CircularProgress","rootReducer","combineReducers","action","copyState","todoListId","stateCopy","store","createStore","applyMiddleware","thunk","window","ReactDOM","render","basename","document","getElementById"],"mappings":"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","file":"static/js/main.940933aa.chunk.js","sourcesContent":["import axios, {AxiosResponse} from \"axios\";\r\nimport {ServerResponseResultCode} from \"../features/TodolistsList/todolist-reducer\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: \"https://social-network.samuraijs.com/api/1.1\",\r\n    withCredentials: true,\r\n    headers: {\r\n        \"API-KEY\": \"7ccc0386-8558-4e56-b3f7-82cd09cd2d3e\"\r\n    }\r\n})\r\n\r\n\r\nexport type TodolistsType = {\r\n    id: string\r\n    addedDate: string\r\n    order: number\r\n    title: string\r\n}\r\n\r\ntype CommonResponseType<T = {}> = {\r\n    resultCode: number\r\n    messages: string[]\r\n    fieldsErrors: string[]\r\n    data: T\r\n}\r\n\r\nexport enum TasksStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n\r\n}\r\n\r\nexport enum PriorytiesTask {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    later = 4\r\n\r\n}\r\n\r\n\r\nexport type TasksType = {\r\n    description: string\r\n    title: string\r\n    status: TasksStatuses\r\n    priority: PriorytiesTask\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\ntype GetTasksResponse = {\r\n    items: TasksType[]\r\n    totalCount: number\r\n    error: string | null\r\n\r\n}\r\nexport type UpdateTask = {\r\n    title: string\r\n    description: string\r\n    status: TasksStatuses\r\n    priority: PriorytiesTask\r\n    startDate: string\r\n    deadline: string\r\n}\r\n\r\nexport type LoginParamsType={\r\n    email: string,\r\n    password: string,\r\n    rememberMe?:boolean,\r\n    captcha?:string\r\n}\r\n\r\nexport const todolistApi = {\r\n    getTodolists() {\r\n        return instance.get<Array<TodolistsType>>(\"/todo-lists\")\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<CommonResponseType<{ item: TodolistsType }>,\r\n            AxiosResponse<CommonResponseType<{ item: TodolistsType }>>,\r\n            { title: string }>(\"/todo-lists\", {title}).then((res) => {\r\n            if (res.data.resultCode !== ServerResponseResultCode.success) {\r\n                throw new SyntaxError(res.data.messages[0])\r\n            } else return res\r\n        })\r\n    }\r\n    ,\r\n    deleteTodolist(todolistId: string) {\r\n        return instance.delete<CommonResponseType>(`/todo-lists/${todolistId}`).then((res) => {\r\n            if (res.data.resultCode !== ServerResponseResultCode.success) {\r\n                throw new SyntaxError(res.data.messages[0])\r\n            } else return res\r\n        })\r\n    }\r\n    ,\r\n    updateTodolistTitle(params: { title: string, todolistId: string }) {\r\n        return instance.put<CommonResponseType,\r\n            AxiosResponse<CommonResponseType>,\r\n            { title: string }>(`/todo-lists/${params.todolistId}`, {title: params.title}).then((res) => {\r\n            if (res.data.resultCode !== ServerResponseResultCode.success) {\r\n                throw new SyntaxError(res.data.messages[0])\r\n            } else return res\r\n        })\r\n    }\r\n}\r\n\r\nexport const taskApi = {\r\n    getTask(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`/todo-lists/${todolistId}/tasks`)\r\n    },\r\n    createTask(title: string, todolistId: string) {\r\n        return instance.post<CommonResponseType<{ item: TasksType }>>(`/todo-lists/${todolistId}/tasks`, {title}).then((res) => {\r\n            if (res.data.resultCode !== ServerResponseResultCode.success) {\r\n                throw new SyntaxError(res.data.messages[0])\r\n            } else return res\r\n        })\r\n    }\r\n    ,\r\n    deleteTask(todolistId: string, taskid: string) {\r\n        return instance.delete<CommonResponseType>(`/todo-lists/${todolistId}/tasks/${taskid}`).then((res) => {\r\n            if (res.data.resultCode !== ServerResponseResultCode.success) {\r\n                throw new SyntaxError(res.data.messages[0])\r\n            } else return res\r\n        })\r\n    }\r\n    ,\r\n    updateTask(model: UpdateTask, todolistId: string, taskid: string) {\r\n        return instance.put<CommonResponseType<{ item: TasksType }>>(`/todo-lists/${todolistId}/tasks/${taskid}`, model).then((res) => {\r\n            if (res.data.resultCode !== ServerResponseResultCode.success) {\r\n                throw new SyntaxError(res.data.messages[0])\r\n            } else return res\r\n        })\r\n    }\r\n}\r\n\r\nexport const authApi = {\r\n    createLogin(data:LoginParamsType) {\r\n        return instance.post<LoginParamsType,AxiosResponse<CommonResponseType<{ userId:number }>>>(`/auth/login`, data)\r\n            .then((res) => {\r\n            if (res.data.resultCode !== ServerResponseResultCode.success) {\r\n                throw new SyntaxError(res.data.messages[0])\r\n            } else return res\r\n        })\r\n    },\r\n    deleteLogin() {\r\n        return instance.delete<CommonResponseType>(`/auth/login`)\r\n            .then((res) => {\r\n            if (res.data.resultCode !== ServerResponseResultCode.success) {\r\n                throw new SyntaxError(res.data.messages[0])\r\n            } else return res\r\n        })\r\n    },\r\n    authMe() {\r\n        return instance.get<CommonResponseType<{ id: number, email: string, login: string }>>(`/auth/me`)\r\n            .then((res) => {\r\n            if (res.data.resultCode !== ServerResponseResultCode.success) {\r\n                throw new SyntaxError(res.data.messages[0])\r\n            } else return res\r\n        })\r\n    },\r\n}\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {todolistApi, TodolistsType} from \"../../API/todolistAPI\";\r\nimport {AppThunk} from \"../../app/store\";\r\nimport {setAppStatusAC} from \"../../app/app-reducer\";\r\nimport {handleServerNetworkError} from \"../../utils/error-utils\";\r\nimport {setTasksTC} from \"./tasks-reducer\";\r\n\r\nexport type TypeForTasksAction =\r\n    ReturnType<typeof removeTodolistAC>\r\n    | ReturnType<typeof addTodolistAC>\r\n    | ReturnType<typeof setTodosAC>\r\n    | ReturnType<typeof clearTodolistDateAC>\r\n\r\nexport type ActionTypeTodolists =\r\n    | ReturnType<typeof changeTitleTodoAC>\r\n    | ReturnType<typeof changeFilterTodoAC>\r\n    | TypeForTasksAction\r\n    | ReturnType<typeof changeEntityStatusTodoAC>\r\n\r\n\r\nexport type filterType = \"all\" | \"active\" | \"completed\"\r\nexport type EntityStatusType = \"idle\" | \"sucsses\" | \"loading\" | \"failed\"\r\nexport type TodolistsTypeEntity = TodolistsType & { filter: filterType, entityStatus: EntityStatusType }\r\n\r\nconst initialState: Array<TodolistsTypeEntity> = []\r\n\r\nexport const todolistsReducer = (state: Array<TodolistsTypeEntity> = initialState, action: ActionTypeTodolists): Array<TodolistsTypeEntity> => {\r\n\r\n    switch (action.type) {\r\n        case 'TODO/REMOVE-TODOLIST':\r\n            return state.filter(todo => todo.id !== action.id)\r\n\r\n        case 'TODO/ADD-TODOLIST':\r\n            return [{...action.todolist, filter: \"all\", entityStatus: \"idle\"}, ...state]\r\n\r\n        case 'TODO/CHANGE-TODOLIST-TITLE':\r\n            return state.map(todo => todo.id === action.id ? {...todo, title: action.title} : todo)\r\n\r\n        case'TODO/CHANGE-TODOLIST-FILTER':\r\n            return state.map(todo => todo.id === action.id ? {...todo, filter: action.filter} : todo)\r\n\r\n        case'TODO/CHANGE-TODOLIST-ENTITY-STATUS':\r\n            return state.map(todo => todo.id === action.id ? {...todo, entityStatus: action.entityStatus} : todo)\r\n\r\n        case\"TODO/SET-TODO\":\r\n            return action.todos.map(todo => {\r\n                return {...todo, filter: \"all\", entityStatus: \"idle\"}\r\n            })\r\n        case \"TODO/CLEAR-TODO-DATA\":\r\n            return []\r\n        default:\r\n            return state\r\n    }\r\n};\r\n\r\nexport const removeTodolistAC = (id: string) => ({\r\n    type: 'TODO/REMOVE-TODOLIST',\r\n    id\r\n}) as const\r\n\r\nexport const addTodolistAC = (todolist: TodolistsType) => ({\r\n    type: 'TODO/ADD-TODOLIST',\r\n    todolist\r\n}) as const\r\n\r\nexport const changeTitleTodoAC = (id: string, newTodolistTitle: string) => ({\r\n    type: 'TODO/CHANGE-TODOLIST-TITLE',\r\n    id,\r\n    title: newTodolistTitle\r\n}) as const\r\n\r\nexport const changeFilterTodoAC = (filter: filterType, id: string) => ({\r\n    type: 'TODO/CHANGE-TODOLIST-FILTER',\r\n    id,\r\n    filter\r\n}) as const\r\n\r\nexport const changeEntityStatusTodoAC = (entityStatus: EntityStatusType, id: string) => ({\r\n    type: 'TODO/CHANGE-TODOLIST-ENTITY-STATUS',\r\n    id,\r\n    entityStatus\r\n}) as const\r\n\r\n\r\nexport const setTodosAC = (todosArray: Array<TodolistsType>) => ({\r\n    type: \"TODO/SET-TODO\",\r\n    todos: todosArray\r\n}) as const\r\n\r\n\r\nexport const clearTodolistDateAC = () => ({\r\n    type: \"TODO/CLEAR-TODO-DATA\",\r\n}) as const\r\n\r\nexport enum ServerResponseResultCode {\r\n    success = 0,\r\n    error = 1,\r\n    captcha = 10\r\n}\r\n\r\nexport const setTodoTÐ¡ = (): AppThunk => async dispatch => {\r\n    dispatch(setAppStatusAC(\"loading\"))\r\n    try {\r\n        const res = await todolistApi.getTodolists()\r\n        dispatch(setTodosAC(res.data))\r\n        res.data.forEach((todo) => {\r\n            dispatch(setTasksTC(todo.id))\r\n        })\r\n    } catch (e: any) {\r\n        handleServerNetworkError(e, dispatch)\r\n    } finally {\r\n        dispatch(setAppStatusAC(\"success\"))\r\n    }\r\n}\r\n\r\nexport const removeTodoTÐ¡ = (todolistId: string): AppThunk => async dispatch => {\r\n    dispatch(setAppStatusAC(\"loading\"))\r\n    dispatch(changeEntityStatusTodoAC(\"loading\", todolistId))\r\n    try {\r\n        await todolistApi.deleteTodolist(todolistId)\r\n        dispatch(removeTodolistAC(todolistId))\r\n    } catch (e: any) {\r\n        handleServerNetworkError(e, dispatch)\r\n    } finally {\r\n        dispatch(setAppStatusAC(\"success\"))\r\n    }\r\n}\r\n\r\nexport const addTodoTÐ¡ = (title: string): AppThunk => async dispatch => {\r\n    dispatch(setAppStatusAC(\"loading\"))\r\n    try {\r\n        const res = await todolistApi.createTodolist(title)\r\n        dispatch(addTodolistAC(res.data.data.item))\r\n    } catch (e: any) {\r\n        handleServerNetworkError(e, dispatch)\r\n    } finally {\r\n        dispatch(setAppStatusAC(\"success\"))\r\n    }\r\n}\r\n\r\nexport const changeTodoTÐ¡ = (todolistId: string, title: string): AppThunk => async dispatch => {\r\n    dispatch(setAppStatusAC(\"loading\"))\r\n    try {\r\n        await todolistApi.updateTodolistTitle({todolistId, title})\r\n        dispatch(changeTitleTodoAC(todolistId, title))\r\n    } catch (e: any) {\r\n        handleServerNetworkError(e, dispatch)\r\n    } finally {\r\n        dispatch(setAppStatusAC(\"success\"))\r\n    }\r\n}\r\n","export type StatusType = \"idle\" | \"success\" | \"loading\" | \"failed\"\r\nexport type AppActionType = ReturnType<typeof setAppStatusAC> | ReturnType<typeof setAppErrorAC>\r\n\r\nconst initialstate = {\r\n    status: \"idle\" as StatusType,\r\n    error: null as string|null,\r\n}\r\n\r\nexport type InitialAppStateType = typeof initialstate\r\n\r\nexport const appReducer = (state: InitialAppStateType = initialstate, action: AppActionType): InitialAppStateType => {\r\n\r\n    switch (action.type) {\r\n        case \"APP/SET-APP-STATUS\":\r\n            return {...state, status: action.status}\r\n        case \"APP/SET-APP-ERROR\":\r\n            return {...state, error: action.error}\r\n        default:\r\n            return state\r\n    }\r\n\r\n\r\n}\r\n\r\nexport const setAppStatusAC = (status: StatusType) => ({\r\n    type: \"APP/SET-APP-STATUS\",\r\n    status\r\n}) as const\r\n\r\nexport const setAppErrorAC = (error: string|null) => ({\r\n    type: \"APP/SET-APP-ERROR\",\r\n    error\r\n}) as const","import {setAppErrorAC} from \"../app/app-reducer\";\r\nimport {Dispatch} from \"redux\";\r\n\r\n\r\nexport const handleServerNetworkError = (e:any,dispatch:Dispatch)=> {\r\n    if (e.name === \"SyntaxError\") {\r\n       return dispatch(setAppErrorAC(e.message))\r\n    }\r\n    if (e.message === 'Network Error') {\r\n        return dispatch(setAppErrorAC(\"no connection!\"))\r\n    } else {\r\n        return dispatch(setAppErrorAC(\"something error\"))\r\n    }\r\n}\r\n","import {PriorytiesTask, taskApi, TasksStatuses, TasksType, UpdateTask} from \"../../API/todolistAPI\";\r\nimport {AppRootType, AppThunk} from \"../../app/store\";\r\nimport {TypeForTasksAction} from \"./todolist-reducer\";\r\nimport {setAppStatusAC} from \"../../app/app-reducer\";\r\nimport {handleServerNetworkError} from \"../../utils/error-utils\";\r\n\r\n\r\nexport type ActionTypeTasks =\r\n    ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof changedTaskAC>\r\n    | ReturnType<typeof setTaskAC>\r\n    | TypeForTasksAction\r\n\r\nexport type TaskStateType = {\r\n    [key: string]: Array<TasksType>\r\n}\r\n\r\nconst initialState: TaskStateType = {}\r\n\r\n\r\nexport const tasksReducer = (state: TaskStateType = initialState, action: ActionTypeTasks): TaskStateType => {\r\n\r\n    switch (action.type) {\r\n        case \"TODO/SET-TODO\":\r\n            let copyState = {...state}\r\n            action.todos.forEach((t) => {\r\n                copyState[t.id] = []\r\n            })\r\n            return copyState\r\n        case 'TASK/REMOVE-TASK':\r\n            return {...state, [action.todolistId]: state[action.todolistId].filter(t => t.id !== action.id)}\r\n\r\n        case 'TASK/ADD-TASK':\r\n            return {...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]}\r\n\r\n        case 'TASK/CHANGE-TASK':\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId].map(t => t.id === action.taskid ? {...t, ...action.model} : t)\r\n            }\r\n\r\n        case 'TODO/ADD-TODOLIST':\r\n            return {...state, [action.todolist.id]: []}\r\n\r\n        case 'TODO/REMOVE-TODOLIST': {\r\n            const stateCopy = {...state}\r\n            delete stateCopy[action.id]\r\n            return stateCopy\r\n        }\r\n        case \"TASK/SET-TASKS\":\r\n            return {...state, [action.todolistId]: action.tasks}\r\n\r\n        case \"TODO/CLEAR-TODO-DATA\":\r\n            return {    }\r\n\r\n        default:\r\n            return state\r\n    }\r\n};\r\n\r\nexport const removeTaskAC = (todolistId: string, id: string) => ({\r\n    type: 'TASK/REMOVE-TASK',\r\n    id,\r\n    todolistId,\r\n}) as const\r\n\r\nexport const addTaskAC = (task: TasksType) => ({\r\n    type: 'TASK/ADD-TASK',\r\n    task\r\n}) as const\r\n\r\nexport const changedTaskAC = (taskid: string, model: UpdateTaskForThunk, todolistId: string) => ({\r\n    type: 'TASK/CHANGE-TASK',\r\n    model,\r\n    taskid,\r\n    todolistId,\r\n}) as const\r\n\r\n\r\nexport const setTaskAC = (tasksArray: Array<TasksType>, todolistId: string) => ({\r\n    type: \"TASK/SET-TASKS\",\r\n    tasks: tasksArray,\r\n    todolistId\r\n}) as const\r\n\r\n\r\nexport const setTasksTC = (todolistId: string): AppThunk => async dispatch => {\r\n    dispatch(setAppStatusAC(\"loading\"))\r\n    try {\r\n        const res = await taskApi.getTask(todolistId)\r\n        dispatch(setTaskAC(res.data.items, todolistId))\r\n    } catch (e: any) {\r\n        handleServerNetworkError(e, dispatch)\r\n    } finally {\r\n        dispatch(setAppStatusAC(\"success\"))\r\n    }\r\n\r\n}\r\n\r\nexport const deleteTasksTC = (todolistId: string, taskid: string): AppThunk => async dispatch => {\r\n    dispatch(setAppStatusAC(\"loading\"))\r\n    try {\r\n        await taskApi.deleteTask(todolistId, taskid)\r\n        dispatch(removeTaskAC(todolistId, taskid))\r\n    } catch (e: any) {\r\n        handleServerNetworkError(e, dispatch)\r\n    } finally {\r\n        dispatch(setAppStatusAC(\"success\"))\r\n    }\r\n\r\n\r\n}\r\n\r\nexport const addTasksTC = (title: string, todolistId: string): AppThunk => async dispatch => {\r\n    dispatch(setAppStatusAC(\"loading\"))\r\n    try {\r\n        const res = await taskApi.createTask(title, todolistId)\r\n        dispatch(addTaskAC(res.data.data.item))\r\n    } catch (e: any) {\r\n        handleServerNetworkError(e, dispatch)\r\n    } finally {\r\n        dispatch(setAppStatusAC(\"success\"))\r\n    }\r\n\r\n\r\n}\r\n\r\nexport type UpdateTaskForThunk = {\r\n    title?: string\r\n    description?: string\r\n    status?: TasksStatuses\r\n    priority?: PriorytiesTask\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport const updateTasksTC = (taskId: string, todolistId: string, model: UpdateTaskForThunk): AppThunk =>\r\n    async (dispatch\r\n        , getState: () => AppRootType) => {\r\n        dispatch(setAppStatusAC(\"loading\"))\r\n        const tasks = getState().tasks[todolistId]\r\n        const currentTask = tasks.find(t => {\r\n            return t.id === taskId\r\n        })\r\n        if (currentTask) {\r\n            const apiModel: UpdateTask = {\r\n                title: currentTask.title,\r\n                status: currentTask.status,\r\n                description: currentTask.description,\r\n                priority: currentTask.priority,\r\n                startDate: currentTask.startDate,\r\n                deadline: currentTask.deadline,\r\n                ...model\r\n            }\r\n            try {\r\n                await taskApi.updateTask(apiModel, todolistId, taskId)\r\n                dispatch(changedTaskAC(taskId, model, todolistId))\r\n\r\n            } catch (e: any) {\r\n                handleServerNetworkError(e, dispatch)\r\n            } finally {\r\n                dispatch(setAppStatusAC(\"success\"))\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n","import {Button, TextField} from '@material-ui/core';\r\nimport React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\n\r\n\r\nexport type AdditemformPropsType = {\r\n    callback: (title: string) => void\r\n    disabled?:boolean\r\n}\r\n\r\nexport const AddItemForm:React.FC<AdditemformPropsType> =React.memo( ({callback,disabled}) => {\r\n\r\n    const [title, setTitle] = useState(\"\")\r\n    const [error, setError] = useState<string | null>(null)\r\n\r\n    const inputHandlerCnange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onEnterHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if(error!==null){\r\n            setError(null)\r\n        }\r\n        if (e.charCode === 13) {\r\n            addTask()\r\n        }\r\n    }\r\n\r\n\r\n    const addTask = () => {\r\n        if (title.trim() !== \"\") {\r\n            callback(title.trim())\r\n            setTitle(\"\")\r\n        } else {\r\n            setError(\"title is required\")\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n\r\n        <div>\r\n            <TextField variant={\"outlined\"} value={title} onChange={inputHandlerCnange} onKeyPress={onEnterHandler}\r\n                       label={\"Type value\"} error={!!error} helperText={error} disabled={disabled}/>\r\n            <Button onClick={addTask} variant={\"contained\"} color={\"primary\"}\r\n                    style={{backgroundColor: \"#ffca28\", fontSize: \"10px\", padding: \"18px 0px 18px 0px\"}} disabled={disabled}>+</Button>\r\n\r\n        </div>\r\n\r\n    );\r\n});\r\n\r\n\r\n\r\n","import React, {ChangeEvent, useState} from \"react\";\r\nimport {Input} from \"@material-ui/core\";\r\n\r\nexport type EditablespanType = {\r\n    title: string\r\n    onChange:(Newvalue:string)=>void\r\n    disabled?:boolean\r\n}\r\n\r\nexport const EditableSpan:React.FC< EditablespanType>=React.memo(({title,onChange,disabled})=> {\r\n\r\n    let [editmode, seteditmode] = useState(false)\r\n    let [titleString, setTitleString] = useState(\"\")\r\n\r\n    const activaiteEditMode = () => {seteditmode(true);setTitleString(title)}\r\n    const activaiteViewMode = () => {seteditmode(false);onChange(titleString)}\r\n    const onChangeHandler = (e:ChangeEvent<HTMLInputElement>) => {\r\n        setTitleString(e.currentTarget.value)\r\n    }\r\n    return (\r\n        editmode ? <Input value={titleString} onChange={onChangeHandler} disabled={disabled} onBlur={activaiteViewMode} autoFocus/>\r\n            : <span onDoubleClick={activaiteEditMode} >{title}</span>\r\n    )\r\n\r\n})","import React, {ChangeEvent, useCallback} from \"react\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {\r\n    deleteTasksTC, updateTasksTC\r\n} from \"../../tasks-reducer\";\r\nimport {Checkbox, IconButton} from \"@material-ui/core\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport {EditableSpan} from \"../../../../components/EditableSpan/EditableSpan\";\r\nimport {TasksStatuses, TasksType} from \"../../../../API/todolistAPI\";\r\n\r\n\r\ntype TaskPropsType = {\r\n    task: TasksType\r\n    todoId: string\r\n}\r\n\r\nexport const Task: React.FC<TaskPropsType> = React.memo(({task, todoId}) => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const deletedTask = useCallback(() => {\r\n        dispatch(deleteTasksTC( todoId,task.id,))\r\n    }, [dispatch, todoId,task.id])\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        dispatch(updateTasksTC(task.id,todoId, {status:e.currentTarget.checked ? TasksStatuses.Completed:TasksStatuses.New}))\r\n    }, [dispatch, task.id, todoId])\r\n\r\n    const onChangeStatusHendler = useCallback((Newvalue: string) => {\r\n        dispatch(updateTasksTC(task.id,todoId, {title:Newvalue}))\r\n    }, [dispatch, task.id, todoId])\r\n\r\n    return <li style={{listStyleType: \"none\"}} className={task.status=== TasksStatuses.Completed? \"is-done\" : \"\"}>\r\n        <Checkbox\r\n            checked={task.status===TasksStatuses.Completed} onChange={onChangeHandler}\r\n            color=\"default\"\r\n            inputProps={{'aria-label': 'checkbox with default color'}}\r\n        />\r\n        <IconButton aria-label=\"delete\" color=\"default\" onClick={deletedTask}>\r\n            <DeleteIcon/>\r\n        </IconButton>\r\n        <EditableSpan title={task.title} onChange={onChangeStatusHendler}/>\r\n    </li>\r\n})","import React, {useCallback, useEffect} from \"react\";\r\nimport {Box, Button, IconButton} from \"@material-ui/core\";\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport {addTasksTC, setTasksTC} from \"../tasks-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootType} from \"../../../app/store\";\r\nimport {Task} from \"./Task/Task\";\r\nimport {EditableSpan} from \"../../../components/EditableSpan/EditableSpan\";\r\nimport {AddItemForm} from \"../../../components/AddItemForm/AddItemForm\";\r\nimport {TasksStatuses, TasksType} from \"../../../API/todolistAPI\";\r\nimport {filterType, TodolistsTypeEntity} from \"../todolist-reducer\";\r\n\r\n\r\nexport type TodolistType = {\r\n    todo: TodolistsTypeEntity\r\n    TodoChanged: (value: filterType, todolistid: string) => void\r\n    removeTodo: (todolistid: string) => void\r\n    titleTodoStatus: (todolistid: string, Newvalue: string) => void\r\n    demo?: boolean\r\n}\r\n\r\n\r\nexport const Todolist: React.FC<TodolistType> = React.memo(({todo, TodoChanged, removeTodo, titleTodoStatus, demo}) => {\r\n\r\n    // useEffect(() => {\r\n    //     if (demo) {\r\n    //         return\r\n    //     }\r\n    //     dispatch(setTasksTC(todo.id))\r\n    // }, [])\r\n\r\n    const tasks = useSelector<AppRootType, Array<TasksType>>(state => state.tasks[todo.id])\r\n    const dispatch = useDispatch()\r\n\r\n    const onButtonFilterClick1 = useCallback(() => {\r\n        TodoChanged(\"all\", todo.id)\r\n    }, [TodoChanged, todo.id])\r\n    const onButtonFilterClick2 = useCallback(() => {\r\n        TodoChanged(\"active\", todo.id)\r\n    }, [TodoChanged, todo.id])\r\n    const onButtonFilterClick3 = useCallback(() => {\r\n        TodoChanged(\"completed\", todo.id)\r\n    }, [TodoChanged, todo.id])\r\n\r\n    const handlerTodoList = () => removeTodo(todo.id)\r\n\r\n    const onChangeTitleTodo = useCallback((Newvalue: string) => {\r\n        titleTodoStatus(todo.id, Newvalue)\r\n    }, [titleTodoStatus, todo.id])\r\n\r\n    let taskfortodolist = tasks\r\n\r\n    if (todo.filter === \"completed\") {\r\n        taskfortodolist = taskfortodolist.filter(el => el.status === TasksStatuses.Completed)\r\n    }\r\n    if (todo.filter === \"active\") {\r\n        taskfortodolist = taskfortodolist.filter(el => el.status === TasksStatuses.New)\r\n    }\r\n\r\n    return (\r\n        <Box boxShadow={10}\r\n             style={{padding: \"15px\", border: \"3px #ffca28 solid\", borderRadius: \"10px\", backgroundColor: \"white\"}}>\r\n            <h3>\r\n                <EditableSpan title={todo.title} onChange={onChangeTitleTodo} disabled={todo.entityStatus === \"loading\"}/>\r\n                <IconButton aria-label=\"delete\" color=\"default\" onClick={handlerTodoList}\r\n                            disabled={todo.entityStatus === \"loading\"}>\r\n                    <DeleteIcon/>\r\n                </IconButton>\r\n            </h3>\r\n            <AddItemForm disabled={todo.entityStatus === \"loading\"}\r\n                         callback={useCallback((title) => {\r\n                             dispatch(addTasksTC(title, todo.id))\r\n                         }, [dispatch, todo.id])}/>\r\n            <ul>\r\n                {taskfortodolist.map(el => {\r\n                        return <Task task={el} todoId={todo.id} key={el.id}/>\r\n                    }\r\n                )}\r\n            </ul>\r\n            <div>\r\n                <Button variant={todo.filter === \"all\" ? \"contained\" : \"text\"} style={{padding: \"2px\",}}\r\n                        onClick={onButtonFilterClick1}>all\r\n                </Button>\r\n                <Button variant={todo.filter === \"active\" ? \"contained\" : \"text\"} style={{padding: \"2px\"}}\r\n                        onClick={onButtonFilterClick2}>active\r\n                </Button>\r\n                <Button variant={todo.filter === \"completed\" ? \"contained\" : \"text\"} style={{padding: \"2px\"}}\r\n                        onClick={onButtonFilterClick3}>complited\r\n                </Button>\r\n            </div>\r\n        </Box>\r\n\r\n    )\r\n\r\n})\r\n\r\n\r\n\r\n","import React, {useCallback, useEffect} from \"react\";\r\nimport {\r\n    addTodoTÐ¡, changeFilterTodoAC,\r\n    changeTodoTÐ¡,\r\n    filterType,\r\n    removeTodoTÐ¡,\r\n    setTodoTÐ¡,\r\n    TodolistsTypeEntity\r\n} from \"./todolist-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootType} from \"../../app/store\";\r\nimport {Grid} from \"@material-ui/core\";\r\nimport {AddItemForm} from \"../../components/AddItemForm/AddItemForm\";\r\nimport {Todolist} from \"./Todolist/Todolist\";\r\nimport {Navigate} from \"react-router-dom\";\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodolistsList: React.FC<PropsType> = React.memo(({demo = false}) => {\r\n\r\n    const login = useSelector<AppRootType, boolean>(state => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (demo || !login) {\r\n            return\r\n        }\r\n        dispatch(setTodoTÐ¡())\r\n    }, [dispatch])\r\n\r\n    const todolists = useSelector<AppRootType, Array<TodolistsTypeEntity>>(state => state.todolists)\r\n\r\n    const removeTodo = useCallback((todolistid: string) => {\r\n        dispatch(removeTodoTÐ¡(todolistid))\r\n\r\n    }, [dispatch])\r\n    const titleTodoStatus = useCallback((todolistid: string, Newvalue: string) => {\r\n        dispatch(changeTodoTÐ¡(todolistid, Newvalue))\r\n    }, [dispatch])\r\n\r\n    const addTodo = useCallback((title: string) => {\r\n        dispatch(addTodoTÐ¡(title))\r\n    }, [dispatch])\r\n\r\n    const TodoChanged = useCallback((value: filterType, todolistid: string) => {\r\n        dispatch(changeFilterTodoAC(value, todolistid))\r\n    }, [dispatch])\r\n    if (!login) {\r\n        return <Navigate to={\"login\"}/>\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Grid container style={{padding: \"20px\"}}>\r\n                <AddItemForm callback={addTodo}/>\r\n            </Grid>\r\n            <Grid container spacing={3}>\r\n                {todolists.map(el => {\r\n                    return <Grid item key={el.id}>\r\n                        <Todolist todo={el}\r\n                                  TodoChanged={TodoChanged}\r\n                                  removeTodo={removeTodo}\r\n                                  titleTodoStatus={titleTodoStatus}\r\n                                  demo={demo}\r\n                        />\r\n                    </Grid>\r\n                })}</Grid>\r\n        </>\r\n    );\r\n});\r\n","import Box from '@material-ui/core/Box';\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\nimport * as React from 'react';\r\nimport {useEffect} from 'react';\r\n\r\n\r\n\r\nexport const LinearDeterminate=()=> {\r\n\r\n    const [progress, setProgress] = React.useState(0);\r\n\r\n    useEffect(() => {\r\n        const timer = setInterval(() => {\r\n            setProgress((oldProgress) => {\r\n                if (oldProgress === 100) {\r\n                    return 0;\r\n                }\r\n                const diff = Math.random() * 10;\r\n                return Math.min(oldProgress + diff, 100);\r\n            });\r\n        }, 300);\r\n\r\n        return () => {\r\n            clearInterval(timer);\r\n        };\r\n    }, []);\r\n\r\n    return (\r\n        <Box sx={{ width: '100%' }}>\r\n            <LinearProgress variant=\"determinate\" value={progress}  style={{backgroundColor:\"#80cbc4\"}}/>\r\n        </Box>\r\n    );\r\n}\r\n","import React from 'react'\r\nimport MuiAlert, {AlertProps} from '@mui/material/Alert';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootType} from \"../../app/store\";\r\nimport {setAppErrorAC} from \"../../app/app-reducer\";\r\n\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n    props, ref) {\r\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\nexport function ErrorSnackbar() {\r\n    const error = useSelector<AppRootType, string | null>(state => state.app.error)\r\n    const dispatch = useDispatch()\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        dispatch(setAppErrorAC(null));\r\n    };\r\n\r\n    return (\r\n        <Snackbar open={error !== null} autoHideDuration={8000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\" sx={{width: '100%'}}>\r\n                {error}\r\n                {/*ð */}\r\n            </Alert>\r\n        </Snackbar>\r\n    );\r\n}\r\n","import {AppThunk} from \"../../app/store\";\r\nimport {setAppStatusAC} from \"../../app/app-reducer\";\r\nimport {authApi, LoginParamsType} from \"../../API/todolistAPI\";\r\nimport {handleServerNetworkError} from \"../../utils/error-utils\";\r\nimport {clearTodolistDateAC} from \"../TodolistsList/todolist-reducer\";\r\n\r\nconst initialstate = {\r\n    isLoggedIn: false,\r\n    isInitialized: false\r\n}\r\n\r\nexport type InitialAutchType = typeof initialstate\r\nexport type ActionTypeAuth = ReturnType<typeof setLoginAC> | ReturnType<typeof setInitializedAC>\r\n\r\nexport const authReducer = (state: InitialAutchType = initialstate, action: ActionTypeAuth): InitialAutchType => {\r\n\r\n    switch (action.type) {\r\n        case 'AUTH/SET-LOGIN':\r\n            return {...state, isLoggedIn: action.isLoggedIn}\r\n        case 'AUTH/SET-INITIALIZED':\r\n            return {...state, isInitialized: action.isInitialized}\r\n        default :\r\n            return state\r\n\r\n\r\n    }\r\n}\r\n\r\n\r\nexport const setLoginAC = (isLoggedIn: boolean) => ({\r\n    type: 'AUTH/SET-LOGIN',\r\n    isLoggedIn\r\n}) as const\r\n\r\nexport const setInitializedAC = (isInitialized: boolean) => ({\r\n    type: 'AUTH/SET-INITIALIZED',\r\n    isInitialized\r\n}) as const\r\n\r\nexport const setLoginTC = (data: LoginParamsType): AppThunk => async dispatch => {\r\n    dispatch(setAppStatusAC(\"loading\"))\r\n    try {\r\n        await authApi.createLogin(data)\r\n        dispatch(setLoginAC(true))\r\n    } catch (e: any) {\r\n        handleServerNetworkError(e, dispatch)\r\n    } finally {\r\n        dispatch(setAppStatusAC(\"success\"))\r\n    }\r\n}\r\n\r\nexport const deleteLoginTC = (): AppThunk => async dispatch => {\r\n    dispatch(setAppStatusAC(\"loading\"))\r\n    try {\r\n        await authApi.deleteLogin()\r\n        dispatch(setLoginAC(false))\r\n        dispatch(clearTodolistDateAC())\r\n    } catch (e: any) {\r\n        handleServerNetworkError(e, dispatch)\r\n    } finally {\r\n        dispatch(setAppStatusAC(\"success\"))\r\n    }\r\n}\r\n\r\nexport const setAuthTC = (): AppThunk => async dispatch => {\r\n    try {\r\n        await authApi.authMe()\r\n        dispatch(setLoginAC(true))\r\n    } catch (e: any) {\r\n        handleServerNetworkError(e, dispatch)\r\n    } finally {\r\n        dispatch(setInitializedAC(true))\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport Checkbox from \"@mui/material/Checkbox\";\r\nimport FormControl from \"@mui/material/FormControl\";\r\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\r\nimport FormGroup from \"@mui/material/FormGroup\";\r\nimport FormLabel from \"@mui/material/FormLabel\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport Button from \"@mui/material/Button\";\r\nimport { Container } from \"@mui/material\";\r\nimport { SubmitHandler, useForm } from \"react-hook-form\";\r\nimport { setLoginTC } from \"./auth-reducer\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { AppRootType } from \"../../app/store\";\r\nimport { Navigate } from \"react-router-dom\";\r\nimport { LoginParamsType } from \"../../API/todolistAPI\";\r\n\r\nexport type DataType = {\r\n  [x: string]: any;\r\n};\r\n\r\nexport const Login = () => {\r\n  const login = useSelector<AppRootType, boolean>(\r\n    (state) => state.auth.isLoggedIn\r\n  );\r\n  const dispatch = useDispatch();\r\n\r\n  const {\r\n    register,\r\n    formState: { errors, isValid },\r\n    handleSubmit,\r\n    reset,\r\n  } = useForm<LoginParamsType>({ mode: \"onBlur\" });\r\n  const onSubmit: SubmitHandler<LoginParamsType> = (data) => {\r\n    ////////////////////////////////////////////////////////typescript\r\n    dispatch(setLoginTC(data));\r\n    reset();\r\n  };\r\n  if (login) {\r\n    return <Navigate to={\"/\"} />;\r\n  }\r\n  return (\r\n    <Grid container justifyContent={\"center\"}>\r\n      <Grid item justifyContent={\"center\"}>\r\n        <FormControl>\r\n          <FormLabel>\r\n            <p>\r\n              To log in get registered\r\n              <a\r\n                href={\"https://social-network.samuraijs.com/\"}\r\n                target={\"_blank\"}\r\n              >\r\n                {\" \"}\r\n                here\r\n              </a>\r\n            </p>\r\n            <p>or use common test account credentials:</p>\r\n            <p>Email: free@samuraijs.com</p>\r\n            <p>Password: free</p>\r\n          </FormLabel>\r\n          <form onSubmit={handleSubmit(onSubmit)}>\r\n            <FormGroup>\r\n              <TextField\r\n                label=\"Email\"\r\n                margin=\"normal\"\r\n                size={\"small\"}\r\n                color={errors?.email?.message ? \"error\" : \"info\"}\r\n                {...register(\"email\", {\r\n                  required: \"required email\",\r\n                  minLength: {\r\n                    value: 5,\r\n                    message: \"min length 5\",\r\n                  },\r\n                  pattern: /^\\w+([-+.']\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*$/,\r\n                })}\r\n              />\r\n\r\n              <Container\r\n                style={{ height: 30, color: \"#be0404\", fontWeight: \"bold\" }}\r\n              >\r\n                {errors?.email &&\r\n                  (errors?.email?.message ||\r\n                    \"field email is filled incorrectly\")}\r\n              </Container>\r\n\r\n              <TextField\r\n                type=\"password\"\r\n                label=\"Password\"\r\n                size={\"small\"}\r\n                margin=\"normal\"\r\n                color={errors?.password?.message ? \"error\" : \"info\"}\r\n                {...register(\"password\", {\r\n                  required: \"required password\",\r\n                  minLength: {\r\n                    value: 4,\r\n                    message: \"min length 4\",\r\n                  },\r\n                })}\r\n              />\r\n              <Container\r\n                style={{ height: 30, color: \"#be0404\", fontWeight: \"bold\" }}\r\n              >\r\n                {errors?.password?.message}\r\n              </Container>\r\n\r\n              <FormControlLabel\r\n                label={\"Remember me\"}\r\n                control={<Checkbox />}\r\n                {...register(\"rememberMe\")}\r\n              />\r\n              <Button\r\n                type={\"submit\"}\r\n                variant={\"contained\"}\r\n                color={\"primary\"}\r\n                disabled={!isValid}\r\n              >\r\n                Login\r\n              </Button>\r\n            </FormGroup>\r\n          </form>\r\n        </FormControl>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n","import React from \"react\";\r\n\r\n\r\nexport const ErrorRouter404: React.FC = React.memo(() => {\r\n\r\n    return (\r\n       <div>\r\n           Error404\r\n       </div>\r\n    )\r\n\r\n})\r\n","import React, {useCallback, useEffect} from 'react';\nimport './App.css';\n\nimport MenuIcon from '@material-ui/icons/Menu'\nimport {TasksType} from \"../API/todolistAPI\";\nimport {TodolistsList} from \"../features/TodolistsList/TodolistsList\";\nimport {LinearDeterminate} from \"../components/LinearProgress/LinearProgress\";\nimport Box from '@material-ui/core/Box';\nimport AppBar from '@material-ui/core/AppBar';\nimport IconButton from '@material-ui/core/IconButton';\nimport Typography from '@material-ui/core/Typography';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Button from '@material-ui/core/Button';\nimport Container from '@material-ui/core/Container';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootType} from \"./store\";\nimport {StatusType} from \"./app-reducer\";\nimport {ErrorSnackbar} from \"../components/ErrorSnackBar/SnackBar\";\nimport {Login} from \"../features/Login/Login\";\nimport {Routes, Route, Navigate} from \"react-router-dom\";\nimport {ErrorRouter404} from \"../features/404/ErrorRouter404\";\nimport {deleteLoginTC, setAuthTC} from \"../features/Login/auth-reducer\";\nimport {CircularProgress} from '@mui/material';\n\ntype PropsType = {\n    demo?: boolean\n}\n\nexport type TaskStateType = {\n    [key: string]: Array<TasksType>\n}\n\nexport const App: React.FC<PropsType> = ({demo = false}) => {\n\n    const dispatch = useDispatch()\n\n    useEffect(() => {\n        dispatch(setAuthTC())\n    }, [dispatch])\n\n    const status = useSelector<AppRootType, StatusType>(state => state.app.status)\n    const login = useSelector<AppRootType, boolean>(state => state.auth.isLoggedIn)\n    const isInitialized = useSelector<AppRootType, boolean>(state => state.auth.isInitialized)\n\n    const logOut =  useCallback(() => {\n        dispatch(deleteLoginTC())\n    },[dispatch])\n\n    if (!isInitialized) {\n        return <Container\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\n            <CircularProgress size={120} style={{color: \"#ffca28\"}}/>\n        </Container>\n    }\n\n\n    return (\n        <Box>\n            <Box style={{height: \"4px\"}}>\n                {status === \"loading\" && <LinearDeterminate/>}\n            </Box>\n            <AppBar position=\"static\" style={{backgroundColor: \"#ffca28\", padding: \"20px\"}}>\n                <Toolbar>\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\n                        <MenuIcon/>\n                    </IconButton>\n                    <Typography variant=\"h2\" style={{margin: \"0px 40px 0px 40px\"}}>\n                        Todolist\n                    </Typography>\n                    {login && <Button color=\"inherit\" onClick={logOut}>Log out</Button>}\n                </Toolbar>\n            </AppBar>\n            <Container style={{marginTop: \"20px\"}}>\n                <Routes>\n                    <Route path=\"/\" element={<TodolistsList demo={demo}/>}/>\n                    <Route path=\"login\" element={<Login/>}/>\n                    <Route path=\"404\" element={<ErrorRouter404/>}/>\n                    <Route path=\"*\" element={<Navigate to={\"404\"}/>}/>\n                </Routes>\n            </Container>\n            <ErrorSnackbar/>\n        </Box>)\n}\n\n\nexport default App;\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport {ActionTypeTodolists, todolistsReducer} from \"../features/TodolistsList/todolist-reducer\";\r\nimport {ActionTypeTasks, tasksReducer} from \"../features/TodolistsList/tasks-reducer\";\r\nimport thunk, {ThunkAction} from \"redux-thunk\";\r\nimport {AppActionType, appReducer} from \"./app-reducer\";\r\nimport {ActionTypeAuth, authReducer} from \"../features/Login/auth-reducer\";\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    todolists: todolistsReducer,\r\n    tasks: tasksReducer,\r\n    app:appReducer,\r\n    auth:authReducer\r\n})\r\nexport type AppRootType = ReturnType<typeof rootReducer>\r\n\r\nexport const store = createStore(rootReducer,applyMiddleware(thunk))\r\n\r\nexport type AppRootActionType=ActionTypeTasks|ActionTypeTodolists|AppActionType|ActionTypeAuth\r\n\r\nexport type AppThunk<ReturnType=void>=ThunkAction<ReturnType, AppRootType, unknown, AppRootActionType>\r\n// @ts-ignore\r\nwindow.store = store\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport {App} from \"./app/App\";\nimport {Provider} from \"react-redux\";\nimport {store} from \"./app/store\";\nimport {BrowserRouter} from \"react-router-dom\";\n\nReactDOM.render(\n    <Provider store={store}>\n        <BrowserRouter basename={'Todolist'}>\n            <App/>\n        </BrowserRouter>\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}