{"version":3,"sources":["API/todolistAPI.ts","reportWebVitals.ts","features/TodolistsList/todolist-reducer.ts","components/AddItemForm/AddItemForm.tsx","features/TodolistsList/tasks-reducer.ts","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","app/App.tsx","app/store.tsx","index.tsx"],"names":["TasksStatuses","PriorytiesTask","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","instance","axios","create","baseURL","withCredentials","headers","todolistApi","get","title","post","todolistId","delete","params","put","taskApi","taskid","model","initialState","AddItemForm","React","memo","callback","useState","setTitle","error","setError","addTask","trim","TextField","variant","value","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","Button","onClick","color","style","backgroundColor","fontSize","padding","updateTasksTC","taskId","dispatch","getState","currentTask","tasks","find","t","id","apiModel","status","description","priority","startDate","deadline","res","type","changedTaskAC","EditableSpan","editmode","seteditmode","titleString","setTitleString","Input","onBlur","autoFocus","onDoubleClick","Task","task","todoId","useDispatch","deletedTask","useCallback","removeTaskAC","onChangeHandler","checked","Completed","New","onChangeStatusHendler","Newvalue","listStyleType","className","Checkbox","inputProps","IconButton","Todolist","props","useEffect","todolistid","tasksArray","setTaskAC","data","items","useSelector","state","onButtonFilterClick1","TodoChanged","onButtonFilterClick2","onButtonFilterClick3","onChangeTitleTodo","titleTodoStatus","taskfortodolist","filter","el","Box","boxShadow","border","borderRadius","removeTodo","item","addTasksTC","map","TodolistsList","todos","todolists","addTodo","todolist","addTodoTÐ¡","Grid","container","spacing","App","AppBar","position","Toolbar","edge","Typography","margin","Container","marginTop","rootReducer","combineReducers","action","todo","copyState","forEach","todoListId","stateCopy","store","createStore","applyMiddleware","thunk","window","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.47286d84.chunk.js","sourcesContent":["import axios, {AxiosResponse} from \"axios\";\r\n\r\n\r\nconst instance = axios.create({\r\n    baseURL: \"https://social-network.samuraijs.com/api/1.1\",\r\n    withCredentials: true,\r\n    headers: {\r\n        \"API-KEY\": \"7ccc0386-8558-4e56-b3f7-82cd09cd2d3e\"\r\n    }\r\n})\r\n\r\n\r\nexport type TodolistsType = {\r\n    id: string\r\n    addedDate: string\r\n    order: number\r\n    title: string\r\n}\r\n\r\ntype CommonResponseType<T = {}> = {\r\n    resultCode: number\r\n    messages: string[]\r\n    fieldsErrors: string[]\r\n    data: T\r\n}\r\n\r\nexport enum TasksStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n\r\n}\r\n\r\nexport enum PriorytiesTask{\r\n    Low=0,\r\n    Middle=1,\r\n    Hi=2,\r\n    Urgently=3,\r\n    later=4\r\n\r\n}\r\n\r\n\r\nexport type TasksType = {\r\n    description: string\r\n    title: string\r\n    status: TasksStatuses\r\n    priority: PriorytiesTask\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\ntype GetTasksResponse = {\r\n    items: TasksType[]\r\n    totalCount: number\r\n    error: string | null\r\n\r\n}\r\nexport type UpdateTask = {\r\n    title: string\r\n    description: string\r\n    status: TasksStatuses\r\n    priority: PriorytiesTask\r\n    startDate: string\r\n    deadline: string\r\n}\r\n\r\n\r\nexport const todolistApi = {\r\n    getTodolists() {\r\n        return instance.get<Array<TodolistsType>>(\"/todo-lists\")\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<CommonResponseType<{ item: TodolistsType }>,\r\n            AxiosResponse<CommonResponseType<{ item: TodolistsType }>>,\r\n            { title: string }>(\"/todo-lists\", {title})\r\n    }\r\n    ,\r\n    deleteTodolist(todolistId: string) {\r\n        return instance.delete<CommonResponseType>(`/todo-lists/${todolistId}`)\r\n    }\r\n    ,\r\n    updateTodolistTitle(params: { title: string, todolistId: string }) {\r\n        return instance.put<CommonResponseType,\r\n            AxiosResponse<CommonResponseType>,\r\n            { title: string }>(`/todo-lists/${params.todolistId}`, {title: params.title})\r\n    }\r\n}\r\n\r\nexport const taskApi = {\r\n    getTask(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`/todo-lists/${todolistId}/tasks`)\r\n    },\r\n    createTask(title: string, todolistId: string) {\r\n        return instance.post<CommonResponseType<{item:TasksType}>>(`/todo-lists/${todolistId}/tasks`, {title})\r\n    }\r\n    ,\r\n    deleteTask(todolistId: string, taskid: string) {\r\n        return instance.delete<CommonResponseType>(`/todo-lists/${todolistId}/tasks/${taskid}`)\r\n    }\r\n    ,\r\n    updateTask( model:UpdateTask, todolistId: string, taskid: string ) {\r\n        return instance.put<CommonResponseType<{item:TasksType}>>(`/todo-lists/${todolistId}/tasks/${taskid}`, model)\r\n    }\r\n}","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {todolistApi, TodolistsType} from \"../../API/todolistAPI\";\r\nimport {AppThunk} from \"../../app/store\";\r\n\r\nexport type TypeForTasksAction =\r\n    ReturnType<typeof removeTodolistAC>\r\n    | ReturnType<typeof addTodolistAC>\r\n    | ReturnType<typeof setTodosAC>\r\n\r\nexport type ActionTypeTodolists =\r\n    | ReturnType<typeof changeTitleTodoAC>\r\n    | ReturnType<typeof changeFilterTodoAC>\r\n    | TypeForTasksAction\r\n\r\nexport type filterType = \"all\" | \"active\" | \"completed\"\r\nexport type TodolistsTypeEntity = TodolistsType & { filter: filterType }\r\n\r\nconst initialState: Array<TodolistsTypeEntity> = []\r\n\r\nexport const todolistsReducer = (state: Array<TodolistsTypeEntity> = initialState, action: ActionTypeTodolists): Array<TodolistsTypeEntity> => {\r\n\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(todo => todo.id !== action.id)\r\n\r\n        case 'ADD-TODOLIST':\r\n            return [{...action.todolist, filter: \"all\"}, ...state]\r\n\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            return state.map(todo => todo.id === action.id ? {...todo, title: action.title} : todo)\r\n\r\n        case'CHANGE-TODOLIST-FILTER':\r\n            return state.map(todo => todo.id === action.id ? {...todo, filter: action.filter} : todo)\r\n\r\n        case\"SET-TODO\":\r\n            return action.todos.map(todo => {\r\n                return {...todo, filter: \"all\"}\r\n            })\r\n\r\n        default:\r\n            return state\r\n    }\r\n};\r\n\r\nexport const removeTodolistAC = (id: string) => ({\r\n    type: 'REMOVE-TODOLIST',\r\n    id\r\n}) as const\r\n\r\nexport const addTodolistAC = (todolist: TodolistsType) => ({\r\n    type: 'ADD-TODOLIST',\r\n    todolist\r\n}) as const\r\n\r\nexport const changeTitleTodoAC = (id: string, newTodolistTitle: string) => ({\r\n    type: 'CHANGE-TODOLIST-TITLE',\r\n    id,\r\n    title: newTodolistTitle\r\n}) as const\r\n\r\nexport const changeFilterTodoAC = (filter: filterType, id: string) => ({\r\n    type: 'CHANGE-TODOLIST-FILTER',\r\n    id,\r\n    filter\r\n}) as const\r\n\r\n\r\nexport const setTodosAC = (todosArray: Array<TodolistsType>) => ({\r\n    type: \"SET-TODO\",\r\n    todos: todosArray\r\n}) as const\r\n\r\n\r\nexport const setTodoTÐ¡ = ():AppThunk => (dispatch) => {\r\n    todolistApi.getTodolists()\r\n        .then((res) => {\r\n            dispatch(setTodosAC(res.data))\r\n        })\r\n\r\n}\r\n\r\nexport const removeTodoTÐ¡ = (todolistId: string):AppThunk => (dispatch) => {\r\n    todolistApi.deleteTodolist(todolistId)\r\n        .then((res) => {\r\n            dispatch(removeTodolistAC(todolistId))\r\n        })\r\n\r\n}\r\n\r\nexport const addTodoTÐ¡ = (title: string) :AppThunk=> (dispatch) => {\r\n    todolistApi.createTodolist(title)\r\n        .then((res) => {\r\n            dispatch(addTodolistAC(res.data.data.item))\r\n        })\r\n\r\n}\r\nexport const changeTodoTÐ¡ = (todolistId: string, title: string):AppThunk => (dispatch) => {\r\n    todolistApi.updateTodolistTitle({todolistId, title})\r\n        .then((res) => {\r\n            dispatch(changeTitleTodoAC(todolistId, title))\r\n        })\r\n\r\n}","import {Button, TextField} from '@material-ui/core';\r\nimport React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\n\r\n\r\nexport type AdditemformPropsType = {\r\n    callback: (title: string) => void\r\n}\r\n\r\nexport const AddItemForm:React.FC<AdditemformPropsType> =React.memo( ({callback}) => {\r\n\r\n    const [title, setTitle] = useState(\"\")\r\n    const [error, setError] = useState<string | null>(null)\r\n\r\n    const inputHandlerCnange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onEnterHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if(error!==null){\r\n            setError(null)\r\n        }\r\n        if (e.charCode === 13) {\r\n            addTask()\r\n        }\r\n    }\r\n\r\n\r\n    const addTask = () => {\r\n        if (title.trim() !== \"\") {\r\n            callback(title.trim())\r\n            setTitle(\"\")\r\n        } else {\r\n            setError(\"title is required\")\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n\r\n        <div>\r\n            <TextField variant={\"outlined\"} value={title} onChange={inputHandlerCnange} onKeyPress={onEnterHandler}\r\n                       label={\"Type value\"} error={!!error} helperText={error}/>\r\n            <Button onClick={addTask} variant={\"contained\"} color={\"primary\"}\r\n                    style={{backgroundColor: \"#ffca28\", fontSize: \"10px\", padding: \"18px 0px 18px 0px\"}}>+</Button>\r\n\r\n        </div>\r\n\r\n    );\r\n});\r\n\r\n\r\n\r\n","import {PriorytiesTask, taskApi, TasksStatuses, TasksType, UpdateTask} from \"../../API/todolistAPI\";\r\nimport {AppRootType, AppThunk} from \"../../app/store\";\r\nimport {TypeForTasksAction} from \"./todolist-reducer\";\r\n\r\n\r\nexport type ActionTypeTasks =\r\n    ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof changedTaskAC>\r\n    | ReturnType<typeof setTaskAC>\r\n    | TypeForTasksAction\r\n\r\nexport type TaskStateType = {\r\n    [key: string]: Array<TasksType>\r\n}\r\n\r\nconst initialState: TaskStateType = {}\r\n\r\nexport const tasksReducer = (state: TaskStateType = initialState, action: ActionTypeTasks): TaskStateType => {\r\n\r\n    switch (action.type) {\r\n        case \"SET-TODO\":\r\n            let copyState = {...state}\r\n            action.todos.forEach((t) => {\r\n                copyState[t.id] = []\r\n            })\r\n            return copyState\r\n        case 'REMOVE-TASK':\r\n        return {...state,[action.todolistId]: state[action.todolistId].filter(t => t.id !== action.id)}\r\n\r\n        case 'ADD-TASK':\r\n            return {...state,[action.task.todoListId]:[action.task, ...state[action.task.todoListId]]}\r\n\r\n        case 'CHANGE-TASK':\r\n        return {...state,[action.todolistId]:state[action.todolistId].map(t => t.id === action.taskid ? {...t,...action.model} : t)}\r\n\r\n        case 'ADD-TODOLIST':\r\n        return {...state,[action.todolist.id]:[]}\r\n\r\n        case 'REMOVE-TODOLIST': {\r\n            const stateCopy = {...state}\r\n            delete stateCopy[action.id]\r\n            return stateCopy\r\n        }\r\n        case \"SET-TASKS\":\r\n            return {...state,[action.todolistId] : action.tasks}\r\n\r\n\r\n        default:\r\n            return state\r\n    }\r\n};\r\n\r\nexport const removeTaskAC = (todolistId: string, id: string) => ({\r\n    type: 'REMOVE-TASK',\r\n    id,\r\n    todolistId,\r\n}) as const\r\n\r\nexport const addTaskAC = (task: TasksType) => ({\r\n    type: 'ADD-TASK',\r\n    task\r\n}) as const\r\n\r\nexport const changedTaskAC = (taskid: string, model:UpdateTaskForThunk , todolistId: string) => ({\r\n    type: 'CHANGE-TASK',\r\n    model,\r\n    taskid,\r\n    todolistId,\r\n}) as const\r\n\r\n\r\nexport const setTaskAC = (tasksArray: Array<TasksType>, todolistId: string) => ({\r\n    type: \"SET-TASKS\",\r\n    tasks: tasksArray,\r\n    todolistId\r\n}) as const\r\n\r\n\r\nexport const setTasksTC = (todolistId: string):AppThunk => (dispatch) => {\r\n    taskApi.getTask(todolistId)\r\n        .then((res) => {\r\n            dispatch(setTaskAC(res.data.items, todolistId))\r\n        })\r\n\r\n}\r\n\r\nexport const deleteTasksTC = (todolistId: string, taskid: string):AppThunk => (dispatch) => {\r\n    taskApi.deleteTask(todolistId, taskid)\r\n        .then((res) => {\r\n            dispatch(removeTaskAC(todolistId, taskid))\r\n        })\r\n\r\n}\r\n\r\nexport const addTasksTC = (title: string, todolistId: string):AppThunk => (dispatch) => {\r\n    taskApi.createTask(title, todolistId)\r\n        .then((res) => {\r\n            dispatch(addTaskAC(res.data.data.item))\r\n        })\r\n\r\n}\r\n\r\nexport type UpdateTaskForThunk = {\r\n    title?: string\r\n    description?: string\r\n    status?: TasksStatuses\r\n    priority?: PriorytiesTask\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport const updateTasksTC = (taskId: string, todolistId: string, model:UpdateTaskForThunk):AppThunk =>\r\n    (dispatch, getState: () => AppRootType) => {\r\n        const tasks = getState().tasks[todolistId]\r\n        const currentTask = tasks.find(t => {\r\n            return t.id === taskId\r\n        })\r\n        if (currentTask) {\r\n            const apiModel: UpdateTask = {\r\n                title: currentTask.title,\r\n                status:currentTask.status,\r\n                description: currentTask.description,\r\n                priority: currentTask.priority,\r\n                startDate: currentTask.startDate,\r\n                deadline: currentTask.deadline,\r\n                    ...model\r\n            }\r\n\r\n\r\n            taskApi.updateTask(apiModel, todolistId, taskId)\r\n                .then((res) => {\r\n                    dispatch(changedTaskAC(taskId,model , todolistId))\r\n\r\n                })\r\n\r\n        }\r\n    }\r\n\r\n","import React, {ChangeEvent, useState} from \"react\";\r\nimport {Input} from \"@material-ui/core\";\r\n\r\nexport type EditablespanType = {\r\n    title: string\r\n    onChange:(Newvalue:string)=>void\r\n}\r\n\r\nexport const EditableSpan:React.FC< EditablespanType>=React.memo(({title,onChange})=> {\r\n\r\n    let [editmode, seteditmode] = useState(false)\r\n    let [titleString, setTitleString] = useState(\"\")\r\n\r\n    const activaiteEditMode = () => {seteditmode(true);setTitleString(title)}\r\n    const activaiteViewMode = () => {seteditmode(false);onChange(titleString)}\r\n    const onChangeHandler = (e:ChangeEvent<HTMLInputElement>) => {\r\n        setTitleString(e.currentTarget.value)\r\n    }\r\n    return (\r\n        editmode ? <Input value={titleString} onChange={onChangeHandler} onBlur={activaiteViewMode} autoFocus/>\r\n            : <span onDoubleClick={activaiteEditMode}>{title}</span>\r\n    )\r\n\r\n})","import React, {ChangeEvent, useCallback} from \"react\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {\r\n    deleteTasksTC, updateTasksTC\r\n} from \"../../tasks-reducer\";\r\nimport {Checkbox, IconButton} from \"@material-ui/core\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport {EditableSpan} from \"../../../../components/EditableSpan/EditableSpan\";\r\nimport {TasksStatuses, TasksType} from \"../../../../API/todolistAPI\";\r\n\r\n\r\ntype TaskPropsType = {\r\n    task: TasksType\r\n    todoId: string\r\n}\r\n\r\nexport const Task: React.FC<TaskPropsType> = React.memo(({task, todoId}) => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const deletedTask = useCallback(() => {\r\n        dispatch(deleteTasksTC( todoId,task.id,))\r\n    }, [dispatch, todoId,task.id])\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        dispatch(updateTasksTC(task.id,todoId, {status:e.currentTarget.checked ? TasksStatuses.Completed:TasksStatuses.New}))\r\n    }, [dispatch, task.id, todoId])\r\n\r\n    const onChangeStatusHendler = useCallback((Newvalue: string) => {\r\n        dispatch(updateTasksTC(task.id,todoId, {title:Newvalue}))\r\n    }, [dispatch, task.id, todoId])\r\n\r\n    return <li style={{listStyleType: \"none\"}} className={task.status=== TasksStatuses.Completed? \"is-done\" : \"\"}>\r\n        <Checkbox\r\n            checked={task.status===TasksStatuses.Completed} onChange={onChangeHandler}\r\n            color=\"default\"\r\n            inputProps={{'aria-label': 'checkbox with default color'}}\r\n        />\r\n        <IconButton aria-label=\"delete\" color=\"default\" onClick={deletedTask}>\r\n            <DeleteIcon/>\r\n        </IconButton>\r\n        <EditableSpan title={task.title} onChange={onChangeStatusHendler}/>\r\n    </li>\r\n})","import React, {useCallback, useEffect} from \"react\";\r\nimport {Box, Button, IconButton} from \"@material-ui/core\";\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport {addTasksTC, setTasksTC} from \"../tasks-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootType} from \"../../../app/store\";\r\nimport {Task} from \"./Task/Task\";\r\nimport {EditableSpan} from \"../../../components/EditableSpan/EditableSpan\";\r\nimport {AddItemForm} from \"../../../components/AddItemForm/AddItemForm\";\r\nimport {TasksStatuses, TasksType} from \"../../../API/todolistAPI\";\r\nimport {filterType} from \"../todolist-reducer\";\r\n\r\n\r\nexport type TodolistType = {\r\n    title: string\r\n    TodoChanged: (value: filterType, todolistid: string) => void\r\n    filter: filterType\r\n    todolistid: string\r\n    removeTodo: (todolistid: string) => void\r\n    titleTodoStatus: (todolistid: string, Newvalue: string) => void\r\n}\r\n\r\n\r\nexport const Todolist: React.FC<TodolistType> = React.memo((props) => {\r\n\r\n    useEffect(() => {\r\n        dispatch(setTasksTC(props.todolistid))\r\n    }, [])\r\n\r\n    const tasks = useSelector<AppRootType, Array<TasksType>>(state => state.tasks[props.todolistid])\r\n    const dispatch = useDispatch()\r\n\r\n    const onButtonFilterClick1 = useCallback(() => {\r\n        props.TodoChanged(\"all\", props.todolistid)\r\n    }, [props.TodoChanged, props.todolistid])\r\n    const onButtonFilterClick2 = useCallback(() => {\r\n        props.TodoChanged(\"active\", props.todolistid)\r\n    }, [props.TodoChanged, props.todolistid])\r\n    const onButtonFilterClick3 = useCallback(() => {\r\n        props.TodoChanged(\"completed\", props.todolistid)\r\n    }, [props.TodoChanged, props.todolistid])\r\n\r\n    const handlerTodoList = () => props.removeTodo(props.todolistid)\r\n\r\n    const onChangeTitleTodo = useCallback((Newvalue: string) => {\r\n        props.titleTodoStatus(props.todolistid, Newvalue)\r\n    }, [props.titleTodoStatus, props.todolistid])\r\n\r\n    let taskfortodolist = tasks\r\n\r\n    if (props.filter === \"completed\") {\r\n        taskfortodolist = taskfortodolist.filter(el => el.status === TasksStatuses.Completed)\r\n    }\r\n    if (props.filter === \"active\") {\r\n        taskfortodolist = taskfortodolist.filter(el => el.status === TasksStatuses.New)\r\n    }\r\n\r\n    return (\r\n        <Box boxShadow={10}\r\n             style={{padding: \"15px\", border: \"3px #ffca28 solid\", borderRadius: \"10px\", backgroundColor: \"white\"}}>\r\n            <h3>\r\n                <EditableSpan title={props.title} onChange={onChangeTitleTodo}/>\r\n                <IconButton aria-label=\"delete\" color=\"default\" onClick={handlerTodoList}>\r\n                    <DeleteIcon/>\r\n                </IconButton>\r\n            </h3>\r\n            <AddItemForm\r\n                callback={useCallback((title) => {\r\n                    dispatch(addTasksTC(title, props.todolistid))\r\n                }, [dispatch, props.todolistid])}/>\r\n            <ul>\r\n                {taskfortodolist.map(el => {\r\n                        return <Task task={el} todoId={props.todolistid} key={el.id}/>\r\n                    }\r\n                )}\r\n            </ul>\r\n            <div>\r\n                <Button variant={props.filter === \"all\" ? \"contained\" : \"text\"} style={{padding: \"2px\",}}\r\n                        onClick={onButtonFilterClick1}>all\r\n                </Button>\r\n                <Button variant={props.filter === \"active\" ? \"contained\" : \"text\"} style={{padding: \"2px\"}}\r\n                        onClick={onButtonFilterClick2}>active\r\n                </Button>\r\n                <Button variant={props.filter === \"completed\" ? \"contained\" : \"text\"} style={{padding: \"2px\"}}\r\n                        onClick={onButtonFilterClick3}>complited\r\n                </Button>\r\n            </div>\r\n        </Box>\r\n\r\n    )\r\n\r\n})\r\n\r\n\r\n\r\n","import React, {useCallback, useEffect} from \"react\";\r\nimport {\r\n    addTodoTÐ¡, changeFilterTodoAC,\r\n    changeTodoTÐ¡,\r\n    filterType,\r\n    removeTodoTÐ¡,\r\n    setTodoTÐ¡,\r\n    TodolistsTypeEntity\r\n} from \"./todolist-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootType} from \"../../app/store\";\r\nimport {Grid} from \"@material-ui/core\";\r\nimport {AddItemForm} from \"../../components/AddItemForm/AddItemForm\";\r\nimport {Todolist} from \"./Todolist/Todolist\";\r\n\r\nexport const TodolistsList = () => {\r\n    useEffect(() => {\r\n        dispatch(setTodoTÐ¡())\r\n    }, [])\r\n\r\n    const dispatch = useDispatch()\r\n    const todolists = useSelector<AppRootType, Array<TodolistsTypeEntity>>(state => state.todolists)\r\n\r\n\r\n    const removeTodo = useCallback((todolistid: string) => {\r\n        dispatch(removeTodoTÐ¡(todolistid))\r\n\r\n    }, [dispatch])\r\n    const titleTodoStatus = useCallback((todolistid: string, Newvalue: string) => {\r\n        dispatch(changeTodoTÐ¡(todolistid, Newvalue))\r\n    }, [dispatch])\r\n\r\n    const addTodo = useCallback((title: string) => {\r\n        dispatch(addTodoTÐ¡(title))\r\n    }, [dispatch])\r\n\r\n    const TodoChanged = useCallback((value: filterType, todolistid: string) => {\r\n        dispatch(changeFilterTodoAC(value, todolistid))\r\n    }, [dispatch])\r\n\r\n    return (\r\n        <>\r\n            <Grid container style={{padding: \"20px\"}}>\r\n                <AddItemForm callback={addTodo}/>\r\n            </Grid>\r\n            <Grid container spacing={3}>\r\n                {todolists.map(el => {\r\n                    return <Grid item key={el.id}>\r\n                        <Todolist title={el.title}\r\n                                  todolistid={el.id}\r\n                                  TodoChanged={TodoChanged}\r\n                                  filter={el.filter}\r\n                                  removeTodo={removeTodo}\r\n                                  titleTodoStatus={titleTodoStatus}\r\n                        />\r\n                    </Grid>\r\n                })}</Grid>\r\n        </>\r\n    );\r\n};","import React, {useCallback, useEffect,} from 'react';\nimport './App.css';\nimport {AppBar, Box, Button, Container, Grid, IconButton, Toolbar, Typography} from \"@material-ui/core\";\nimport MenuIcon from '@material-ui/icons/Menu'\nimport {\n    addTodoTÐ¡,\n    changeFilterTodoAC,\n    changeTodoTÐ¡,\n    filterType,\n    removeTodoTÐ¡,\n    setTodoTÐ¡,\n    TodolistsTypeEntity,\n} from \"../features/TodolistsList/todolist-reducer\";\n\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootType} from \"./store\";\nimport {TasksType} from \"../API/todolistAPI\";\nimport {AddItemForm} from \"../components/AddItemForm/AddItemForm\";\nimport {Todolist} from \"../features/TodolistsList/Todolist/Todolist\";\nimport {TodolistsList} from \"../features/TodolistsList/TodolistsList\";\n\n\nexport type TaskStateType = {\n    [key: string]: Array<TasksType>\n}\n\nexport const App: React.FC = () => {\n\n    return (\n        <Box>\n            <AppBar position=\"static\" style={{backgroundColor: \"#ffca28\", padding: \"20px\"}}>\n                <Toolbar>\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\n                        <MenuIcon/>\n                    </IconButton>\n                    <Typography variant=\"h2\" style={{margin: \"0px 40px 0px 40px\"}}>\n                        Todolist\n                    </Typography>\n                    <Button color=\"inherit\">Login</Button>\n                </Toolbar>\n            </AppBar>\n            <Container style={{marginTop: \"20px\"}}>\n                <TodolistsList/>\n            </Container>\n        </Box>)\n}\n\n\n\nexport default App;","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport {ActionTypeTodolists, todolistsReducer} from \"../features/TodolistsList/todolist-reducer\";\r\nimport {ActionTypeTasks, tasksReducer} from \"../features/TodolistsList/tasks-reducer\";\r\nimport thunk, {ThunkAction} from \"redux-thunk\";\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    todolists: todolistsReducer,\r\n    tasks: tasksReducer\r\n})\r\nexport type AppRootType = ReturnType<typeof rootReducer>\r\n\r\nexport const store = createStore(rootReducer,applyMiddleware(thunk))\r\n\r\nexport type AppRootActionType=ActionTypeTasks|ActionTypeTodolists\r\n\r\nexport type AppThunk<ReturnType=void>=ThunkAction<ReturnType, AppRootType, unknown, AppRootActionType>\r\n// @ts-ignore\r\nwindow.store = store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport {App} from \"./app/App\";\nimport {Provider} from \"react-redux\";\nimport {store} from \"./app/store\";\n\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}